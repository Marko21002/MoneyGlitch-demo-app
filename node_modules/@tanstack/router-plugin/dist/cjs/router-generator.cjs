"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const node_path = require("node:path");
const routerGenerator = require("@tanstack/router-generator");
const config = require("./config.cjs");
const constants = require("./constants.cjs");
let lock = false;
const checkLock = () => lock;
const setLock = (bool) => {
  lock = bool;
};
const PLUGIN_NAME = "unplugin:router-generator";
const unpluginRouterGeneratorFactory = (options = {}) => {
  let ROOT = process.cwd();
  let userConfig = options;
  const generate = async () => {
    if (checkLock()) {
      return;
    }
    setLock(true);
    try {
      await routerGenerator.generator(userConfig);
    } catch (err) {
      console.error(err);
      console.info();
    } finally {
      setLock(false);
    }
  };
  const handleFile = async (file, event) => {
    const filePath = node_path.normalize(file);
    if (filePath === node_path.join(ROOT, constants.CONFIG_FILE_NAME)) {
      userConfig = await config.getConfig(options, ROOT);
      return;
    }
    if (event === "update" && filePath === node_path.resolve(userConfig.generatedRouteTree)) {
      return;
    }
    const routesDirectoryPath = node_path.isAbsolute(userConfig.routesDirectory) ? userConfig.routesDirectory : node_path.join(ROOT, userConfig.routesDirectory);
    if (filePath.startsWith(routesDirectoryPath)) {
      await generate();
    }
  };
  const run = async (cb) => {
    if (userConfig.enableRouteGeneration ?? true) {
      await cb();
    }
  };
  return {
    name: "router-generator-plugin",
    async watchChange(id, { event }) {
      await run(async () => {
        await handleFile(id, event);
      });
    },
    vite: {
      async configResolved(config$1) {
        ROOT = config$1.root;
        userConfig = await config.getConfig(options, ROOT);
        await run(generate);
      }
    },
    async rspack(compiler) {
      userConfig = await config.getConfig(options, ROOT);
      await run(generate);
      compiler.hooks.watchRun.tap(PLUGIN_NAME, async () => {
        await run(generate);
      });
    }
  };
};
exports.unpluginRouterGeneratorFactory = unpluginRouterGeneratorFactory;
//# sourceMappingURL=router-generator.cjs.map
