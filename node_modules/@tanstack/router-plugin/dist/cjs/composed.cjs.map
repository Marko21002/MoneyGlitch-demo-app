{"version":3,"file":"composed.cjs","sources":["../../src/composed.ts"],"sourcesContent":["import { unpluginRouterGeneratorFactory } from './router-generator'\nimport { unpluginRouterCodeSplitterFactory } from './code-splitter'\n\nimport type { Config } from './config'\nimport type { UnpluginFactory } from 'unplugin'\n\nexport const unpluginRouterComposedFactory: UnpluginFactory<\n  Partial<Config> | undefined\n> = (options = {}, meta) => {\n  const routerGenerator = unpluginRouterGeneratorFactory(options, meta)\n\n  const routerGeneratorOptions = Array.isArray(routerGenerator)\n    ? routerGenerator\n    : [routerGenerator]\n\n  const routerCodeSplitter = unpluginRouterCodeSplitterFactory(options, meta)\n  let routerCodeSplitterOptions = Array.isArray(routerCodeSplitter)\n    ? routerCodeSplitter\n    : [routerCodeSplitter]\n\n  // Rspack doesn't support the `resolveId` and `transform` hooks provided by unplugin\n  // so we need to disable the code splitter for it\n  // If you're using Rspack, and know how to implement the code splitting, please let us know\n  // We'd love to support it, but we're not sure how to do it yet\n  if (meta.framework === 'rspack') {\n    routerCodeSplitterOptions = []\n  }\n\n  return [...routerGeneratorOptions, ...routerCodeSplitterOptions]\n}\n"],"names":["routerGenerator","unpluginRouterGeneratorFactory","unpluginRouterCodeSplitterFactory"],"mappings":";;;;AAMO,MAAM,gCAET,CAAC,UAAU,IAAI,SAAS;AACpB,QAAAA,oBAAkBC,+CAA+B,OAAa;AAEpE,QAAM,yBAAyB,MAAM,QAAQD,iBAAe,IACxDA,oBACA,CAACA,iBAAe;AAEd,QAAA,qBAAqBE,aAAAA,kCAAkC,SAAS,IAAI;AAC1E,MAAI,4BAA4B,MAAM,QAAQ,kBAAkB,IAC5D,qBACA,CAAC,kBAAkB;AAMnB,MAAA,KAAK,cAAc,UAAU;AAC/B,gCAA4B,CAAA;AAAA,EAC9B;AAEA,SAAO,CAAC,GAAG,wBAAwB,GAAG,yBAAyB;AACjE;;"}