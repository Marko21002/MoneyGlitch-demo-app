import { configSchema, Config } from './config.cjs';

/**
 * @example
 * ```ts
 * export default defineConfig({
 *   // ...
 *   tools: {
 *     rspack: {
 *       plugins: [TanStackRouterGeneratorRspack()],
 *     },
 *   },
 * })
 * ```
 */
declare const TanStackRouterGeneratorRspack: (options?: Partial<{
    routeFileIgnorePrefix: string;
    routesDirectory: string;
    generatedRouteTree: string;
    quoteStyle: "single" | "double";
    semicolons: boolean;
    disableTypes: boolean;
    addExtensions: boolean;
    disableLogging: boolean;
    routeTreeFileHeader: string[];
    routeTreeFileFooter: string[];
    enableRouteGeneration?: boolean | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
    routeFilePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
}> | undefined) => _rspack_core_dist_config_zod.RspackPluginInstance;
/**
 * @experimental Do not use this plugin yet
 *
 * Unplugin's Rspack integration doesn't support the `resolveId` and `transform` hooks.
 * The code-splitter won't work with Rspack and will probably break your dev and build.
 *
 * If you're familiar with Rspack and know how to overcome our `resolveId` and `transform`
 * limitations, please let us know.
 * We'd love to support it, but we're not sure how to do it yet ðŸ˜….
 *
 * @example
 * ```ts
 * export default defineConfig({
 *   // ...
 *   tools: {
 *     rspack: {
 *       plugins: [unstable_TanStackRouterCodeSplitterRspack()],
 *     },
 *   },
 * })
 * ```
 */
declare const unstable_TanStackRouterCodeSplitterRspack: (options?: Partial<{
    routeFileIgnorePrefix: string;
    routesDirectory: string;
    generatedRouteTree: string;
    quoteStyle: "single" | "double";
    semicolons: boolean;
    disableTypes: boolean;
    addExtensions: boolean;
    disableLogging: boolean;
    routeTreeFileHeader: string[];
    routeTreeFileFooter: string[];
    enableRouteGeneration?: boolean | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
    routeFilePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
}> | undefined) => _rspack_core_dist_config_zod.RspackPluginInstance;
/**
 * @example
 * ```ts
 * export default defineConfig({
 *   // ...
 *   tools: {
 *     rspack: {
 *       plugins: [TanStackRouterRspack()],
 *     },
 *   },
 * })
 * ```
 */
declare const TanStackRouterRspack: (options?: Partial<{
    routeFileIgnorePrefix: string;
    routesDirectory: string;
    generatedRouteTree: string;
    quoteStyle: "single" | "double";
    semicolons: boolean;
    disableTypes: boolean;
    addExtensions: boolean;
    disableLogging: boolean;
    routeTreeFileHeader: string[];
    routeTreeFileFooter: string[];
    enableRouteGeneration?: boolean | undefined;
    experimental?: {
        enableCodeSplitting?: boolean | undefined;
    } | undefined;
    routeFilePrefix?: string | undefined;
    routeFileIgnorePattern?: string | undefined;
}> | undefined) => _rspack_core_dist_config_zod.RspackPluginInstance;
export default TanStackRouterRspack;
export { configSchema, TanStackRouterRspack, TanStackRouterGeneratorRspack, unstable_TanStackRouterCodeSplitterRspack, };
export type { Config };
