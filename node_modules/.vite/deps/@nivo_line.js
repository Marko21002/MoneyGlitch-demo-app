import {
  require_jsx_runtime
} from "./chunk-6PXSGDAH.js";
import {
  require_react_dom
} from "./chunk-6BKLQ22S.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment2 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment2;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i6 = 0; i6 < 10; i6++) {
          test2["_" + String.fromCharCode(i6)] = i6;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n7) {
          return test2[n7];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to3 = toObject(target);
      var symbols;
      for (var s5 = 1; s5 < arguments.length; s5++) {
        from = Object(arguments[s5]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to3[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i6 = 0; i6 < symbols.length; i6++) {
            if (propIsEnumerable.call(from, symbols[i6])) {
              to3[symbols[i6]] = from[symbols[i6]];
            }
          }
        }
      }
      return to3;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x4) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign2 = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x4) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x4, y4) {
        if (x4 === y4) {
          return x4 !== 0 || 1 / x4 === 1 / y4;
        } else {
          return x4 !== x4 && y4 !== y4;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey2 = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey2] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey2] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i6 = 0; i6 < propValue.length; i6++) {
            var error = typeChecker(propValue, i6, componentName, location, propFullName + "[" + i6 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i6 = 0; i6 < expectedValues.length; i6++) {
            if (is2(propValue, expectedValues[i6])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i6 = 0; i6 < arrayOfTypeCheckers.length; i6++) {
          var checker = arrayOfTypeCheckers[i6];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i6 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i7 = 0; i7 < arrayOfTypeCheckers.length; i7++) {
            var checker2 = arrayOfTypeCheckers[i7];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign2({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/lodash/_listCacheClear.js
var require_listCacheClear = __commonJS({
  "node_modules/lodash/_listCacheClear.js"(exports, module) {
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    module.exports = listCacheClear;
  }
});

// node_modules/lodash/eq.js
var require_eq = __commonJS({
  "node_modules/lodash/eq.js"(exports, module) {
    function eq(value, other) {
      return value === other || value !== value && other !== other;
    }
    module.exports = eq;
  }
});

// node_modules/lodash/_assocIndexOf.js
var require_assocIndexOf = __commonJS({
  "node_modules/lodash/_assocIndexOf.js"(exports, module) {
    var eq = require_eq();
    function assocIndexOf(array2, key) {
      var length = array2.length;
      while (length--) {
        if (eq(array2[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    module.exports = assocIndexOf;
  }
});

// node_modules/lodash/_listCacheDelete.js
var require_listCacheDelete = __commonJS({
  "node_modules/lodash/_listCacheDelete.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    var arrayProto = Array.prototype;
    var splice = arrayProto.splice;
    function listCacheDelete(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index2 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index2, 1);
      }
      --this.size;
      return true;
    }
    module.exports = listCacheDelete;
  }
});

// node_modules/lodash/_listCacheGet.js
var require_listCacheGet = __commonJS({
  "node_modules/lodash/_listCacheGet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheGet(key) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      return index2 < 0 ? void 0 : data[index2][1];
    }
    module.exports = listCacheGet;
  }
});

// node_modules/lodash/_listCacheHas.js
var require_listCacheHas = __commonJS({
  "node_modules/lodash/_listCacheHas.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    module.exports = listCacheHas;
  }
});

// node_modules/lodash/_listCacheSet.js
var require_listCacheSet = __commonJS({
  "node_modules/lodash/_listCacheSet.js"(exports, module) {
    var assocIndexOf = require_assocIndexOf();
    function listCacheSet(key, value) {
      var data = this.__data__, index2 = assocIndexOf(data, key);
      if (index2 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index2][1] = value;
      }
      return this;
    }
    module.exports = listCacheSet;
  }
});

// node_modules/lodash/_ListCache.js
var require_ListCache = __commonJS({
  "node_modules/lodash/_ListCache.js"(exports, module) {
    var listCacheClear = require_listCacheClear();
    var listCacheDelete = require_listCacheDelete();
    var listCacheGet = require_listCacheGet();
    var listCacheHas = require_listCacheHas();
    var listCacheSet = require_listCacheSet();
    function ListCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    module.exports = ListCache;
  }
});

// node_modules/lodash/_stackClear.js
var require_stackClear = __commonJS({
  "node_modules/lodash/_stackClear.js"(exports, module) {
    var ListCache = require_ListCache();
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    module.exports = stackClear;
  }
});

// node_modules/lodash/_stackDelete.js
var require_stackDelete = __commonJS({
  "node_modules/lodash/_stackDelete.js"(exports, module) {
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    module.exports = stackDelete;
  }
});

// node_modules/lodash/_stackGet.js
var require_stackGet = __commonJS({
  "node_modules/lodash/_stackGet.js"(exports, module) {
    function stackGet(key) {
      return this.__data__.get(key);
    }
    module.exports = stackGet;
  }
});

// node_modules/lodash/_stackHas.js
var require_stackHas = __commonJS({
  "node_modules/lodash/_stackHas.js"(exports, module) {
    function stackHas(key) {
      return this.__data__.has(key);
    }
    module.exports = stackHas;
  }
});

// node_modules/lodash/_freeGlobal.js
var require_freeGlobal = __commonJS({
  "node_modules/lodash/_freeGlobal.js"(exports, module) {
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    module.exports = freeGlobal;
  }
});

// node_modules/lodash/_root.js
var require_root = __commonJS({
  "node_modules/lodash/_root.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    module.exports = root;
  }
});

// node_modules/lodash/_Symbol.js
var require_Symbol = __commonJS({
  "node_modules/lodash/_Symbol.js"(exports, module) {
    var root = require_root();
    var Symbol3 = root.Symbol;
    module.exports = Symbol3;
  }
});

// node_modules/lodash/_getRawTag.js
var require_getRawTag = __commonJS({
  "node_modules/lodash/_getRawTag.js"(exports, module) {
    var Symbol3 = require_Symbol();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var nativeObjectToString = objectProto.toString;
    var symToStringTag = Symbol3 ? Symbol3.toStringTag : void 0;
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e11) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    module.exports = getRawTag;
  }
});

// node_modules/lodash/_objectToString.js
var require_objectToString = __commonJS({
  "node_modules/lodash/_objectToString.js"(exports, module) {
    var objectProto = Object.prototype;
    var nativeObjectToString = objectProto.toString;
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    module.exports = objectToString;
  }
});

// node_modules/lodash/_baseGetTag.js
var require_baseGetTag = __commonJS({
  "node_modules/lodash/_baseGetTag.js"(exports, module) {
    var Symbol3 = require_Symbol();
    var getRawTag = require_getRawTag();
    var objectToString = require_objectToString();
    var nullTag = "[object Null]";
    var undefinedTag = "[object Undefined]";
    var symToStringTag = Symbol3 ? Symbol3.toStringTag : void 0;
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    module.exports = baseGetTag;
  }
});

// node_modules/lodash/isObject.js
var require_isObject = __commonJS({
  "node_modules/lodash/isObject.js"(exports, module) {
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    module.exports = isObject;
  }
});

// node_modules/lodash/isFunction.js
var require_isFunction = __commonJS({
  "node_modules/lodash/isFunction.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObject = require_isObject();
    var asyncTag = "[object AsyncFunction]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var proxyTag = "[object Proxy]";
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    module.exports = isFunction;
  }
});

// node_modules/lodash/_coreJsData.js
var require_coreJsData = __commonJS({
  "node_modules/lodash/_coreJsData.js"(exports, module) {
    var root = require_root();
    var coreJsData = root["__core-js_shared__"];
    module.exports = coreJsData;
  }
});

// node_modules/lodash/_isMasked.js
var require_isMasked = __commonJS({
  "node_modules/lodash/_isMasked.js"(exports, module) {
    var coreJsData = require_coreJsData();
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    module.exports = isMasked;
  }
});

// node_modules/lodash/_toSource.js
var require_toSource = __commonJS({
  "node_modules/lodash/_toSource.js"(exports, module) {
    var funcProto = Function.prototype;
    var funcToString = funcProto.toString;
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e11) {
        }
        try {
          return func + "";
        } catch (e11) {
        }
      }
      return "";
    }
    module.exports = toSource;
  }
});

// node_modules/lodash/_baseIsNative.js
var require_baseIsNative = __commonJS({
  "node_modules/lodash/_baseIsNative.js"(exports, module) {
    var isFunction = require_isFunction();
    var isMasked = require_isMasked();
    var isObject = require_isObject();
    var toSource = require_toSource();
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    module.exports = baseIsNative;
  }
});

// node_modules/lodash/_getValue.js
var require_getValue = __commonJS({
  "node_modules/lodash/_getValue.js"(exports, module) {
    function getValue(object, key) {
      return object == null ? void 0 : object[key];
    }
    module.exports = getValue;
  }
});

// node_modules/lodash/_getNative.js
var require_getNative = __commonJS({
  "node_modules/lodash/_getNative.js"(exports, module) {
    var baseIsNative = require_baseIsNative();
    var getValue = require_getValue();
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    module.exports = getNative;
  }
});

// node_modules/lodash/_Map.js
var require_Map = __commonJS({
  "node_modules/lodash/_Map.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Map2 = getNative(root, "Map");
    module.exports = Map2;
  }
});

// node_modules/lodash/_nativeCreate.js
var require_nativeCreate = __commonJS({
  "node_modules/lodash/_nativeCreate.js"(exports, module) {
    var getNative = require_getNative();
    var nativeCreate = getNative(Object, "create");
    module.exports = nativeCreate;
  }
});

// node_modules/lodash/_hashClear.js
var require_hashClear = __commonJS({
  "node_modules/lodash/_hashClear.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    module.exports = hashClear;
  }
});

// node_modules/lodash/_hashDelete.js
var require_hashDelete = __commonJS({
  "node_modules/lodash/_hashDelete.js"(exports, module) {
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = hashDelete;
  }
});

// node_modules/lodash/_hashGet.js
var require_hashGet = __commonJS({
  "node_modules/lodash/_hashGet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    module.exports = hashGet;
  }
});

// node_modules/lodash/_hashHas.js
var require_hashHas = __commonJS({
  "node_modules/lodash/_hashHas.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    module.exports = hashHas;
  }
});

// node_modules/lodash/_hashSet.js
var require_hashSet = __commonJS({
  "node_modules/lodash/_hashSet.js"(exports, module) {
    var nativeCreate = require_nativeCreate();
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    module.exports = hashSet;
  }
});

// node_modules/lodash/_Hash.js
var require_Hash = __commonJS({
  "node_modules/lodash/_Hash.js"(exports, module) {
    var hashClear = require_hashClear();
    var hashDelete = require_hashDelete();
    var hashGet = require_hashGet();
    var hashHas = require_hashHas();
    var hashSet = require_hashSet();
    function Hash(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    module.exports = Hash;
  }
});

// node_modules/lodash/_mapCacheClear.js
var require_mapCacheClear = __commonJS({
  "node_modules/lodash/_mapCacheClear.js"(exports, module) {
    var Hash = require_Hash();
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    module.exports = mapCacheClear;
  }
});

// node_modules/lodash/_isKeyable.js
var require_isKeyable = __commonJS({
  "node_modules/lodash/_isKeyable.js"(exports, module) {
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    module.exports = isKeyable;
  }
});

// node_modules/lodash/_getMapData.js
var require_getMapData = __commonJS({
  "node_modules/lodash/_getMapData.js"(exports, module) {
    var isKeyable = require_isKeyable();
    function getMapData(map4, key) {
      var data = map4.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    module.exports = getMapData;
  }
});

// node_modules/lodash/_mapCacheDelete.js
var require_mapCacheDelete = __commonJS({
  "node_modules/lodash/_mapCacheDelete.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    module.exports = mapCacheDelete;
  }
});

// node_modules/lodash/_mapCacheGet.js
var require_mapCacheGet = __commonJS({
  "node_modules/lodash/_mapCacheGet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    module.exports = mapCacheGet;
  }
});

// node_modules/lodash/_mapCacheHas.js
var require_mapCacheHas = __commonJS({
  "node_modules/lodash/_mapCacheHas.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    module.exports = mapCacheHas;
  }
});

// node_modules/lodash/_mapCacheSet.js
var require_mapCacheSet = __commonJS({
  "node_modules/lodash/_mapCacheSet.js"(exports, module) {
    var getMapData = require_getMapData();
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size = data.size;
      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }
    module.exports = mapCacheSet;
  }
});

// node_modules/lodash/_MapCache.js
var require_MapCache = __commonJS({
  "node_modules/lodash/_MapCache.js"(exports, module) {
    var mapCacheClear = require_mapCacheClear();
    var mapCacheDelete = require_mapCacheDelete();
    var mapCacheGet = require_mapCacheGet();
    var mapCacheHas = require_mapCacheHas();
    var mapCacheSet = require_mapCacheSet();
    function MapCache(entries) {
      var index2 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index2 < length) {
        var entry = entries[index2];
        this.set(entry[0], entry[1]);
      }
    }
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    module.exports = MapCache;
  }
});

// node_modules/lodash/_stackSet.js
var require_stackSet = __commonJS({
  "node_modules/lodash/_stackSet.js"(exports, module) {
    var ListCache = require_ListCache();
    var Map2 = require_Map();
    var MapCache = require_MapCache();
    var LARGE_ARRAY_SIZE = 200;
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs2 = data.__data__;
        if (!Map2 || pairs2.length < LARGE_ARRAY_SIZE - 1) {
          pairs2.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs2);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    module.exports = stackSet;
  }
});

// node_modules/lodash/_Stack.js
var require_Stack = __commonJS({
  "node_modules/lodash/_Stack.js"(exports, module) {
    var ListCache = require_ListCache();
    var stackClear = require_stackClear();
    var stackDelete = require_stackDelete();
    var stackGet = require_stackGet();
    var stackHas = require_stackHas();
    var stackSet = require_stackSet();
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    Stack.prototype.clear = stackClear;
    Stack.prototype["delete"] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;
    module.exports = Stack;
  }
});

// node_modules/lodash/_defineProperty.js
var require_defineProperty = __commonJS({
  "node_modules/lodash/_defineProperty.js"(exports, module) {
    var getNative = require_getNative();
    var defineProperty = function() {
      try {
        var func = getNative(Object, "defineProperty");
        func({}, "", {});
        return func;
      } catch (e11) {
      }
    }();
    module.exports = defineProperty;
  }
});

// node_modules/lodash/_baseAssignValue.js
var require_baseAssignValue = __commonJS({
  "node_modules/lodash/_baseAssignValue.js"(exports, module) {
    var defineProperty = require_defineProperty();
    function baseAssignValue(object, key, value) {
      if (key == "__proto__" && defineProperty) {
        defineProperty(object, key, {
          "configurable": true,
          "enumerable": true,
          "value": value,
          "writable": true
        });
      } else {
        object[key] = value;
      }
    }
    module.exports = baseAssignValue;
  }
});

// node_modules/lodash/_assignMergeValue.js
var require_assignMergeValue = __commonJS({
  "node_modules/lodash/_assignMergeValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    function assignMergeValue(object, key, value) {
      if (value !== void 0 && !eq(object[key], value) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignMergeValue;
  }
});

// node_modules/lodash/_createBaseFor.js
var require_createBaseFor = __commonJS({
  "node_modules/lodash/_createBaseFor.js"(exports, module) {
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index2 = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
        while (length--) {
          var key = props[fromRight ? length : ++index2];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }
    module.exports = createBaseFor;
  }
});

// node_modules/lodash/_baseFor.js
var require_baseFor = __commonJS({
  "node_modules/lodash/_baseFor.js"(exports, module) {
    var createBaseFor = require_createBaseFor();
    var baseFor = createBaseFor();
    module.exports = baseFor;
  }
});

// node_modules/lodash/_cloneBuffer.js
var require_cloneBuffer = __commonJS({
  "node_modules/lodash/_cloneBuffer.js"(exports, module) {
    var root = require_root();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var allocUnsafe = Buffer ? Buffer.allocUnsafe : void 0;
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
      buffer.copy(result);
      return result;
    }
    module.exports = cloneBuffer;
  }
});

// node_modules/lodash/_Uint8Array.js
var require_Uint8Array = __commonJS({
  "node_modules/lodash/_Uint8Array.js"(exports, module) {
    var root = require_root();
    var Uint8Array = root.Uint8Array;
    module.exports = Uint8Array;
  }
});

// node_modules/lodash/_cloneArrayBuffer.js
var require_cloneArrayBuffer = __commonJS({
  "node_modules/lodash/_cloneArrayBuffer.js"(exports, module) {
    var Uint8Array = require_Uint8Array();
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }
    module.exports = cloneArrayBuffer;
  }
});

// node_modules/lodash/_cloneTypedArray.js
var require_cloneTypedArray = __commonJS({
  "node_modules/lodash/_cloneTypedArray.js"(exports, module) {
    var cloneArrayBuffer = require_cloneArrayBuffer();
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }
    module.exports = cloneTypedArray;
  }
});

// node_modules/lodash/_copyArray.js
var require_copyArray = __commonJS({
  "node_modules/lodash/_copyArray.js"(exports, module) {
    function copyArray(source, array2) {
      var index2 = -1, length = source.length;
      array2 || (array2 = Array(length));
      while (++index2 < length) {
        array2[index2] = source[index2];
      }
      return array2;
    }
    module.exports = copyArray;
  }
});

// node_modules/lodash/_baseCreate.js
var require_baseCreate = __commonJS({
  "node_modules/lodash/_baseCreate.js"(exports, module) {
    var isObject = require_isObject();
    var objectCreate = Object.create;
    var baseCreate = /* @__PURE__ */ function() {
      function object() {
      }
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object();
        object.prototype = void 0;
        return result;
      };
    }();
    module.exports = baseCreate;
  }
});

// node_modules/lodash/_overArg.js
var require_overArg = __commonJS({
  "node_modules/lodash/_overArg.js"(exports, module) {
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    module.exports = overArg;
  }
});

// node_modules/lodash/_getPrototype.js
var require_getPrototype = __commonJS({
  "node_modules/lodash/_getPrototype.js"(exports, module) {
    var overArg = require_overArg();
    var getPrototype = overArg(Object.getPrototypeOf, Object);
    module.exports = getPrototype;
  }
});

// node_modules/lodash/_isPrototype.js
var require_isPrototype = __commonJS({
  "node_modules/lodash/_isPrototype.js"(exports, module) {
    var objectProto = Object.prototype;
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    module.exports = isPrototype;
  }
});

// node_modules/lodash/_initCloneObject.js
var require_initCloneObject = __commonJS({
  "node_modules/lodash/_initCloneObject.js"(exports, module) {
    var baseCreate = require_baseCreate();
    var getPrototype = require_getPrototype();
    var isPrototype = require_isPrototype();
    function initCloneObject(object) {
      return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
    }
    module.exports = initCloneObject;
  }
});

// node_modules/lodash/isObjectLike.js
var require_isObjectLike = __commonJS({
  "node_modules/lodash/isObjectLike.js"(exports, module) {
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    module.exports = isObjectLike;
  }
});

// node_modules/lodash/_baseIsArguments.js
var require_baseIsArguments = __commonJS({
  "node_modules/lodash/_baseIsArguments.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    module.exports = baseIsArguments;
  }
});

// node_modules/lodash/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/lodash/isArguments.js"(exports, module) {
    var baseIsArguments = require_baseIsArguments();
    var isObjectLike = require_isObjectLike();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var isArguments = baseIsArguments(/* @__PURE__ */ function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    module.exports = isArguments;
  }
});

// node_modules/lodash/isArray.js
var require_isArray = __commonJS({
  "node_modules/lodash/isArray.js"(exports, module) {
    var isArray = Array.isArray;
    module.exports = isArray;
  }
});

// node_modules/lodash/isLength.js
var require_isLength = __commonJS({
  "node_modules/lodash/isLength.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    module.exports = isLength;
  }
});

// node_modules/lodash/isArrayLike.js
var require_isArrayLike = __commonJS({
  "node_modules/lodash/isArrayLike.js"(exports, module) {
    var isFunction = require_isFunction();
    var isLength = require_isLength();
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    module.exports = isArrayLike;
  }
});

// node_modules/lodash/isArrayLikeObject.js
var require_isArrayLikeObject = __commonJS({
  "node_modules/lodash/isArrayLikeObject.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    var isObjectLike = require_isObjectLike();
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }
    module.exports = isArrayLikeObject;
  }
});

// node_modules/lodash/stubFalse.js
var require_stubFalse = __commonJS({
  "node_modules/lodash/stubFalse.js"(exports, module) {
    function stubFalse() {
      return false;
    }
    module.exports = stubFalse;
  }
});

// node_modules/lodash/isBuffer.js
var require_isBuffer = __commonJS({
  "node_modules/lodash/isBuffer.js"(exports, module) {
    var root = require_root();
    var stubFalse = require_stubFalse();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var Buffer = moduleExports ? root.Buffer : void 0;
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : void 0;
    var isBuffer = nativeIsBuffer || stubFalse;
    module.exports = isBuffer;
  }
});

// node_modules/lodash/isPlainObject.js
var require_isPlainObject = __commonJS({
  "node_modules/lodash/isPlainObject.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var getPrototype = require_getPrototype();
    var isObjectLike = require_isObjectLike();
    var objectTag = "[object Object]";
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var objectCtorString = funcToString.call(Object);
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
      return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
    }
    module.exports = isPlainObject;
  }
});

// node_modules/lodash/_baseIsTypedArray.js
var require_baseIsTypedArray = __commonJS({
  "node_modules/lodash/_baseIsTypedArray.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isLength = require_isLength();
    var isObjectLike = require_isObjectLike();
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var objectTag = "[object Object]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    module.exports = baseIsTypedArray;
  }
});

// node_modules/lodash/_baseUnary.js
var require_baseUnary = __commonJS({
  "node_modules/lodash/_baseUnary.js"(exports, module) {
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    module.exports = baseUnary;
  }
});

// node_modules/lodash/_nodeUtil.js
var require_nodeUtil = __commonJS({
  "node_modules/lodash/_nodeUtil.js"(exports, module) {
    var freeGlobal = require_freeGlobal();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        var types = freeModule && freeModule.require && freeModule.require("util").types;
        if (types) {
          return types;
        }
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e11) {
      }
    }();
    module.exports = nodeUtil;
  }
});

// node_modules/lodash/isTypedArray.js
var require_isTypedArray = __commonJS({
  "node_modules/lodash/isTypedArray.js"(exports, module) {
    var baseIsTypedArray = require_baseIsTypedArray();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    module.exports = isTypedArray;
  }
});

// node_modules/lodash/_safeGet.js
var require_safeGet = __commonJS({
  "node_modules/lodash/_safeGet.js"(exports, module) {
    function safeGet(object, key) {
      if (key === "constructor" && typeof object[key] === "function") {
        return;
      }
      if (key == "__proto__") {
        return;
      }
      return object[key];
    }
    module.exports = safeGet;
  }
});

// node_modules/lodash/_assignValue.js
var require_assignValue = __commonJS({
  "node_modules/lodash/_assignValue.js"(exports, module) {
    var baseAssignValue = require_baseAssignValue();
    var eq = require_eq();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === void 0 && !(key in object)) {
        baseAssignValue(object, key, value);
      }
    }
    module.exports = assignValue;
  }
});

// node_modules/lodash/_copyObject.js
var require_copyObject = __commonJS({
  "node_modules/lodash/_copyObject.js"(exports, module) {
    var assignValue = require_assignValue();
    var baseAssignValue = require_baseAssignValue();
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});
      var index2 = -1, length = props.length;
      while (++index2 < length) {
        var key = props[index2];
        var newValue = customizer ? customizer(object[key], source[key], key, object, source) : void 0;
        if (newValue === void 0) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }
    module.exports = copyObject;
  }
});

// node_modules/lodash/_baseTimes.js
var require_baseTimes = __commonJS({
  "node_modules/lodash/_baseTimes.js"(exports, module) {
    function baseTimes(n7, iteratee) {
      var index2 = -1, result = Array(n7);
      while (++index2 < n7) {
        result[index2] = iteratee(index2);
      }
      return result;
    }
    module.exports = baseTimes;
  }
});

// node_modules/lodash/_isIndex.js
var require_isIndex = __commonJS({
  "node_modules/lodash/_isIndex.js"(exports, module) {
    var MAX_SAFE_INTEGER = 9007199254740991;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    module.exports = isIndex;
  }
});

// node_modules/lodash/_arrayLikeKeys.js
var require_arrayLikeKeys = __commonJS({
  "node_modules/lodash/_arrayLikeKeys.js"(exports, module) {
    var baseTimes = require_baseTimes();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isIndex = require_isIndex();
    var isTypedArray = require_isTypedArray();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = arrayLikeKeys;
  }
});

// node_modules/lodash/_nativeKeysIn.js
var require_nativeKeysIn = __commonJS({
  "node_modules/lodash/_nativeKeysIn.js"(exports, module) {
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = nativeKeysIn;
  }
});

// node_modules/lodash/_baseKeysIn.js
var require_baseKeysIn = __commonJS({
  "node_modules/lodash/_baseKeysIn.js"(exports, module) {
    var isObject = require_isObject();
    var isPrototype = require_isPrototype();
    var nativeKeysIn = require_nativeKeysIn();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object), result = [];
      for (var key in object) {
        if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeysIn;
  }
});

// node_modules/lodash/keysIn.js
var require_keysIn = __commonJS({
  "node_modules/lodash/keysIn.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeysIn = require_baseKeysIn();
    var isArrayLike = require_isArrayLike();
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }
    module.exports = keysIn;
  }
});

// node_modules/lodash/toPlainObject.js
var require_toPlainObject = __commonJS({
  "node_modules/lodash/toPlainObject.js"(exports, module) {
    var copyObject = require_copyObject();
    var keysIn = require_keysIn();
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }
    module.exports = toPlainObject;
  }
});

// node_modules/lodash/_baseMergeDeep.js
var require_baseMergeDeep = __commonJS({
  "node_modules/lodash/_baseMergeDeep.js"(exports, module) {
    var assignMergeValue = require_assignMergeValue();
    var cloneBuffer = require_cloneBuffer();
    var cloneTypedArray = require_cloneTypedArray();
    var copyArray = require_copyArray();
    var initCloneObject = require_initCloneObject();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isArrayLikeObject = require_isArrayLikeObject();
    var isBuffer = require_isBuffer();
    var isFunction = require_isFunction();
    var isObject = require_isObject();
    var isPlainObject = require_isPlainObject();
    var isTypedArray = require_isTypedArray();
    var safeGet = require_safeGet();
    var toPlainObject = require_toPlainObject();
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : void 0;
      var isCommon = newValue === void 0;
      if (isCommon) {
        var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          } else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          } else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          } else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          } else {
            newValue = [];
          }
        } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          } else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        } else {
          isCommon = false;
        }
      }
      if (isCommon) {
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack["delete"](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }
    module.exports = baseMergeDeep;
  }
});

// node_modules/lodash/_baseMerge.js
var require_baseMerge = __commonJS({
  "node_modules/lodash/_baseMerge.js"(exports, module) {
    var Stack = require_Stack();
    var assignMergeValue = require_assignMergeValue();
    var baseFor = require_baseFor();
    var baseMergeDeep = require_baseMergeDeep();
    var isObject = require_isObject();
    var keysIn = require_keysIn();
    var safeGet = require_safeGet();
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack());
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        } else {
          var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : void 0;
          if (newValue === void 0) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }
    module.exports = baseMerge;
  }
});

// node_modules/lodash/identity.js
var require_identity = __commonJS({
  "node_modules/lodash/identity.js"(exports, module) {
    function identity5(value) {
      return value;
    }
    module.exports = identity5;
  }
});

// node_modules/lodash/_apply.js
var require_apply = __commonJS({
  "node_modules/lodash/_apply.js"(exports, module) {
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0:
          return func.call(thisArg);
        case 1:
          return func.call(thisArg, args[0]);
        case 2:
          return func.call(thisArg, args[0], args[1]);
        case 3:
          return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }
    module.exports = apply;
  }
});

// node_modules/lodash/_overRest.js
var require_overRest = __commonJS({
  "node_modules/lodash/_overRest.js"(exports, module) {
    var apply = require_apply();
    var nativeMax = Math.max;
    function overRest(func, start2, transform) {
      start2 = nativeMax(start2 === void 0 ? func.length - 1 : start2, 0);
      return function() {
        var args = arguments, index2 = -1, length = nativeMax(args.length - start2, 0), array2 = Array(length);
        while (++index2 < length) {
          array2[index2] = args[start2 + index2];
        }
        index2 = -1;
        var otherArgs = Array(start2 + 1);
        while (++index2 < start2) {
          otherArgs[index2] = args[index2];
        }
        otherArgs[start2] = transform(array2);
        return apply(func, this, otherArgs);
      };
    }
    module.exports = overRest;
  }
});

// node_modules/lodash/constant.js
var require_constant = __commonJS({
  "node_modules/lodash/constant.js"(exports, module) {
    function constant2(value) {
      return function() {
        return value;
      };
    }
    module.exports = constant2;
  }
});

// node_modules/lodash/_baseSetToString.js
var require_baseSetToString = __commonJS({
  "node_modules/lodash/_baseSetToString.js"(exports, module) {
    var constant2 = require_constant();
    var defineProperty = require_defineProperty();
    var identity5 = require_identity();
    var baseSetToString = !defineProperty ? identity5 : function(func, string) {
      return defineProperty(func, "toString", {
        "configurable": true,
        "enumerable": false,
        "value": constant2(string),
        "writable": true
      });
    };
    module.exports = baseSetToString;
  }
});

// node_modules/lodash/_shortOut.js
var require_shortOut = __commonJS({
  "node_modules/lodash/_shortOut.js"(exports, module) {
    var HOT_COUNT = 800;
    var HOT_SPAN = 16;
    var nativeNow = Date.now;
    function shortOut(func) {
      var count2 = 0, lastCalled = 0;
      return function() {
        var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
        lastCalled = stamp;
        if (remaining > 0) {
          if (++count2 >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count2 = 0;
        }
        return func.apply(void 0, arguments);
      };
    }
    module.exports = shortOut;
  }
});

// node_modules/lodash/_setToString.js
var require_setToString = __commonJS({
  "node_modules/lodash/_setToString.js"(exports, module) {
    var baseSetToString = require_baseSetToString();
    var shortOut = require_shortOut();
    var setToString = shortOut(baseSetToString);
    module.exports = setToString;
  }
});

// node_modules/lodash/_baseRest.js
var require_baseRest = __commonJS({
  "node_modules/lodash/_baseRest.js"(exports, module) {
    var identity5 = require_identity();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function baseRest(func, start2) {
      return setToString(overRest(func, start2, identity5), func + "");
    }
    module.exports = baseRest;
  }
});

// node_modules/lodash/_isIterateeCall.js
var require_isIterateeCall = __commonJS({
  "node_modules/lodash/_isIterateeCall.js"(exports, module) {
    var eq = require_eq();
    var isArrayLike = require_isArrayLike();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    function isIterateeCall(value, index2, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index2;
      if (type == "number" ? isArrayLike(object) && isIndex(index2, object.length) : type == "string" && index2 in object) {
        return eq(object[index2], value);
      }
      return false;
    }
    module.exports = isIterateeCall;
  }
});

// node_modules/lodash/_createAssigner.js
var require_createAssigner = __commonJS({
  "node_modules/lodash/_createAssigner.js"(exports, module) {
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index2 = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : void 0, guard = length > 2 ? sources[2] : void 0;
        customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : void 0;
        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? void 0 : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index2 < length) {
          var source = sources[index2];
          if (source) {
            assigner(object, source, index2, customizer);
          }
        }
        return object;
      });
    }
    module.exports = createAssigner;
  }
});

// node_modules/lodash/merge.js
var require_merge = __commonJS({
  "node_modules/lodash/merge.js"(exports, module) {
    var baseMerge = require_baseMerge();
    var createAssigner = require_createAssigner();
    var merge2 = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });
    module.exports = merge2;
  }
});

// node_modules/lodash/isSymbol.js
var require_isSymbol = __commonJS({
  "node_modules/lodash/isSymbol.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var symbolTag = "[object Symbol]";
    function isSymbol(value) {
      return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
    }
    module.exports = isSymbol;
  }
});

// node_modules/lodash/_isKey.js
var require_isKey = __commonJS({
  "node_modules/lodash/_isKey.js"(exports, module) {
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    var reIsPlainProp = /^\w*$/;
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
    }
    module.exports = isKey;
  }
});

// node_modules/lodash/memoize.js
var require_memoize = __commonJS({
  "node_modules/lodash/memoize.js"(exports, module) {
    var MapCache = require_MapCache();
    var FUNC_ERROR_TEXT = "Expected a function";
    function memoize(func, resolver) {
      if (typeof func != "function" || resolver != null && typeof resolver != "function") {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache)();
      return memoized;
    }
    memoize.Cache = MapCache;
    module.exports = memoize;
  }
});

// node_modules/lodash/_memoizeCapped.js
var require_memoizeCapped = __commonJS({
  "node_modules/lodash/_memoizeCapped.js"(exports, module) {
    var memoize = require_memoize();
    var MAX_MEMOIZE_SIZE = 500;
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });
      var cache = result.cache;
      return result;
    }
    module.exports = memoizeCapped;
  }
});

// node_modules/lodash/_stringToPath.js
var require_stringToPath = __commonJS({
  "node_modules/lodash/_stringToPath.js"(exports, module) {
    var memoizeCapped = require_memoizeCapped();
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46) {
        result.push("");
      }
      string.replace(rePropName, function(match, number4, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, "$1") : number4 || match);
      });
      return result;
    });
    module.exports = stringToPath;
  }
});

// node_modules/lodash/_arrayMap.js
var require_arrayMap = __commonJS({
  "node_modules/lodash/_arrayMap.js"(exports, module) {
    function arrayMap(array2, iteratee) {
      var index2 = -1, length = array2 == null ? 0 : array2.length, result = Array(length);
      while (++index2 < length) {
        result[index2] = iteratee(array2[index2], index2, array2);
      }
      return result;
    }
    module.exports = arrayMap;
  }
});

// node_modules/lodash/_baseToString.js
var require_baseToString = __commonJS({
  "node_modules/lodash/_baseToString.js"(exports, module) {
    var Symbol3 = require_Symbol();
    var arrayMap = require_arrayMap();
    var isArray = require_isArray();
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    var symbolProto = Symbol3 ? Symbol3.prototype : void 0;
    var symbolToString = symbolProto ? symbolProto.toString : void 0;
    function baseToString(value) {
      if (typeof value == "string") {
        return value;
      }
      if (isArray(value)) {
        return arrayMap(value, baseToString) + "";
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : "";
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = baseToString;
  }
});

// node_modules/lodash/toString.js
var require_toString = __commonJS({
  "node_modules/lodash/toString.js"(exports, module) {
    var baseToString = require_baseToString();
    function toString(value) {
      return value == null ? "" : baseToString(value);
    }
    module.exports = toString;
  }
});

// node_modules/lodash/_castPath.js
var require_castPath = __commonJS({
  "node_modules/lodash/_castPath.js"(exports, module) {
    var isArray = require_isArray();
    var isKey = require_isKey();
    var stringToPath = require_stringToPath();
    var toString = require_toString();
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }
    module.exports = castPath;
  }
});

// node_modules/lodash/_toKey.js
var require_toKey = __commonJS({
  "node_modules/lodash/_toKey.js"(exports, module) {
    var isSymbol = require_isSymbol();
    var INFINITY = 1 / 0;
    function toKey(value) {
      if (typeof value == "string" || isSymbol(value)) {
        return value;
      }
      var result = value + "";
      return result == "0" && 1 / value == -INFINITY ? "-0" : result;
    }
    module.exports = toKey;
  }
});

// node_modules/lodash/_baseGet.js
var require_baseGet = __commonJS({
  "node_modules/lodash/_baseGet.js"(exports, module) {
    var castPath = require_castPath();
    var toKey = require_toKey();
    function baseGet(object, path2) {
      path2 = castPath(path2, object);
      var index2 = 0, length = path2.length;
      while (object != null && index2 < length) {
        object = object[toKey(path2[index2++])];
      }
      return index2 && index2 == length ? object : void 0;
    }
    module.exports = baseGet;
  }
});

// node_modules/lodash/get.js
var require_get = __commonJS({
  "node_modules/lodash/get.js"(exports, module) {
    var baseGet = require_baseGet();
    function get(object, path2, defaultValue) {
      var result = object == null ? void 0 : baseGet(object, path2);
      return result === void 0 ? defaultValue : result;
    }
    module.exports = get;
  }
});

// node_modules/lodash/_baseSet.js
var require_baseSet = __commonJS({
  "node_modules/lodash/_baseSet.js"(exports, module) {
    var assignValue = require_assignValue();
    var castPath = require_castPath();
    var isIndex = require_isIndex();
    var isObject = require_isObject();
    var toKey = require_toKey();
    function baseSet(object, path2, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path2 = castPath(path2, object);
      var index2 = -1, length = path2.length, lastIndex = length - 1, nested = object;
      while (nested != null && ++index2 < length) {
        var key = toKey(path2[index2]), newValue = value;
        if (key === "__proto__" || key === "constructor" || key === "prototype") {
          return object;
        }
        if (index2 != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : void 0;
          if (newValue === void 0) {
            newValue = isObject(objValue) ? objValue : isIndex(path2[index2 + 1]) ? [] : {};
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }
    module.exports = baseSet;
  }
});

// node_modules/lodash/set.js
var require_set = __commonJS({
  "node_modules/lodash/set.js"(exports, module) {
    var baseSet = require_baseSet();
    function set(object, path2, value) {
      return object == null ? object : baseSet(object, path2, value);
    }
    module.exports = set;
  }
});

// node_modules/lodash/isString.js
var require_isString = __commonJS({
  "node_modules/lodash/isString.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isArray = require_isArray();
    var isObjectLike = require_isObjectLike();
    var stringTag = "[object String]";
    function isString(value) {
      return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
    }
    module.exports = isString;
  }
});

// node_modules/lodash/last.js
var require_last = __commonJS({
  "node_modules/lodash/last.js"(exports, module) {
    function last(array2) {
      var length = array2 == null ? 0 : array2.length;
      return length ? array2[length - 1] : void 0;
    }
    module.exports = last;
  }
});

// node_modules/lodash/_setCacheAdd.js
var require_setCacheAdd = __commonJS({
  "node_modules/lodash/_setCacheAdd.js"(exports, module) {
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    module.exports = setCacheAdd;
  }
});

// node_modules/lodash/_setCacheHas.js
var require_setCacheHas = __commonJS({
  "node_modules/lodash/_setCacheHas.js"(exports, module) {
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    module.exports = setCacheHas;
  }
});

// node_modules/lodash/_SetCache.js
var require_SetCache = __commonJS({
  "node_modules/lodash/_SetCache.js"(exports, module) {
    var MapCache = require_MapCache();
    var setCacheAdd = require_setCacheAdd();
    var setCacheHas = require_setCacheHas();
    function SetCache(values) {
      var index2 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index2 < length) {
        this.add(values[index2]);
      }
    }
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    module.exports = SetCache;
  }
});

// node_modules/lodash/_baseFindIndex.js
var require_baseFindIndex = __commonJS({
  "node_modules/lodash/_baseFindIndex.js"(exports, module) {
    function baseFindIndex(array2, predicate, fromIndex, fromRight) {
      var length = array2.length, index2 = fromIndex + (fromRight ? 1 : -1);
      while (fromRight ? index2-- : ++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return index2;
        }
      }
      return -1;
    }
    module.exports = baseFindIndex;
  }
});

// node_modules/lodash/_baseIsNaN.js
var require_baseIsNaN = __commonJS({
  "node_modules/lodash/_baseIsNaN.js"(exports, module) {
    function baseIsNaN(value) {
      return value !== value;
    }
    module.exports = baseIsNaN;
  }
});

// node_modules/lodash/_strictIndexOf.js
var require_strictIndexOf = __commonJS({
  "node_modules/lodash/_strictIndexOf.js"(exports, module) {
    function strictIndexOf(array2, value, fromIndex) {
      var index2 = fromIndex - 1, length = array2.length;
      while (++index2 < length) {
        if (array2[index2] === value) {
          return index2;
        }
      }
      return -1;
    }
    module.exports = strictIndexOf;
  }
});

// node_modules/lodash/_baseIndexOf.js
var require_baseIndexOf = __commonJS({
  "node_modules/lodash/_baseIndexOf.js"(exports, module) {
    var baseFindIndex = require_baseFindIndex();
    var baseIsNaN = require_baseIsNaN();
    var strictIndexOf = require_strictIndexOf();
    function baseIndexOf(array2, value, fromIndex) {
      return value === value ? strictIndexOf(array2, value, fromIndex) : baseFindIndex(array2, baseIsNaN, fromIndex);
    }
    module.exports = baseIndexOf;
  }
});

// node_modules/lodash/_arrayIncludes.js
var require_arrayIncludes = __commonJS({
  "node_modules/lodash/_arrayIncludes.js"(exports, module) {
    var baseIndexOf = require_baseIndexOf();
    function arrayIncludes(array2, value) {
      var length = array2 == null ? 0 : array2.length;
      return !!length && baseIndexOf(array2, value, 0) > -1;
    }
    module.exports = arrayIncludes;
  }
});

// node_modules/lodash/_arrayIncludesWith.js
var require_arrayIncludesWith = __commonJS({
  "node_modules/lodash/_arrayIncludesWith.js"(exports, module) {
    function arrayIncludesWith(array2, value, comparator) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (comparator(value, array2[index2])) {
          return true;
        }
      }
      return false;
    }
    module.exports = arrayIncludesWith;
  }
});

// node_modules/lodash/_cacheHas.js
var require_cacheHas = __commonJS({
  "node_modules/lodash/_cacheHas.js"(exports, module) {
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    module.exports = cacheHas;
  }
});

// node_modules/lodash/_baseDifference.js
var require_baseDifference = __commonJS({
  "node_modules/lodash/_baseDifference.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var arrayMap = require_arrayMap();
    var baseUnary = require_baseUnary();
    var cacheHas = require_cacheHas();
    var LARGE_ARRAY_SIZE = 200;
    function baseDifference(array2, values, iteratee, comparator) {
      var index2 = -1, includes = arrayIncludes, isCommon = true, length = array2.length, result = [], valuesLength = values.length;
      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      } else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
        while (++index2 < length) {
          var value = array2[index2], computed = iteratee == null ? value : iteratee(value);
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          } else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseDifference;
  }
});

// node_modules/lodash/without.js
var require_without = __commonJS({
  "node_modules/lodash/without.js"(exports, module) {
    var baseDifference = require_baseDifference();
    var baseRest = require_baseRest();
    var isArrayLikeObject = require_isArrayLikeObject();
    var without = baseRest(function(array2, values) {
      return isArrayLikeObject(array2) ? baseDifference(array2, values) : [];
    });
    module.exports = without;
  }
});

// node_modules/lodash/_basePickBy.js
var require_basePickBy = __commonJS({
  "node_modules/lodash/_basePickBy.js"(exports, module) {
    var baseGet = require_baseGet();
    var baseSet = require_baseSet();
    var castPath = require_castPath();
    function basePickBy(object, paths, predicate) {
      var index2 = -1, length = paths.length, result = {};
      while (++index2 < length) {
        var path2 = paths[index2], value = baseGet(object, path2);
        if (predicate(value, path2)) {
          baseSet(result, castPath(path2, object), value);
        }
      }
      return result;
    }
    module.exports = basePickBy;
  }
});

// node_modules/lodash/_baseHasIn.js
var require_baseHasIn = __commonJS({
  "node_modules/lodash/_baseHasIn.js"(exports, module) {
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }
    module.exports = baseHasIn;
  }
});

// node_modules/lodash/_hasPath.js
var require_hasPath = __commonJS({
  "node_modules/lodash/_hasPath.js"(exports, module) {
    var castPath = require_castPath();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var isIndex = require_isIndex();
    var isLength = require_isLength();
    var toKey = require_toKey();
    function hasPath(object, path2, hasFunc) {
      path2 = castPath(path2, object);
      var index2 = -1, length = path2.length, result = false;
      while (++index2 < length) {
        var key = toKey(path2[index2]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index2 != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
    }
    module.exports = hasPath;
  }
});

// node_modules/lodash/hasIn.js
var require_hasIn = __commonJS({
  "node_modules/lodash/hasIn.js"(exports, module) {
    var baseHasIn = require_baseHasIn();
    var hasPath = require_hasPath();
    function hasIn(object, path2) {
      return object != null && hasPath(object, path2, baseHasIn);
    }
    module.exports = hasIn;
  }
});

// node_modules/lodash/_basePick.js
var require_basePick = __commonJS({
  "node_modules/lodash/_basePick.js"(exports, module) {
    var basePickBy = require_basePickBy();
    var hasIn = require_hasIn();
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path2) {
        return hasIn(object, path2);
      });
    }
    module.exports = basePick;
  }
});

// node_modules/lodash/_arrayPush.js
var require_arrayPush = __commonJS({
  "node_modules/lodash/_arrayPush.js"(exports, module) {
    function arrayPush(array2, values) {
      var index2 = -1, length = values.length, offset = array2.length;
      while (++index2 < length) {
        array2[offset + index2] = values[index2];
      }
      return array2;
    }
    module.exports = arrayPush;
  }
});

// node_modules/lodash/_isFlattenable.js
var require_isFlattenable = __commonJS({
  "node_modules/lodash/_isFlattenable.js"(exports, module) {
    var Symbol3 = require_Symbol();
    var isArguments = require_isArguments();
    var isArray = require_isArray();
    var spreadableSymbol = Symbol3 ? Symbol3.isConcatSpreadable : void 0;
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
    }
    module.exports = isFlattenable;
  }
});

// node_modules/lodash/_baseFlatten.js
var require_baseFlatten = __commonJS({
  "node_modules/lodash/_baseFlatten.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isFlattenable = require_isFlattenable();
    function baseFlatten(array2, depth, predicate, isStrict, result) {
      var index2 = -1, length = array2.length;
      predicate || (predicate = isFlattenable);
      result || (result = []);
      while (++index2 < length) {
        var value = array2[index2];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }
    module.exports = baseFlatten;
  }
});

// node_modules/lodash/flatten.js
var require_flatten = __commonJS({
  "node_modules/lodash/flatten.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    function flatten(array2) {
      var length = array2 == null ? 0 : array2.length;
      return length ? baseFlatten(array2, 1) : [];
    }
    module.exports = flatten;
  }
});

// node_modules/lodash/_flatRest.js
var require_flatRest = __commonJS({
  "node_modules/lodash/_flatRest.js"(exports, module) {
    var flatten = require_flatten();
    var overRest = require_overRest();
    var setToString = require_setToString();
    function flatRest(func) {
      return setToString(overRest(func, void 0, flatten), func + "");
    }
    module.exports = flatRest;
  }
});

// node_modules/lodash/pick.js
var require_pick = __commonJS({
  "node_modules/lodash/pick.js"(exports, module) {
    var basePick = require_basePick();
    var flatRest = require_flatRest();
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });
    module.exports = pick;
  }
});

// node_modules/lodash/_arraySome.js
var require_arraySome = __commonJS({
  "node_modules/lodash/_arraySome.js"(exports, module) {
    function arraySome(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length;
      while (++index2 < length) {
        if (predicate(array2[index2], index2, array2)) {
          return true;
        }
      }
      return false;
    }
    module.exports = arraySome;
  }
});

// node_modules/lodash/_equalArrays.js
var require_equalArrays = __commonJS({
  "node_modules/lodash/_equalArrays.js"(exports, module) {
    var SetCache = require_SetCache();
    var arraySome = require_arraySome();
    var cacheHas = require_cacheHas();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function equalArrays(array2, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array2.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var arrStacked = stack.get(array2);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array2;
      }
      var index2 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array2, other);
      stack.set(other, array2);
      while (++index2 < arrLength) {
        var arrValue = array2[index2], othValue = other[index2];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index2, other, array2, stack) : customizer(arrValue, othValue, index2, array2, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array2);
      stack["delete"](other);
      return result;
    }
    module.exports = equalArrays;
  }
});

// node_modules/lodash/_mapToArray.js
var require_mapToArray = __commonJS({
  "node_modules/lodash/_mapToArray.js"(exports, module) {
    function mapToArray(map4) {
      var index2 = -1, result = Array(map4.size);
      map4.forEach(function(value, key) {
        result[++index2] = [key, value];
      });
      return result;
    }
    module.exports = mapToArray;
  }
});

// node_modules/lodash/_setToArray.js
var require_setToArray = __commonJS({
  "node_modules/lodash/_setToArray.js"(exports, module) {
    function setToArray(set) {
      var index2 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index2] = value;
      });
      return result;
    }
    module.exports = setToArray;
  }
});

// node_modules/lodash/_equalByTag.js
var require_equalByTag = __commonJS({
  "node_modules/lodash/_equalByTag.js"(exports, module) {
    var Symbol3 = require_Symbol();
    var Uint8Array = require_Uint8Array();
    var eq = require_eq();
    var equalArrays = require_equalArrays();
    var mapToArray = require_mapToArray();
    var setToArray = require_setToArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var symbolProto = Symbol3 ? Symbol3.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    module.exports = equalByTag;
  }
});

// node_modules/lodash/_baseGetAllKeys.js
var require_baseGetAllKeys = __commonJS({
  "node_modules/lodash/_baseGetAllKeys.js"(exports, module) {
    var arrayPush = require_arrayPush();
    var isArray = require_isArray();
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    module.exports = baseGetAllKeys;
  }
});

// node_modules/lodash/_arrayFilter.js
var require_arrayFilter = __commonJS({
  "node_modules/lodash/_arrayFilter.js"(exports, module) {
    function arrayFilter(array2, predicate) {
      var index2 = -1, length = array2 == null ? 0 : array2.length, resIndex = 0, result = [];
      while (++index2 < length) {
        var value = array2[index2];
        if (predicate(value, index2, array2)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    module.exports = arrayFilter;
  }
});

// node_modules/lodash/stubArray.js
var require_stubArray = __commonJS({
  "node_modules/lodash/stubArray.js"(exports, module) {
    function stubArray() {
      return [];
    }
    module.exports = stubArray;
  }
});

// node_modules/lodash/_getSymbols.js
var require_getSymbols = __commonJS({
  "node_modules/lodash/_getSymbols.js"(exports, module) {
    var arrayFilter = require_arrayFilter();
    var stubArray = require_stubArray();
    var objectProto = Object.prototype;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    module.exports = getSymbols;
  }
});

// node_modules/lodash/_nativeKeys.js
var require_nativeKeys = __commonJS({
  "node_modules/lodash/_nativeKeys.js"(exports, module) {
    var overArg = require_overArg();
    var nativeKeys = overArg(Object.keys, Object);
    module.exports = nativeKeys;
  }
});

// node_modules/lodash/_baseKeys.js
var require_baseKeys = __commonJS({
  "node_modules/lodash/_baseKeys.js"(exports, module) {
    var isPrototype = require_isPrototype();
    var nativeKeys = require_nativeKeys();
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    module.exports = baseKeys;
  }
});

// node_modules/lodash/keys.js
var require_keys = __commonJS({
  "node_modules/lodash/keys.js"(exports, module) {
    var arrayLikeKeys = require_arrayLikeKeys();
    var baseKeys = require_baseKeys();
    var isArrayLike = require_isArrayLike();
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    module.exports = keys;
  }
});

// node_modules/lodash/_getAllKeys.js
var require_getAllKeys = __commonJS({
  "node_modules/lodash/_getAllKeys.js"(exports, module) {
    var baseGetAllKeys = require_baseGetAllKeys();
    var getSymbols = require_getSymbols();
    var keys = require_keys();
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    module.exports = getAllKeys;
  }
});

// node_modules/lodash/_equalObjects.js
var require_equalObjects = __commonJS({
  "node_modules/lodash/_equalObjects.js"(exports, module) {
    var getAllKeys = require_getAllKeys();
    var COMPARE_PARTIAL_FLAG = 1;
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index2 = objLength;
      while (index2--) {
        var key = objProps[index2];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index2 < objLength) {
        key = objProps[index2];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    module.exports = equalObjects;
  }
});

// node_modules/lodash/_DataView.js
var require_DataView = __commonJS({
  "node_modules/lodash/_DataView.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var DataView2 = getNative(root, "DataView");
    module.exports = DataView2;
  }
});

// node_modules/lodash/_Promise.js
var require_Promise = __commonJS({
  "node_modules/lodash/_Promise.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Promise2 = getNative(root, "Promise");
    module.exports = Promise2;
  }
});

// node_modules/lodash/_Set.js
var require_Set = __commonJS({
  "node_modules/lodash/_Set.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var Set2 = getNative(root, "Set");
    module.exports = Set2;
  }
});

// node_modules/lodash/_WeakMap.js
var require_WeakMap = __commonJS({
  "node_modules/lodash/_WeakMap.js"(exports, module) {
    var getNative = require_getNative();
    var root = require_root();
    var WeakMap = getNative(root, "WeakMap");
    module.exports = WeakMap;
  }
});

// node_modules/lodash/_getTag.js
var require_getTag = __commonJS({
  "node_modules/lodash/_getTag.js"(exports, module) {
    var DataView2 = require_DataView();
    var Map2 = require_Map();
    var Promise2 = require_Promise();
    var Set2 = require_Set();
    var WeakMap = require_WeakMap();
    var baseGetTag = require_baseGetTag();
    var toSource = require_toSource();
    var mapTag = "[object Map]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var setTag = "[object Set]";
    var weakMapTag = "[object WeakMap]";
    var dataViewTag = "[object DataView]";
    var dataViewCtorString = toSource(DataView2);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap);
    var getTag = baseGetTag;
    if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
      getTag = function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      };
    }
    module.exports = getTag;
  }
});

// node_modules/lodash/_baseIsEqualDeep.js
var require_baseIsEqualDeep = __commonJS({
  "node_modules/lodash/_baseIsEqualDeep.js"(exports, module) {
    var Stack = require_Stack();
    var equalArrays = require_equalArrays();
    var equalByTag = require_equalByTag();
    var equalObjects = require_equalObjects();
    var getTag = require_getTag();
    var isArray = require_isArray();
    var isBuffer = require_isBuffer();
    var isTypedArray = require_isTypedArray();
    var COMPARE_PARTIAL_FLAG = 1;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var objectTag = "[object Object]";
    var objectProto = Object.prototype;
    var hasOwnProperty = objectProto.hasOwnProperty;
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    module.exports = baseIsEqualDeep;
  }
});

// node_modules/lodash/_baseIsEqual.js
var require_baseIsEqual = __commonJS({
  "node_modules/lodash/_baseIsEqual.js"(exports, module) {
    var baseIsEqualDeep = require_baseIsEqualDeep();
    var isObjectLike = require_isObjectLike();
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    module.exports = baseIsEqual;
  }
});

// node_modules/lodash/isEqual.js
var require_isEqual = __commonJS({
  "node_modules/lodash/isEqual.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    function isEqual2(value, other) {
      return baseIsEqual(value, other);
    }
    module.exports = isEqual2;
  }
});

// node_modules/lodash/noop.js
var require_noop = __commonJS({
  "node_modules/lodash/noop.js"(exports, module) {
    function noop2() {
    }
    module.exports = noop2;
  }
});

// node_modules/lodash/_createSet.js
var require_createSet = __commonJS({
  "node_modules/lodash/_createSet.js"(exports, module) {
    var Set2 = require_Set();
    var noop2 = require_noop();
    var setToArray = require_setToArray();
    var INFINITY = 1 / 0;
    var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop2 : function(values) {
      return new Set2(values);
    };
    module.exports = createSet;
  }
});

// node_modules/lodash/_baseUniq.js
var require_baseUniq = __commonJS({
  "node_modules/lodash/_baseUniq.js"(exports, module) {
    var SetCache = require_SetCache();
    var arrayIncludes = require_arrayIncludes();
    var arrayIncludesWith = require_arrayIncludesWith();
    var cacheHas = require_cacheHas();
    var createSet = require_createSet();
    var setToArray = require_setToArray();
    var LARGE_ARRAY_SIZE = 200;
    function baseUniq(array2, iteratee, comparator) {
      var index2 = -1, includes = arrayIncludes, length = array2.length, isCommon = true, result = [], seen = result;
      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      } else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array2);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache();
      } else {
        seen = iteratee ? [] : result;
      }
      outer:
        while (++index2 < length) {
          var value = array2[index2], computed = iteratee ? iteratee(value) : value;
          value = comparator || value !== 0 ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          } else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
      return result;
    }
    module.exports = baseUniq;
  }
});

// node_modules/lodash/uniq.js
var require_uniq = __commonJS({
  "node_modules/lodash/uniq.js"(exports, module) {
    var baseUniq = require_baseUniq();
    function uniq(array2) {
      return array2 && array2.length ? baseUniq(array2) : [];
    }
    module.exports = uniq;
  }
});

// node_modules/lodash/_baseIsMatch.js
var require_baseIsMatch = __commonJS({
  "node_modules/lodash/_baseIsMatch.js"(exports, module) {
    var Stack = require_Stack();
    var baseIsEqual = require_baseIsEqual();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseIsMatch(object, source, matchData, customizer) {
      var index2 = matchData.length, length = index2, noCustomizer = !customizer;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index2--) {
        var data = matchData[index2];
        if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
          return false;
        }
      }
      while (++index2 < length) {
        data = matchData[index2];
        var key = data[0], objValue = object[key], srcValue = data[1];
        if (noCustomizer && data[2]) {
          if (objValue === void 0 && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack();
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === void 0 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
            return false;
          }
        }
      }
      return true;
    }
    module.exports = baseIsMatch;
  }
});

// node_modules/lodash/_isStrictComparable.js
var require_isStrictComparable = __commonJS({
  "node_modules/lodash/_isStrictComparable.js"(exports, module) {
    var isObject = require_isObject();
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }
    module.exports = isStrictComparable;
  }
});

// node_modules/lodash/_getMatchData.js
var require_getMatchData = __commonJS({
  "node_modules/lodash/_getMatchData.js"(exports, module) {
    var isStrictComparable = require_isStrictComparable();
    var keys = require_keys();
    function getMatchData(object) {
      var result = keys(object), length = result.length;
      while (length--) {
        var key = result[length], value = object[key];
        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }
    module.exports = getMatchData;
  }
});

// node_modules/lodash/_matchesStrictComparable.js
var require_matchesStrictComparable = __commonJS({
  "node_modules/lodash/_matchesStrictComparable.js"(exports, module) {
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue && (srcValue !== void 0 || key in Object(object));
      };
    }
    module.exports = matchesStrictComparable;
  }
});

// node_modules/lodash/_baseMatches.js
var require_baseMatches = __commonJS({
  "node_modules/lodash/_baseMatches.js"(exports, module) {
    var baseIsMatch = require_baseIsMatch();
    var getMatchData = require_getMatchData();
    var matchesStrictComparable = require_matchesStrictComparable();
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }
    module.exports = baseMatches;
  }
});

// node_modules/lodash/_baseMatchesProperty.js
var require_baseMatchesProperty = __commonJS({
  "node_modules/lodash/_baseMatchesProperty.js"(exports, module) {
    var baseIsEqual = require_baseIsEqual();
    var get = require_get();
    var hasIn = require_hasIn();
    var isKey = require_isKey();
    var isStrictComparable = require_isStrictComparable();
    var matchesStrictComparable = require_matchesStrictComparable();
    var toKey = require_toKey();
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    function baseMatchesProperty(path2, srcValue) {
      if (isKey(path2) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path2), srcValue);
      }
      return function(object) {
        var objValue = get(object, path2);
        return objValue === void 0 && objValue === srcValue ? hasIn(object, path2) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }
    module.exports = baseMatchesProperty;
  }
});

// node_modules/lodash/_baseProperty.js
var require_baseProperty = __commonJS({
  "node_modules/lodash/_baseProperty.js"(exports, module) {
    function baseProperty(key) {
      return function(object) {
        return object == null ? void 0 : object[key];
      };
    }
    module.exports = baseProperty;
  }
});

// node_modules/lodash/_basePropertyDeep.js
var require_basePropertyDeep = __commonJS({
  "node_modules/lodash/_basePropertyDeep.js"(exports, module) {
    var baseGet = require_baseGet();
    function basePropertyDeep(path2) {
      return function(object) {
        return baseGet(object, path2);
      };
    }
    module.exports = basePropertyDeep;
  }
});

// node_modules/lodash/property.js
var require_property = __commonJS({
  "node_modules/lodash/property.js"(exports, module) {
    var baseProperty = require_baseProperty();
    var basePropertyDeep = require_basePropertyDeep();
    var isKey = require_isKey();
    var toKey = require_toKey();
    function property(path2) {
      return isKey(path2) ? baseProperty(toKey(path2)) : basePropertyDeep(path2);
    }
    module.exports = property;
  }
});

// node_modules/lodash/_baseIteratee.js
var require_baseIteratee = __commonJS({
  "node_modules/lodash/_baseIteratee.js"(exports, module) {
    var baseMatches = require_baseMatches();
    var baseMatchesProperty = require_baseMatchesProperty();
    var identity5 = require_identity();
    var isArray = require_isArray();
    var property = require_property();
    function baseIteratee(value) {
      if (typeof value == "function") {
        return value;
      }
      if (value == null) {
        return identity5;
      }
      if (typeof value == "object") {
        return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
      }
      return property(value);
    }
    module.exports = baseIteratee;
  }
});

// node_modules/lodash/uniqBy.js
var require_uniqBy = __commonJS({
  "node_modules/lodash/uniqBy.js"(exports, module) {
    var baseIteratee = require_baseIteratee();
    var baseUniq = require_baseUniq();
    function uniqBy(array2, iteratee) {
      return array2 && array2.length ? baseUniq(array2, baseIteratee(iteratee, 2)) : [];
    }
    module.exports = uniqBy;
  }
});

// node_modules/lodash/_baseForOwn.js
var require_baseForOwn = __commonJS({
  "node_modules/lodash/_baseForOwn.js"(exports, module) {
    var baseFor = require_baseFor();
    var keys = require_keys();
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }
    module.exports = baseForOwn;
  }
});

// node_modules/lodash/_createBaseEach.js
var require_createBaseEach = __commonJS({
  "node_modules/lodash/_createBaseEach.js"(exports, module) {
    var isArrayLike = require_isArrayLike();
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length, index2 = fromRight ? length : -1, iterable = Object(collection);
        while (fromRight ? index2-- : ++index2 < length) {
          if (iteratee(iterable[index2], index2, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }
    module.exports = createBaseEach;
  }
});

// node_modules/lodash/_baseEach.js
var require_baseEach = __commonJS({
  "node_modules/lodash/_baseEach.js"(exports, module) {
    var baseForOwn = require_baseForOwn();
    var createBaseEach = require_createBaseEach();
    var baseEach = createBaseEach(baseForOwn);
    module.exports = baseEach;
  }
});

// node_modules/lodash/_baseMap.js
var require_baseMap = __commonJS({
  "node_modules/lodash/_baseMap.js"(exports, module) {
    var baseEach = require_baseEach();
    var isArrayLike = require_isArrayLike();
    function baseMap(collection, iteratee) {
      var index2 = -1, result = isArrayLike(collection) ? Array(collection.length) : [];
      baseEach(collection, function(value, key, collection2) {
        result[++index2] = iteratee(value, key, collection2);
      });
      return result;
    }
    module.exports = baseMap;
  }
});

// node_modules/lodash/_baseSortBy.js
var require_baseSortBy = __commonJS({
  "node_modules/lodash/_baseSortBy.js"(exports, module) {
    function baseSortBy(array2, comparer) {
      var length = array2.length;
      array2.sort(comparer);
      while (length--) {
        array2[length] = array2[length].value;
      }
      return array2;
    }
    module.exports = baseSortBy;
  }
});

// node_modules/lodash/_compareAscending.js
var require_compareAscending = __commonJS({
  "node_modules/lodash/_compareAscending.js"(exports, module) {
    var isSymbol = require_isSymbol();
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== void 0, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
        var othIsDefined = other !== void 0, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
        if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
          return 1;
        }
        if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }
    module.exports = compareAscending;
  }
});

// node_modules/lodash/_compareMultiple.js
var require_compareMultiple = __commonJS({
  "node_modules/lodash/_compareMultiple.js"(exports, module) {
    var compareAscending = require_compareAscending();
    function compareMultiple(object, other, orders) {
      var index2 = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
      while (++index2 < length) {
        var result = compareAscending(objCriteria[index2], othCriteria[index2]);
        if (result) {
          if (index2 >= ordersLength) {
            return result;
          }
          var order = orders[index2];
          return result * (order == "desc" ? -1 : 1);
        }
      }
      return object.index - other.index;
    }
    module.exports = compareMultiple;
  }
});

// node_modules/lodash/_baseOrderBy.js
var require_baseOrderBy = __commonJS({
  "node_modules/lodash/_baseOrderBy.js"(exports, module) {
    var arrayMap = require_arrayMap();
    var baseGet = require_baseGet();
    var baseIteratee = require_baseIteratee();
    var baseMap = require_baseMap();
    var baseSortBy = require_baseSortBy();
    var baseUnary = require_baseUnary();
    var compareMultiple = require_compareMultiple();
    var identity5 = require_identity();
    var isArray = require_isArray();
    function baseOrderBy(collection, iteratees, orders) {
      if (iteratees.length) {
        iteratees = arrayMap(iteratees, function(iteratee) {
          if (isArray(iteratee)) {
            return function(value) {
              return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
            };
          }
          return iteratee;
        });
      } else {
        iteratees = [identity5];
      }
      var index2 = -1;
      iteratees = arrayMap(iteratees, baseUnary(baseIteratee));
      var result = baseMap(collection, function(value, key, collection2) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { "criteria": criteria, "index": ++index2, "value": value };
      });
      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }
    module.exports = baseOrderBy;
  }
});

// node_modules/lodash/sortBy.js
var require_sortBy = __commonJS({
  "node_modules/lodash/sortBy.js"(exports, module) {
    var baseFlatten = require_baseFlatten();
    var baseOrderBy = require_baseOrderBy();
    var baseRest = require_baseRest();
    var isIterateeCall = require_isIterateeCall();
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });
    module.exports = sortBy;
  }
});

// node_modules/lodash/_baseIsDate.js
var require_baseIsDate = __commonJS({
  "node_modules/lodash/_baseIsDate.js"(exports, module) {
    var baseGetTag = require_baseGetTag();
    var isObjectLike = require_isObjectLike();
    var dateTag = "[object Date]";
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }
    module.exports = baseIsDate;
  }
});

// node_modules/lodash/isDate.js
var require_isDate = __commonJS({
  "node_modules/lodash/isDate.js"(exports, module) {
    var baseIsDate = require_baseIsDate();
    var baseUnary = require_baseUnary();
    var nodeUtil = require_nodeUtil();
    var nodeIsDate = nodeUtil && nodeUtil.isDate;
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
    module.exports = isDate;
  }
});

// node_modules/lodash/uniqueId.js
var require_uniqueId = __commonJS({
  "node_modules/lodash/uniqueId.js"(exports, module) {
    var toString = require_toString();
    var idCounter = 0;
    function uniqueId(prefix2) {
      var id = ++idCounter;
      return toString(prefix2) + id;
    }
    module.exports = uniqueId;
  }
});

// node_modules/@nivo/line/dist/nivo-line.es.js
var import_react10 = __toESM(require_react());

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_react5 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_react4 = __toESM(require_react());

// node_modules/@react-spring/rafz/dist/react-spring-rafz.esm.js
var updateQueue = makeQueue();
var raf = (fn3) => schedule(fn3, updateQueue);
var writeQueue = makeQueue();
raf.write = (fn3) => schedule(fn3, writeQueue);
var onStartQueue = makeQueue();
raf.onStart = (fn3) => schedule(fn3, onStartQueue);
var onFrameQueue = makeQueue();
raf.onFrame = (fn3) => schedule(fn3, onFrameQueue);
var onFinishQueue = makeQueue();
raf.onFinish = (fn3) => schedule(fn3, onFinishQueue);
var timeouts = [];
raf.setTimeout = (handler, ms) => {
  let time2 = raf.now() + ms;
  let cancel = () => {
    let i6 = timeouts.findIndex((t10) => t10.cancel == cancel);
    if (~i6) timeouts.splice(i6, 1);
    pendingCount -= ~i6 ? 1 : 0;
  };
  let timeout = {
    time: time2,
    handler,
    cancel
  };
  timeouts.splice(findTimeout(time2), 0, timeout);
  pendingCount += 1;
  start();
  return timeout;
};
var findTimeout = (time2) => ~(~timeouts.findIndex((t10) => t10.time > time2) || ~timeouts.length);
raf.cancel = (fn3) => {
  onStartQueue.delete(fn3);
  onFrameQueue.delete(fn3);
  updateQueue.delete(fn3);
  writeQueue.delete(fn3);
  onFinishQueue.delete(fn3);
};
raf.sync = (fn3) => {
  sync = true;
  raf.batchedUpdates(fn3);
  sync = false;
};
raf.throttle = (fn3) => {
  let lastArgs;
  function queuedFn() {
    try {
      fn3(...lastArgs);
    } finally {
      lastArgs = null;
    }
  }
  function throttled(...args) {
    lastArgs = args;
    raf.onStart(queuedFn);
  }
  throttled.handler = fn3;
  throttled.cancel = () => {
    onStartQueue.delete(queuedFn);
    lastArgs = null;
  };
  return throttled;
};
var nativeRaf = typeof window != "undefined" ? window.requestAnimationFrame : () => {
};
raf.use = (impl) => nativeRaf = impl;
raf.now = typeof performance != "undefined" ? () => performance.now() : Date.now;
raf.batchedUpdates = (fn3) => fn3();
raf.catch = console.error;
raf.frameLoop = "always";
raf.advance = () => {
  if (raf.frameLoop !== "demand") {
    console.warn("Cannot call the manual advancement of rafz whilst frameLoop is not set as demand");
  } else {
    update();
  }
};
var ts = -1;
var pendingCount = 0;
var sync = false;
function schedule(fn3, queue) {
  if (sync) {
    queue.delete(fn3);
    fn3(0);
  } else {
    queue.add(fn3);
    start();
  }
}
function start() {
  if (ts < 0) {
    ts = 0;
    if (raf.frameLoop !== "demand") {
      nativeRaf(loop);
    }
  }
}
function stop() {
  ts = -1;
}
function loop() {
  if (~ts) {
    nativeRaf(loop);
    raf.batchedUpdates(update);
  }
}
function update() {
  let prevTs = ts;
  ts = raf.now();
  let count2 = findTimeout(ts);
  if (count2) {
    eachSafely(timeouts.splice(0, count2), (t10) => t10.handler());
    pendingCount -= count2;
  }
  onStartQueue.flush();
  updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);
  onFrameQueue.flush();
  writeQueue.flush();
  onFinishQueue.flush();
  if (!pendingCount) {
    stop();
  }
}
function makeQueue() {
  let next = /* @__PURE__ */ new Set();
  let current = next;
  return {
    add(fn3) {
      pendingCount += current == next && !next.has(fn3) ? 1 : 0;
      next.add(fn3);
    },
    delete(fn3) {
      pendingCount -= current == next && next.has(fn3) ? 1 : 0;
      return next.delete(fn3);
    },
    flush(arg) {
      if (current.size) {
        next = /* @__PURE__ */ new Set();
        pendingCount -= current.size;
        eachSafely(current, (fn3) => fn3(arg) && next.add(fn3));
        pendingCount += next.size;
        current = next;
      }
    }
  };
}
function eachSafely(values, each2) {
  values.forEach((value) => {
    try {
      each2(value);
    } catch (e11) {
      raf.catch(e11);
    }
  });
}

// node_modules/@react-spring/shared/dist/react-spring-shared.esm.js
var React = __toESM(require_react());
var import_react = __toESM(require_react());
function noop() {
}
var defineHidden = (obj, key, value) => Object.defineProperty(obj, key, {
  value,
  writable: true,
  configurable: true
});
var is = {
  arr: Array.isArray,
  obj: (a5) => !!a5 && a5.constructor.name === "Object",
  fun: (a5) => typeof a5 === "function",
  str: (a5) => typeof a5 === "string",
  num: (a5) => typeof a5 === "number",
  und: (a5) => a5 === void 0
};
function isEqual(a5, b5) {
  if (is.arr(a5)) {
    if (!is.arr(b5) || a5.length !== b5.length) return false;
    for (let i6 = 0; i6 < a5.length; i6++) {
      if (a5[i6] !== b5[i6]) return false;
    }
    return true;
  }
  return a5 === b5;
}
var each = (obj, fn3) => obj.forEach(fn3);
function eachProp(obj, fn3, ctx2) {
  if (is.arr(obj)) {
    for (let i6 = 0; i6 < obj.length; i6++) {
      fn3.call(ctx2, obj[i6], `${i6}`);
    }
    return;
  }
  for (const key in obj) {
    if (obj.hasOwnProperty(key)) {
      fn3.call(ctx2, obj[key], key);
    }
  }
}
var toArray = (a5) => is.und(a5) ? [] : is.arr(a5) ? a5 : [a5];
function flush(queue, iterator) {
  if (queue.size) {
    const items = Array.from(queue);
    queue.clear();
    each(items, iterator);
  }
}
var flushCalls = (queue, ...args) => flush(queue, (fn3) => fn3(...args));
var isSSR = () => typeof window === "undefined" || !window.navigator || /ServerSideRendering|^Deno\//.test(window.navigator.userAgent);
var createStringInterpolator$1;
var to;
var colors$1 = null;
var skipAnimation = false;
var willAdvance = noop;
var assign = (globals2) => {
  if (globals2.to) to = globals2.to;
  if (globals2.now) raf.now = globals2.now;
  if (globals2.colors !== void 0) colors$1 = globals2.colors;
  if (globals2.skipAnimation != null) skipAnimation = globals2.skipAnimation;
  if (globals2.createStringInterpolator) createStringInterpolator$1 = globals2.createStringInterpolator;
  if (globals2.requestAnimationFrame) raf.use(globals2.requestAnimationFrame);
  if (globals2.batchedUpdates) raf.batchedUpdates = globals2.batchedUpdates;
  if (globals2.willAdvance) willAdvance = globals2.willAdvance;
  if (globals2.frameLoop) raf.frameLoop = globals2.frameLoop;
};
var globals = Object.freeze({
  __proto__: null,
  get createStringInterpolator() {
    return createStringInterpolator$1;
  },
  get to() {
    return to;
  },
  get colors() {
    return colors$1;
  },
  get skipAnimation() {
    return skipAnimation;
  },
  get willAdvance() {
    return willAdvance;
  },
  assign
});
var startQueue = /* @__PURE__ */ new Set();
var currentFrame = [];
var prevFrame = [];
var priority = 0;
var frameLoop = {
  get idle() {
    return !startQueue.size && !currentFrame.length;
  },
  start(animation) {
    if (priority > animation.priority) {
      startQueue.add(animation);
      raf.onStart(flushStartQueue);
    } else {
      startSafely(animation);
      raf(advance);
    }
  },
  advance,
  sort(animation) {
    if (priority) {
      raf.onFrame(() => frameLoop.sort(animation));
    } else {
      const prevIndex = currentFrame.indexOf(animation);
      if (~prevIndex) {
        currentFrame.splice(prevIndex, 1);
        startUnsafely(animation);
      }
    }
  },
  clear() {
    currentFrame = [];
    startQueue.clear();
  }
};
function flushStartQueue() {
  startQueue.forEach(startSafely);
  startQueue.clear();
  raf(advance);
}
function startSafely(animation) {
  if (!currentFrame.includes(animation)) startUnsafely(animation);
}
function startUnsafely(animation) {
  currentFrame.splice(findIndex(currentFrame, (other) => other.priority > animation.priority), 0, animation);
}
function advance(dt2) {
  const nextFrame = prevFrame;
  for (let i6 = 0; i6 < currentFrame.length; i6++) {
    const animation = currentFrame[i6];
    priority = animation.priority;
    if (!animation.idle) {
      willAdvance(animation);
      animation.advance(dt2);
      if (!animation.idle) {
        nextFrame.push(animation);
      }
    }
  }
  priority = 0;
  prevFrame = currentFrame;
  prevFrame.length = 0;
  currentFrame = nextFrame;
  return currentFrame.length > 0;
}
function findIndex(arr, test) {
  const index2 = arr.findIndex(test);
  return index2 < 0 ? arr.length : index2;
}
var colors = {
  transparent: 0,
  aliceblue: 4042850303,
  antiquewhite: 4209760255,
  aqua: 16777215,
  aquamarine: 2147472639,
  azure: 4043309055,
  beige: 4126530815,
  bisque: 4293182719,
  black: 255,
  blanchedalmond: 4293643775,
  blue: 65535,
  blueviolet: 2318131967,
  brown: 2771004159,
  burlywood: 3736635391,
  burntsienna: 3934150143,
  cadetblue: 1604231423,
  chartreuse: 2147418367,
  chocolate: 3530104575,
  coral: 4286533887,
  cornflowerblue: 1687547391,
  cornsilk: 4294499583,
  crimson: 3692313855,
  cyan: 16777215,
  darkblue: 35839,
  darkcyan: 9145343,
  darkgoldenrod: 3095792639,
  darkgray: 2846468607,
  darkgreen: 6553855,
  darkgrey: 2846468607,
  darkkhaki: 3182914559,
  darkmagenta: 2332068863,
  darkolivegreen: 1433087999,
  darkorange: 4287365375,
  darkorchid: 2570243327,
  darkred: 2332033279,
  darksalmon: 3918953215,
  darkseagreen: 2411499519,
  darkslateblue: 1211993087,
  darkslategray: 793726975,
  darkslategrey: 793726975,
  darkturquoise: 13554175,
  darkviolet: 2483082239,
  deeppink: 4279538687,
  deepskyblue: 12582911,
  dimgray: 1768516095,
  dimgrey: 1768516095,
  dodgerblue: 512819199,
  firebrick: 2988581631,
  floralwhite: 4294635775,
  forestgreen: 579543807,
  fuchsia: 4278255615,
  gainsboro: 3705462015,
  ghostwhite: 4177068031,
  gold: 4292280575,
  goldenrod: 3668254975,
  gray: 2155905279,
  green: 8388863,
  greenyellow: 2919182335,
  grey: 2155905279,
  honeydew: 4043305215,
  hotpink: 4285117695,
  indianred: 3445382399,
  indigo: 1258324735,
  ivory: 4294963455,
  khaki: 4041641215,
  lavender: 3873897215,
  lavenderblush: 4293981695,
  lawngreen: 2096890111,
  lemonchiffon: 4294626815,
  lightblue: 2916673279,
  lightcoral: 4034953471,
  lightcyan: 3774873599,
  lightgoldenrodyellow: 4210742015,
  lightgray: 3553874943,
  lightgreen: 2431553791,
  lightgrey: 3553874943,
  lightpink: 4290167295,
  lightsalmon: 4288707327,
  lightseagreen: 548580095,
  lightskyblue: 2278488831,
  lightslategray: 2005441023,
  lightslategrey: 2005441023,
  lightsteelblue: 2965692159,
  lightyellow: 4294959359,
  lime: 16711935,
  limegreen: 852308735,
  linen: 4210091775,
  magenta: 4278255615,
  maroon: 2147483903,
  mediumaquamarine: 1724754687,
  mediumblue: 52735,
  mediumorchid: 3126187007,
  mediumpurple: 2473647103,
  mediumseagreen: 1018393087,
  mediumslateblue: 2070474495,
  mediumspringgreen: 16423679,
  mediumturquoise: 1221709055,
  mediumvioletred: 3340076543,
  midnightblue: 421097727,
  mintcream: 4127193855,
  mistyrose: 4293190143,
  moccasin: 4293178879,
  navajowhite: 4292783615,
  navy: 33023,
  oldlace: 4260751103,
  olive: 2155872511,
  olivedrab: 1804477439,
  orange: 4289003775,
  orangered: 4282712319,
  orchid: 3664828159,
  palegoldenrod: 4008225535,
  palegreen: 2566625535,
  paleturquoise: 2951671551,
  palevioletred: 3681588223,
  papayawhip: 4293907967,
  peachpuff: 4292524543,
  peru: 3448061951,
  pink: 4290825215,
  plum: 3718307327,
  powderblue: 2967529215,
  purple: 2147516671,
  rebeccapurple: 1714657791,
  red: 4278190335,
  rosybrown: 3163525119,
  royalblue: 1097458175,
  saddlebrown: 2336560127,
  salmon: 4202722047,
  sandybrown: 4104413439,
  seagreen: 780883967,
  seashell: 4294307583,
  sienna: 2689740287,
  silver: 3233857791,
  skyblue: 2278484991,
  slateblue: 1784335871,
  slategray: 1887473919,
  slategrey: 1887473919,
  snow: 4294638335,
  springgreen: 16744447,
  steelblue: 1182971135,
  tan: 3535047935,
  teal: 8421631,
  thistle: 3636451583,
  tomato: 4284696575,
  turquoise: 1088475391,
  violet: 4001558271,
  wheat: 4125012991,
  white: 4294967295,
  whitesmoke: 4126537215,
  yellow: 4294902015,
  yellowgreen: 2597139199
};
var NUMBER = "[-+]?\\d*\\.?\\d+";
var PERCENTAGE = NUMBER + "%";
function call(...parts) {
  return "\\(\\s*(" + parts.join(")\\s*,\\s*(") + ")\\s*\\)";
}
var rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
var rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
var hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
var hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
var hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
var hex6 = /^#([0-9a-fA-F]{6})$/;
var hex8 = /^#([0-9a-fA-F]{8})$/;
function normalizeColor(color2) {
  let match;
  if (typeof color2 === "number") {
    return color2 >>> 0 === color2 && color2 >= 0 && color2 <= 4294967295 ? color2 : null;
  }
  if (match = hex6.exec(color2)) return parseInt(match[1] + "ff", 16) >>> 0;
  if (colors$1 && colors$1[color2] !== void 0) {
    return colors$1[color2];
  }
  if (match = rgb.exec(color2)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 255) >>> 0;
  }
  if (match = rgba.exec(color2)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }
  if (match = hex3.exec(color2)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + "ff", 16) >>> 0;
  }
  if (match = hex8.exec(color2)) return parseInt(match[1], 16) >>> 0;
  if (match = hex4.exec(color2)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }
  if (match = hsl.exec(color2)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 255) >>> 0;
  }
  if (match = hsla.exec(color2)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }
  return null;
}
function hue2rgb(p4, q2, t10) {
  if (t10 < 0) t10 += 1;
  if (t10 > 1) t10 -= 1;
  if (t10 < 1 / 6) return p4 + (q2 - p4) * 6 * t10;
  if (t10 < 1 / 2) return q2;
  if (t10 < 2 / 3) return p4 + (q2 - p4) * (2 / 3 - t10) * 6;
  return p4;
}
function hslToRgb(h2, s5, l5) {
  const q2 = l5 < 0.5 ? l5 * (1 + s5) : l5 + s5 - l5 * s5;
  const p4 = 2 * l5 - q2;
  const r7 = hue2rgb(p4, q2, h2 + 1 / 3);
  const g4 = hue2rgb(p4, q2, h2);
  const b5 = hue2rgb(p4, q2, h2 - 1 / 3);
  return Math.round(r7 * 255) << 24 | Math.round(g4 * 255) << 16 | Math.round(b5 * 255) << 8;
}
function parse255(str) {
  const int = parseInt(str, 10);
  if (int < 0) return 0;
  if (int > 255) return 255;
  return int;
}
function parse360(str) {
  const int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  const num = parseFloat(str);
  if (num < 0) return 0;
  if (num > 1) return 255;
  return Math.round(num * 255);
}
function parsePercentage(str) {
  const int = parseFloat(str);
  if (int < 0) return 0;
  if (int > 100) return 1;
  return int / 100;
}
function colorToRgba(input) {
  let int32Color = normalizeColor(input);
  if (int32Color === null) return input;
  int32Color = int32Color || 0;
  let r7 = (int32Color & 4278190080) >>> 24;
  let g4 = (int32Color & 16711680) >>> 16;
  let b5 = (int32Color & 65280) >>> 8;
  let a5 = (int32Color & 255) / 255;
  return `rgba(${r7}, ${g4}, ${b5}, ${a5})`;
}
var createInterpolator = (range2, output, extrapolate) => {
  if (is.fun(range2)) {
    return range2;
  }
  if (is.arr(range2)) {
    return createInterpolator({
      range: range2,
      output,
      extrapolate
    });
  }
  if (is.str(range2.output[0])) {
    return createStringInterpolator$1(range2);
  }
  const config2 = range2;
  const outputRange = config2.output;
  const inputRange = config2.range || [0, 1];
  const extrapolateLeft = config2.extrapolateLeft || config2.extrapolate || "extend";
  const extrapolateRight = config2.extrapolateRight || config2.extrapolate || "extend";
  const easing = config2.easing || ((t10) => t10);
  return (input) => {
    const range3 = findRange(input, inputRange);
    return interpolate(input, inputRange[range3], inputRange[range3 + 1], outputRange[range3], outputRange[range3 + 1], easing, extrapolateLeft, extrapolateRight, config2.map);
  };
};
function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map4) {
  let result = map4 ? map4(input) : input;
  if (result < inputMin) {
    if (extrapolateLeft === "identity") return result;
    else if (extrapolateLeft === "clamp") result = inputMin;
  }
  if (result > inputMax) {
    if (extrapolateRight === "identity") return result;
    else if (extrapolateRight === "clamp") result = inputMax;
  }
  if (outputMin === outputMax) return outputMin;
  if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;
  if (inputMin === -Infinity) result = -result;
  else if (inputMax === Infinity) result = result - inputMin;
  else result = (result - inputMin) / (inputMax - inputMin);
  result = easing(result);
  if (outputMin === -Infinity) result = -result;
  else if (outputMax === Infinity) result = result + outputMin;
  else result = result * (outputMax - outputMin) + outputMin;
  return result;
}
function findRange(input, inputRange) {
  for (var i6 = 1; i6 < inputRange.length - 1; ++i6) if (inputRange[i6] >= input) break;
  return i6 - 1;
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var $get = Symbol.for("FluidValue.get");
var $observers = Symbol.for("FluidValue.observers");
var hasFluidValue = (arg) => Boolean(arg && arg[$get]);
var getFluidValue = (arg) => arg && arg[$get] ? arg[$get]() : arg;
var getFluidObservers = (target) => target[$observers] || null;
function callFluidObserver(observer, event) {
  if (observer.eventObserved) {
    observer.eventObserved(event);
  } else {
    observer(event);
  }
}
function callFluidObservers(target, event) {
  let observers = target[$observers];
  if (observers) {
    observers.forEach((observer) => {
      callFluidObserver(observer, event);
    });
  }
}
var FluidValue = class {
  constructor(get) {
    this[$get] = void 0;
    this[$observers] = void 0;
    if (!get && !(get = this.get)) {
      throw Error("Unknown getter");
    }
    setFluidGetter(this, get);
  }
};
var setFluidGetter = (target, get) => setHidden(target, $get, get);
function addFluidObserver(target, observer) {
  if (target[$get]) {
    let observers = target[$observers];
    if (!observers) {
      setHidden(target, $observers, observers = /* @__PURE__ */ new Set());
    }
    if (!observers.has(observer)) {
      observers.add(observer);
      if (target.observerAdded) {
        target.observerAdded(observers.size, observer);
      }
    }
  }
  return observer;
}
function removeFluidObserver(target, observer) {
  let observers = target[$observers];
  if (observers && observers.has(observer)) {
    const count2 = observers.size - 1;
    if (count2) {
      observers.delete(observer);
    } else {
      target[$observers] = null;
    }
    if (target.observerRemoved) {
      target.observerRemoved(count2, observer);
    }
  }
}
var setHidden = (target, key, value) => Object.defineProperty(target, key, {
  value,
  writable: true,
  configurable: true
});
var numberRegex = /[+\-]?(?:0|[1-9]\d*)(?:\.\d*)?(?:[eE][+\-]?\d+)?/g;
var colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[\d\.]+%?\))/gi;
var unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, "i");
var rgbaRegex = /rgba\(([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+), ([0-9\.-]+)\)/gi;
var cssVariableRegex = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
var variableToRgba = (input) => {
  const [token, fallback] = parseCSSVariable(input);
  if (!token || isSSR()) {
    return input;
  }
  const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);
  if (value) {
    return value.trim();
  } else if (fallback && fallback.startsWith("--")) {
    const _value = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);
    if (_value) {
      return _value;
    } else {
      return input;
    }
  } else if (fallback && cssVariableRegex.test(fallback)) {
    return variableToRgba(fallback);
  } else if (fallback) {
    return fallback;
  }
  return input;
};
var parseCSSVariable = (current) => {
  const match = cssVariableRegex.exec(current);
  if (!match) return [,];
  const [, token, fallback] = match;
  return [token, fallback];
};
var namedColorRegex;
var rgbaRound = (_3, p1, p22, p32, p4) => `rgba(${Math.round(p1)}, ${Math.round(p22)}, ${Math.round(p32)}, ${p4})`;
var createStringInterpolator = (config2) => {
  if (!namedColorRegex) namedColorRegex = colors$1 ? new RegExp(`(${Object.keys(colors$1).join("|")})(?!\\w)`, "g") : /^\b$/;
  const output = config2.output.map((value) => {
    return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);
  });
  const keyframes = output.map((value) => value.match(numberRegex).map(Number));
  const outputRanges = keyframes[0].map((_3, i6) => keyframes.map((values) => {
    if (!(i6 in values)) {
      throw Error('The arity of each "output" value must be equal');
    }
    return values[i6];
  }));
  const interpolators = outputRanges.map((output2) => createInterpolator(_extends({}, config2, {
    output: output2
  })));
  return (input) => {
    var _output$find;
    const missingUnit = !unitRegex.test(output[0]) && ((_output$find = output.find((value) => unitRegex.test(value))) == null ? void 0 : _output$find.replace(numberRegex, ""));
    let i6 = 0;
    return output[0].replace(numberRegex, () => `${interpolators[i6++](input)}${missingUnit || ""}`).replace(rgbaRegex, rgbaRound);
  };
};
var prefix = "react-spring: ";
var once = (fn3) => {
  const func = fn3;
  let called = false;
  if (typeof func != "function") {
    throw new TypeError(`${prefix}once requires a function parameter`);
  }
  return (...args) => {
    if (!called) {
      func(...args);
      called = true;
    }
  };
};
var warnInterpolate = once(console.warn);
function deprecateInterpolate() {
  warnInterpolate(`${prefix}The "interpolate" function is deprecated in v9 (use "to" instead)`);
}
var warnDirectCall = once(console.warn);
function deprecateDirectCall() {
  warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use ".start" instead), this will be removed in later 0.X.0 versions`);
}
function isAnimatedString(value) {
  return is.str(value) && (value[0] == "#" || /\d/.test(value) || !isSSR() && cssVariableRegex.test(value) || value in (colors$1 || {}));
}
var useLayoutEffect2 = typeof window !== "undefined" && window.document && window.document.createElement ? React.useLayoutEffect : React.useEffect;
var useIsMounted = () => {
  const isMounted = (0, import_react.useRef)(false);
  useLayoutEffect2(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return isMounted;
};
function useForceUpdate() {
  const update3 = (0, import_react.useState)()[1];
  const isMounted = useIsMounted();
  return () => {
    if (isMounted.current) {
      update3(Math.random());
    }
  };
}
function useMemoOne(getResult, inputs) {
  const [initial] = (0, import_react.useState)(() => ({
    inputs,
    result: getResult()
  }));
  const committed = (0, import_react.useRef)();
  const prevCache = committed.current;
  let cache = prevCache;
  if (cache) {
    const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));
    if (!useCache) {
      cache = {
        inputs,
        result: getResult()
      };
    }
  } else {
    cache = initial;
  }
  (0, import_react.useEffect)(() => {
    committed.current = cache;
    if (prevCache == initial) {
      initial.inputs = initial.result = void 0;
    }
  }, [cache]);
  return cache.result;
}
function areInputsEqual(next, prev) {
  if (next.length !== prev.length) {
    return false;
  }
  for (let i6 = 0; i6 < next.length; i6++) {
    if (next[i6] !== prev[i6]) {
      return false;
    }
  }
  return true;
}
var useOnce = (effect) => (0, import_react.useEffect)(effect, emptyDeps);
var emptyDeps = [];
function usePrev(value) {
  const prevRef = (0, import_react.useRef)();
  (0, import_react.useEffect)(() => {
    prevRef.current = value;
  });
  return prevRef.current;
}

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
var React3 = __toESM(require_react());
var import_react3 = __toESM(require_react());

// node_modules/@react-spring/animated/dist/react-spring-animated.esm.js
var React2 = __toESM(require_react());
var import_react2 = __toESM(require_react());
var $node = Symbol.for("Animated:node");
var isAnimated = (value) => !!value && value[$node] === value;
var getAnimated = (owner) => owner && owner[$node];
var setAnimated = (owner, node) => defineHidden(owner, $node, node);
var getPayload = (owner) => owner && owner[$node] && owner[$node].getPayload();
var Animated = class {
  constructor() {
    this.payload = void 0;
    setAnimated(this, this);
  }
  getPayload() {
    return this.payload || [];
  }
};
var AnimatedValue = class _AnimatedValue extends Animated {
  constructor(_value) {
    super();
    this.done = true;
    this.elapsedTime = void 0;
    this.lastPosition = void 0;
    this.lastVelocity = void 0;
    this.v0 = void 0;
    this.durationProgress = 0;
    this._value = _value;
    if (is.num(this._value)) {
      this.lastPosition = this._value;
    }
  }
  static create(value) {
    return new _AnimatedValue(value);
  }
  getPayload() {
    return [this];
  }
  getValue() {
    return this._value;
  }
  setValue(value, step) {
    if (is.num(value)) {
      this.lastPosition = value;
      if (step) {
        value = Math.round(value / step) * step;
        if (this.done) {
          this.lastPosition = value;
        }
      }
    }
    if (this._value === value) {
      return false;
    }
    this._value = value;
    return true;
  }
  reset() {
    const {
      done
    } = this;
    this.done = false;
    if (is.num(this._value)) {
      this.elapsedTime = 0;
      this.durationProgress = 0;
      this.lastPosition = this._value;
      if (done) this.lastVelocity = null;
      this.v0 = null;
    }
  }
};
var AnimatedString = class _AnimatedString extends AnimatedValue {
  constructor(value) {
    super(0);
    this._string = null;
    this._toString = void 0;
    this._toString = createInterpolator({
      output: [value, value]
    });
  }
  static create(value) {
    return new _AnimatedString(value);
  }
  getValue() {
    let value = this._string;
    return value == null ? this._string = this._toString(this._value) : value;
  }
  setValue(value) {
    if (is.str(value)) {
      if (value == this._string) {
        return false;
      }
      this._string = value;
      this._value = 1;
    } else if (super.setValue(value)) {
      this._string = null;
    } else {
      return false;
    }
    return true;
  }
  reset(goal) {
    if (goal) {
      this._toString = createInterpolator({
        output: [this.getValue(), goal]
      });
    }
    this._value = 0;
    super.reset();
  }
};
var TreeContext = {
  dependencies: null
};
var AnimatedObject = class extends Animated {
  constructor(source) {
    super();
    this.source = source;
    this.setValue(source);
  }
  getValue(animated2) {
    const values = {};
    eachProp(this.source, (source, key) => {
      if (isAnimated(source)) {
        values[key] = source.getValue(animated2);
      } else if (hasFluidValue(source)) {
        values[key] = getFluidValue(source);
      } else if (!animated2) {
        values[key] = source;
      }
    });
    return values;
  }
  setValue(source) {
    this.source = source;
    this.payload = this._makePayload(source);
  }
  reset() {
    if (this.payload) {
      each(this.payload, (node) => node.reset());
    }
  }
  _makePayload(source) {
    if (source) {
      const payload = /* @__PURE__ */ new Set();
      eachProp(source, this._addToPayload, payload);
      return Array.from(payload);
    }
  }
  _addToPayload(source) {
    if (TreeContext.dependencies && hasFluidValue(source)) {
      TreeContext.dependencies.add(source);
    }
    const payload = getPayload(source);
    if (payload) {
      each(payload, (node) => this.add(node));
    }
  }
};
var AnimatedArray = class _AnimatedArray extends AnimatedObject {
  constructor(source) {
    super(source);
  }
  static create(source) {
    return new _AnimatedArray(source);
  }
  getValue() {
    return this.source.map((node) => node.getValue());
  }
  setValue(source) {
    const payload = this.getPayload();
    if (source.length == payload.length) {
      return payload.map((node, i6) => node.setValue(source[i6])).some(Boolean);
    }
    super.setValue(source.map(makeAnimated));
    return true;
  }
};
function makeAnimated(value) {
  const nodeType = isAnimatedString(value) ? AnimatedString : AnimatedValue;
  return nodeType.create(value);
}
function getAnimatedType(value) {
  const parentNode = getAnimated(value);
  return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;
}
function _extends2() {
  _extends2 = Object.assign || function(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
var withAnimated = (Component, host2) => {
  const hasInstance = !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;
  return (0, import_react2.forwardRef)((givenProps, givenRef) => {
    const instanceRef = (0, import_react2.useRef)(null);
    const ref = hasInstance && (0, import_react2.useCallback)((value) => {
      instanceRef.current = updateRef(givenRef, value);
    }, [givenRef]);
    const [props, deps] = getAnimatedState(givenProps, host2);
    const forceUpdate = useForceUpdate();
    const callback = () => {
      const instance = instanceRef.current;
      if (hasInstance && !instance) {
        return;
      }
      const didUpdate = instance ? host2.applyAnimatedValues(instance, props.getValue(true)) : false;
      if (didUpdate === false) {
        forceUpdate();
      }
    };
    const observer = new PropsObserver(callback, deps);
    const observerRef = (0, import_react2.useRef)();
    useLayoutEffect2(() => {
      observerRef.current = observer;
      each(deps, (dep) => addFluidObserver(dep, observer));
      return () => {
        if (observerRef.current) {
          each(observerRef.current.deps, (dep) => removeFluidObserver(dep, observerRef.current));
          raf.cancel(observerRef.current.update);
        }
      };
    });
    (0, import_react2.useEffect)(callback, []);
    useOnce(() => () => {
      const observer2 = observerRef.current;
      each(observer2.deps, (dep) => removeFluidObserver(dep, observer2));
    });
    const usedProps = host2.getComponentProps(props.getValue());
    return React2.createElement(Component, _extends2({}, usedProps, {
      ref
    }));
  });
};
var PropsObserver = class {
  constructor(update3, deps) {
    this.update = update3;
    this.deps = deps;
  }
  eventObserved(event) {
    if (event.type == "change") {
      raf.write(this.update);
    }
  }
};
function getAnimatedState(props, host2) {
  const dependencies = /* @__PURE__ */ new Set();
  TreeContext.dependencies = dependencies;
  if (props.style) props = _extends2({}, props, {
    style: host2.createAnimatedStyle(props.style)
  });
  props = new AnimatedObject(props);
  TreeContext.dependencies = null;
  return [props, dependencies];
}
function updateRef(ref, value) {
  if (ref) {
    if (is.fun(ref)) ref(value);
    else ref.current = value;
  }
  return value;
}
var cacheKey = Symbol.for("AnimatedComponent");
var createHost = (components, {
  applyAnimatedValues: _applyAnimatedValues = () => false,
  createAnimatedStyle: _createAnimatedStyle = (style) => new AnimatedObject(style),
  getComponentProps: _getComponentProps = (props) => props
} = {}) => {
  const hostConfig = {
    applyAnimatedValues: _applyAnimatedValues,
    createAnimatedStyle: _createAnimatedStyle,
    getComponentProps: _getComponentProps
  };
  const animated2 = (Component) => {
    const displayName = getDisplayName(Component) || "Anonymous";
    if (is.str(Component)) {
      Component = animated2[Component] || (animated2[Component] = withAnimated(Component, hostConfig));
    } else {
      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));
    }
    Component.displayName = `Animated(${displayName})`;
    return Component;
  };
  eachProp(components, (Component, key) => {
    if (is.arr(components)) {
      key = getDisplayName(Component);
    }
    animated2[key] = animated2(Component);
  });
  return {
    animated: animated2
  };
};
var getDisplayName = (arg) => is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;

// node_modules/@react-spring/core/dist/react-spring-core.esm.js
function _extends3() {
  _extends3 = Object.assign || function(target) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var source = arguments[i6];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function callProp(value, ...args) {
  return is.fun(value) ? value(...args) : value;
}
var matchProp = (value, key) => value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));
var resolveProp = (prop, key) => is.obj(prop) ? key && prop[key] : prop;
var getDefaultProp = (props, key) => props.default === true ? props[key] : props.default ? props.default[key] : void 0;
var noopTransform = (value) => value;
var getDefaultProps = (props, transform = noopTransform) => {
  let keys = DEFAULT_PROPS;
  if (props.default && props.default !== true) {
    props = props.default;
    keys = Object.keys(props);
  }
  const defaults2 = {};
  for (const key of keys) {
    const value = transform(props[key], key);
    if (!is.und(value)) {
      defaults2[key] = value;
    }
  }
  return defaults2;
};
var DEFAULT_PROPS = ["config", "onProps", "onStart", "onChange", "onPause", "onResume", "onRest"];
var RESERVED_PROPS = {
  config: 1,
  from: 1,
  to: 1,
  ref: 1,
  loop: 1,
  reset: 1,
  pause: 1,
  cancel: 1,
  reverse: 1,
  immediate: 1,
  default: 1,
  delay: 1,
  onProps: 1,
  onStart: 1,
  onChange: 1,
  onPause: 1,
  onResume: 1,
  onRest: 1,
  onResolve: 1,
  items: 1,
  trail: 1,
  sort: 1,
  expires: 1,
  initial: 1,
  enter: 1,
  update: 1,
  leave: 1,
  children: 1,
  onDestroyed: 1,
  keys: 1,
  callId: 1,
  parentId: 1
};
function getForwardProps(props) {
  const forward = {};
  let count2 = 0;
  eachProp(props, (value, prop) => {
    if (!RESERVED_PROPS[prop]) {
      forward[prop] = value;
      count2++;
    }
  });
  if (count2) {
    return forward;
  }
}
function inferTo(props) {
  const to3 = getForwardProps(props);
  if (to3) {
    const out = {
      to: to3
    };
    eachProp(props, (val, key) => key in to3 || (out[key] = val));
    return out;
  }
  return _extends3({}, props);
}
function computeGoal(value) {
  value = getFluidValue(value);
  return is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? globals.createStringInterpolator({
    range: [0, 1],
    output: [value, value]
  })(1) : value;
}
function hasProps(props) {
  for (const _3 in props) return true;
  return false;
}
function isAsyncTo(to3) {
  return is.fun(to3) || is.arr(to3) && is.obj(to3[0]);
}
function detachRefs(ctrl, ref) {
  var _ctrl$ref;
  (_ctrl$ref = ctrl.ref) == null ? void 0 : _ctrl$ref.delete(ctrl);
  ref == null ? void 0 : ref.delete(ctrl);
}
function replaceRef(ctrl, ref) {
  if (ref && ctrl.ref !== ref) {
    var _ctrl$ref2;
    (_ctrl$ref2 = ctrl.ref) == null ? void 0 : _ctrl$ref2.delete(ctrl);
    ref.add(ctrl);
    ctrl.ref = ref;
  }
}
var config = {
  default: {
    tension: 170,
    friction: 26
  },
  gentle: {
    tension: 120,
    friction: 14
  },
  wobbly: {
    tension: 180,
    friction: 12
  },
  stiff: {
    tension: 210,
    friction: 20
  },
  slow: {
    tension: 280,
    friction: 60
  },
  molasses: {
    tension: 280,
    friction: 120
  }
};
var c1 = 1.70158;
var c2 = c1 * 1.525;
var c3 = c1 + 1;
var c4 = 2 * Math.PI / 3;
var c5 = 2 * Math.PI / 4.5;
var bounceOut = (x4) => {
  const n1 = 7.5625;
  const d1 = 2.75;
  if (x4 < 1 / d1) {
    return n1 * x4 * x4;
  } else if (x4 < 2 / d1) {
    return n1 * (x4 -= 1.5 / d1) * x4 + 0.75;
  } else if (x4 < 2.5 / d1) {
    return n1 * (x4 -= 2.25 / d1) * x4 + 0.9375;
  } else {
    return n1 * (x4 -= 2.625 / d1) * x4 + 0.984375;
  }
};
var easings = {
  linear: (x4) => x4,
  easeInQuad: (x4) => x4 * x4,
  easeOutQuad: (x4) => 1 - (1 - x4) * (1 - x4),
  easeInOutQuad: (x4) => x4 < 0.5 ? 2 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 2) / 2,
  easeInCubic: (x4) => x4 * x4 * x4,
  easeOutCubic: (x4) => 1 - Math.pow(1 - x4, 3),
  easeInOutCubic: (x4) => x4 < 0.5 ? 4 * x4 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 3) / 2,
  easeInQuart: (x4) => x4 * x4 * x4 * x4,
  easeOutQuart: (x4) => 1 - Math.pow(1 - x4, 4),
  easeInOutQuart: (x4) => x4 < 0.5 ? 8 * x4 * x4 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 4) / 2,
  easeInQuint: (x4) => x4 * x4 * x4 * x4 * x4,
  easeOutQuint: (x4) => 1 - Math.pow(1 - x4, 5),
  easeInOutQuint: (x4) => x4 < 0.5 ? 16 * x4 * x4 * x4 * x4 * x4 : 1 - Math.pow(-2 * x4 + 2, 5) / 2,
  easeInSine: (x4) => 1 - Math.cos(x4 * Math.PI / 2),
  easeOutSine: (x4) => Math.sin(x4 * Math.PI / 2),
  easeInOutSine: (x4) => -(Math.cos(Math.PI * x4) - 1) / 2,
  easeInExpo: (x4) => x4 === 0 ? 0 : Math.pow(2, 10 * x4 - 10),
  easeOutExpo: (x4) => x4 === 1 ? 1 : 1 - Math.pow(2, -10 * x4),
  easeInOutExpo: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : x4 < 0.5 ? Math.pow(2, 20 * x4 - 10) / 2 : (2 - Math.pow(2, -20 * x4 + 10)) / 2,
  easeInCirc: (x4) => 1 - Math.sqrt(1 - Math.pow(x4, 2)),
  easeOutCirc: (x4) => Math.sqrt(1 - Math.pow(x4 - 1, 2)),
  easeInOutCirc: (x4) => x4 < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x4, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x4 + 2, 2)) + 1) / 2,
  easeInBack: (x4) => c3 * x4 * x4 * x4 - c1 * x4 * x4,
  easeOutBack: (x4) => 1 + c3 * Math.pow(x4 - 1, 3) + c1 * Math.pow(x4 - 1, 2),
  easeInOutBack: (x4) => x4 < 0.5 ? Math.pow(2 * x4, 2) * ((c2 + 1) * 2 * x4 - c2) / 2 : (Math.pow(2 * x4 - 2, 2) * ((c2 + 1) * (x4 * 2 - 2) + c2) + 2) / 2,
  easeInElastic: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : -Math.pow(2, 10 * x4 - 10) * Math.sin((x4 * 10 - 10.75) * c4),
  easeOutElastic: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : Math.pow(2, -10 * x4) * Math.sin((x4 * 10 - 0.75) * c4) + 1,
  easeInOutElastic: (x4) => x4 === 0 ? 0 : x4 === 1 ? 1 : x4 < 0.5 ? -(Math.pow(2, 20 * x4 - 10) * Math.sin((20 * x4 - 11.125) * c5)) / 2 : Math.pow(2, -20 * x4 + 10) * Math.sin((20 * x4 - 11.125) * c5) / 2 + 1,
  easeInBounce: (x4) => 1 - bounceOut(1 - x4),
  easeOutBounce: bounceOut,
  easeInOutBounce: (x4) => x4 < 0.5 ? (1 - bounceOut(1 - 2 * x4)) / 2 : (1 + bounceOut(2 * x4 - 1)) / 2
};
var defaults = _extends3({}, config.default, {
  mass: 1,
  damping: 1,
  easing: easings.linear,
  clamp: false
});
var AnimationConfig = class {
  constructor() {
    this.tension = void 0;
    this.friction = void 0;
    this.frequency = void 0;
    this.damping = void 0;
    this.mass = void 0;
    this.velocity = 0;
    this.restVelocity = void 0;
    this.precision = void 0;
    this.progress = void 0;
    this.duration = void 0;
    this.easing = void 0;
    this.clamp = void 0;
    this.bounce = void 0;
    this.decay = void 0;
    this.round = void 0;
    Object.assign(this, defaults);
  }
};
function mergeConfig(config2, newConfig, defaultConfig) {
  if (defaultConfig) {
    defaultConfig = _extends3({}, defaultConfig);
    sanitizeConfig(defaultConfig, newConfig);
    newConfig = _extends3({}, defaultConfig, newConfig);
  }
  sanitizeConfig(config2, newConfig);
  Object.assign(config2, newConfig);
  for (const key in defaults) {
    if (config2[key] == null) {
      config2[key] = defaults[key];
    }
  }
  let {
    mass,
    frequency,
    damping
  } = config2;
  if (!is.und(frequency)) {
    if (frequency < 0.01) frequency = 0.01;
    if (damping < 0) damping = 0;
    config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;
    config2.friction = 4 * Math.PI * damping * mass / frequency;
  }
  return config2;
}
function sanitizeConfig(config2, props) {
  if (!is.und(props.decay)) {
    config2.duration = void 0;
  } else {
    const isTensionConfig = !is.und(props.tension) || !is.und(props.friction);
    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {
      config2.duration = void 0;
      config2.decay = void 0;
    }
    if (isTensionConfig) {
      config2.frequency = void 0;
    }
  }
}
var emptyArray = [];
var Animation = class {
  constructor() {
    this.changed = false;
    this.values = emptyArray;
    this.toValues = null;
    this.fromValues = emptyArray;
    this.to = void 0;
    this.from = void 0;
    this.config = new AnimationConfig();
    this.immediate = false;
  }
};
function scheduleProps(callId, {
  key,
  props,
  defaultProps,
  state,
  actions
}) {
  return new Promise((resolve, reject) => {
    var _props$cancel;
    let delay;
    let timeout;
    let cancel = matchProp((_props$cancel = props.cancel) != null ? _props$cancel : defaultProps == null ? void 0 : defaultProps.cancel, key);
    if (cancel) {
      onStart();
    } else {
      if (!is.und(props.pause)) {
        state.paused = matchProp(props.pause, key);
      }
      let pause = defaultProps == null ? void 0 : defaultProps.pause;
      if (pause !== true) {
        pause = state.paused || matchProp(pause, key);
      }
      delay = callProp(props.delay || 0, key);
      if (pause) {
        state.resumeQueue.add(onResume);
        actions.pause();
      } else {
        actions.resume();
        onResume();
      }
    }
    function onPause() {
      state.resumeQueue.add(onResume);
      state.timeouts.delete(timeout);
      timeout.cancel();
      delay = timeout.time - raf.now();
    }
    function onResume() {
      if (delay > 0 && !globals.skipAnimation) {
        state.delayed = true;
        timeout = raf.setTimeout(onStart, delay);
        state.pauseQueue.add(onPause);
        state.timeouts.add(timeout);
      } else {
        onStart();
      }
    }
    function onStart() {
      if (state.delayed) {
        state.delayed = false;
      }
      state.pauseQueue.delete(onPause);
      state.timeouts.delete(timeout);
      if (callId <= (state.cancelId || 0)) {
        cancel = true;
      }
      try {
        actions.start(_extends3({}, props, {
          callId,
          cancel
        }), resolve);
      } catch (err) {
        reject(err);
      }
    }
  });
}
var getCombinedResult = (target, results) => results.length == 1 ? results[0] : results.some((result) => result.cancelled) ? getCancelledResult(target.get()) : results.every((result) => result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result) => result.finished));
var getNoopResult = (value) => ({
  value,
  noop: true,
  finished: true,
  cancelled: false
});
var getFinishedResult = (value, finished, cancelled = false) => ({
  value,
  finished,
  cancelled
});
var getCancelledResult = (value) => ({
  value,
  cancelled: true,
  finished: false
});
function runAsync(to3, props, state, target) {
  const {
    callId,
    parentId,
    onRest
  } = props;
  const {
    asyncTo: prevTo,
    promise: prevPromise
  } = state;
  if (!parentId && to3 === prevTo && !props.reset) {
    return prevPromise;
  }
  return state.promise = (async () => {
    state.asyncId = callId;
    state.asyncTo = to3;
    const defaultProps = getDefaultProps(props, (value, key) => key === "onRest" ? void 0 : value);
    let preventBail;
    let bail;
    const bailPromise = new Promise((resolve, reject) => (preventBail = resolve, bail = reject));
    const bailIfEnded = (bailSignal) => {
      const bailResult = callId <= (state.cancelId || 0) && getCancelledResult(target) || callId !== state.asyncId && getFinishedResult(target, false);
      if (bailResult) {
        bailSignal.result = bailResult;
        bail(bailSignal);
        throw bailSignal;
      }
    };
    const animate = (arg1, arg2) => {
      const bailSignal = new BailSignal();
      const skipAnimationSignal = new SkipAniamtionSignal();
      return (async () => {
        if (globals.skipAnimation) {
          stopAsync(state);
          skipAnimationSignal.result = getFinishedResult(target, false);
          bail(skipAnimationSignal);
          throw skipAnimationSignal;
        }
        bailIfEnded(bailSignal);
        const props2 = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
          to: arg1
        });
        props2.parentId = callId;
        eachProp(defaultProps, (value, key) => {
          if (is.und(props2[key])) {
            props2[key] = value;
          }
        });
        const result2 = await target.start(props2);
        bailIfEnded(bailSignal);
        if (state.paused) {
          await new Promise((resume) => {
            state.resumeQueue.add(resume);
          });
        }
        return result2;
      })();
    };
    let result;
    if (globals.skipAnimation) {
      stopAsync(state);
      return getFinishedResult(target, false);
    }
    try {
      let animating;
      if (is.arr(to3)) {
        animating = (async (queue) => {
          for (const props2 of queue) {
            await animate(props2);
          }
        })(to3);
      } else {
        animating = Promise.resolve(to3(animate, target.stop.bind(target)));
      }
      await Promise.all([animating.then(preventBail), bailPromise]);
      result = getFinishedResult(target.get(), true, false);
    } catch (err) {
      if (err instanceof BailSignal) {
        result = err.result;
      } else if (err instanceof SkipAniamtionSignal) {
        result = err.result;
      } else {
        throw err;
      }
    } finally {
      if (callId == state.asyncId) {
        state.asyncId = parentId;
        state.asyncTo = parentId ? prevTo : void 0;
        state.promise = parentId ? prevPromise : void 0;
      }
    }
    if (is.fun(onRest)) {
      raf.batchedUpdates(() => {
        onRest(result, target, target.item);
      });
    }
    return result;
  })();
}
function stopAsync(state, cancelId) {
  flush(state.timeouts, (t10) => t10.cancel());
  state.pauseQueue.clear();
  state.resumeQueue.clear();
  state.asyncId = state.asyncTo = state.promise = void 0;
  if (cancelId) state.cancelId = cancelId;
}
var BailSignal = class extends Error {
  constructor() {
    super("An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.");
    this.result = void 0;
  }
};
var SkipAniamtionSignal = class extends Error {
  constructor() {
    super("SkipAnimationSignal");
    this.result = void 0;
  }
};
var isFrameValue = (value) => value instanceof FrameValue;
var nextId$1 = 1;
var FrameValue = class extends FluidValue {
  constructor(...args) {
    super(...args);
    this.id = nextId$1++;
    this.key = void 0;
    this._priority = 0;
  }
  get priority() {
    return this._priority;
  }
  set priority(priority2) {
    if (this._priority != priority2) {
      this._priority = priority2;
      this._onPriorityChange(priority2);
    }
  }
  get() {
    const node = getAnimated(this);
    return node && node.getValue();
  }
  to(...args) {
    return globals.to(this, args);
  }
  interpolate(...args) {
    deprecateInterpolate();
    return globals.to(this, args);
  }
  toJSON() {
    return this.get();
  }
  observerAdded(count2) {
    if (count2 == 1) this._attach();
  }
  observerRemoved(count2) {
    if (count2 == 0) this._detach();
  }
  _attach() {
  }
  _detach() {
  }
  _onChange(value, idle = false) {
    callFluidObservers(this, {
      type: "change",
      parent: this,
      value,
      idle
    });
  }
  _onPriorityChange(priority2) {
    if (!this.idle) {
      frameLoop.sort(this);
    }
    callFluidObservers(this, {
      type: "priority",
      parent: this,
      priority: priority2
    });
  }
};
var $P = Symbol.for("SpringPhase");
var HAS_ANIMATED = 1;
var IS_ANIMATING = 2;
var IS_PAUSED = 4;
var hasAnimated = (target) => (target[$P] & HAS_ANIMATED) > 0;
var isAnimating = (target) => (target[$P] & IS_ANIMATING) > 0;
var isPaused = (target) => (target[$P] & IS_PAUSED) > 0;
var setActiveBit = (target, active) => active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;
var setPausedBit = (target, paused) => paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;
var SpringValue = class extends FrameValue {
  constructor(arg1, arg2) {
    super();
    this.key = void 0;
    this.animation = new Animation();
    this.queue = void 0;
    this.defaultProps = {};
    this._state = {
      paused: false,
      delayed: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._pendingCalls = /* @__PURE__ */ new Set();
    this._lastCallId = 0;
    this._lastToId = 0;
    this._memoizedDuration = 0;
    if (!is.und(arg1) || !is.und(arg2)) {
      const props = is.obj(arg1) ? _extends3({}, arg1) : _extends3({}, arg2, {
        from: arg1
      });
      if (is.und(props.default)) {
        props.default = true;
      }
      this.start(props);
    }
  }
  get idle() {
    return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);
  }
  get goal() {
    return getFluidValue(this.animation.to);
  }
  get velocity() {
    const node = getAnimated(this);
    return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2) => node2.lastVelocity || 0);
  }
  get hasAnimated() {
    return hasAnimated(this);
  }
  get isAnimating() {
    return isAnimating(this);
  }
  get isPaused() {
    return isPaused(this);
  }
  get isDelayed() {
    return this._state.delayed;
  }
  advance(dt2) {
    let idle = true;
    let changed = false;
    const anim = this.animation;
    let {
      config: config2,
      toValues
    } = anim;
    const payload = getPayload(anim.to);
    if (!payload && hasFluidValue(anim.to)) {
      toValues = toArray(getFluidValue(anim.to));
    }
    anim.values.forEach((node2, i6) => {
      if (node2.done) return;
      const to3 = node2.constructor == AnimatedString ? 1 : payload ? payload[i6].lastPosition : toValues[i6];
      let finished = anim.immediate;
      let position = to3;
      if (!finished) {
        position = node2.lastPosition;
        if (config2.tension <= 0) {
          node2.done = true;
          return;
        }
        let elapsed = node2.elapsedTime += dt2;
        const from = anim.fromValues[i6];
        const v0 = node2.v0 != null ? node2.v0 : node2.v0 = is.arr(config2.velocity) ? config2.velocity[i6] : config2.velocity;
        let velocity;
        if (!is.und(config2.duration)) {
          let p4 = 1;
          if (config2.duration > 0) {
            if (this._memoizedDuration !== config2.duration) {
              this._memoizedDuration = config2.duration;
              if (node2.durationProgress > 0) {
                node2.elapsedTime = config2.duration * node2.durationProgress;
                elapsed = node2.elapsedTime += dt2;
              }
            }
            p4 = (config2.progress || 0) + elapsed / this._memoizedDuration;
            p4 = p4 > 1 ? 1 : p4 < 0 ? 0 : p4;
            node2.durationProgress = p4;
          }
          position = from + config2.easing(p4) * (to3 - from);
          velocity = (position - node2.lastPosition) / dt2;
          finished = p4 == 1;
        } else if (config2.decay) {
          const decay = config2.decay === true ? 0.998 : config2.decay;
          const e11 = Math.exp(-(1 - decay) * elapsed);
          position = from + v0 / (1 - decay) * (1 - e11);
          finished = Math.abs(node2.lastPosition - position) < 0.1;
          velocity = v0 * e11;
        } else {
          velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;
          const precision = config2.precision || (from == to3 ? 5e-3 : Math.min(1, Math.abs(to3 - from) * 1e-3));
          const restVelocity = config2.restVelocity || precision / 10;
          const bounceFactor = config2.clamp ? 0 : config2.bounce;
          const canBounce = !is.und(bounceFactor);
          const isGrowing = from == to3 ? node2.v0 > 0 : from < to3;
          let isMoving;
          let isBouncing = false;
          const step = 1;
          const numSteps = Math.ceil(dt2 / step);
          for (let n7 = 0; n7 < numSteps; ++n7) {
            isMoving = Math.abs(velocity) > restVelocity;
            if (!isMoving) {
              finished = Math.abs(to3 - position) <= precision;
              if (finished) {
                break;
              }
            }
            if (canBounce) {
              isBouncing = position == to3 || position > to3 == isGrowing;
              if (isBouncing) {
                velocity = -velocity * bounceFactor;
                position = to3;
              }
            }
            const springForce = -config2.tension * 1e-6 * (position - to3);
            const dampingForce = -config2.friction * 1e-3 * velocity;
            const acceleration = (springForce + dampingForce) / config2.mass;
            velocity = velocity + acceleration * step;
            position = position + velocity * step;
          }
        }
        node2.lastVelocity = velocity;
        if (Number.isNaN(position)) {
          console.warn(`Got NaN while animating:`, this);
          finished = true;
        }
      }
      if (payload && !payload[i6].done) {
        finished = false;
      }
      if (finished) {
        node2.done = true;
      } else {
        idle = false;
      }
      if (node2.setValue(position, config2.round)) {
        changed = true;
      }
    });
    const node = getAnimated(this);
    const currVal = node.getValue();
    if (idle) {
      const finalVal = getFluidValue(anim.to);
      if ((currVal !== finalVal || changed) && !config2.decay) {
        node.setValue(finalVal);
        this._onChange(finalVal);
      } else if (changed && config2.decay) {
        this._onChange(currVal);
      }
      this._stop();
    } else if (changed) {
      this._onChange(currVal);
    }
  }
  set(value) {
    raf.batchedUpdates(() => {
      this._stop();
      this._focus(value);
      this._set(value);
    });
    return this;
  }
  pause() {
    this._update({
      pause: true
    });
  }
  resume() {
    this._update({
      pause: false
    });
  }
  finish() {
    if (isAnimating(this)) {
      const {
        to: to3,
        config: config2
      } = this.animation;
      raf.batchedUpdates(() => {
        this._onStart();
        if (!config2.decay) {
          this._set(to3, false);
        }
        this._stop();
      });
    }
    return this;
  }
  update(props) {
    const queue = this.queue || (this.queue = []);
    queue.push(props);
    return this;
  }
  start(to3, arg2) {
    let queue;
    if (!is.und(to3)) {
      queue = [is.obj(to3) ? to3 : _extends3({}, arg2, {
        to: to3
      })];
    } else {
      queue = this.queue || [];
      this.queue = [];
    }
    return Promise.all(queue.map((props) => {
      const up = this._update(props);
      return up;
    })).then((results) => getCombinedResult(this, results));
  }
  stop(cancel) {
    const {
      to: to3
    } = this.animation;
    this._focus(this.get());
    stopAsync(this._state, cancel && this._lastCallId);
    raf.batchedUpdates(() => this._stop(to3, cancel));
    return this;
  }
  reset() {
    this._update({
      reset: true
    });
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._start();
    } else if (event.type == "priority") {
      this.priority = event.priority + 1;
    }
  }
  _prepareNode(props) {
    const key = this.key || "";
    let {
      to: to3,
      from
    } = props;
    to3 = is.obj(to3) ? to3[key] : to3;
    if (to3 == null || isAsyncTo(to3)) {
      to3 = void 0;
    }
    from = is.obj(from) ? from[key] : from;
    if (from == null) {
      from = void 0;
    }
    const range2 = {
      to: to3,
      from
    };
    if (!hasAnimated(this)) {
      if (props.reverse) [to3, from] = [from, to3];
      from = getFluidValue(from);
      if (!is.und(from)) {
        this._set(from);
      } else if (!getAnimated(this)) {
        this._set(to3);
      }
    }
    return range2;
  }
  _update(_ref, isLoop) {
    let props = _extends3({}, _ref);
    const {
      key,
      defaultProps
    } = this;
    if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop) => /^on/.test(prop) ? resolveProp(value, key) : value));
    mergeActiveFn(this, props, "onProps");
    sendEvent(this, "onProps", props, this);
    const range2 = this._prepareNode(props);
    if (Object.isFrozen(this)) {
      throw Error("Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?");
    }
    const state = this._state;
    return scheduleProps(++this._lastCallId, {
      key,
      props,
      defaultProps,
      state,
      actions: {
        pause: () => {
          if (!isPaused(this)) {
            setPausedBit(this, true);
            flushCalls(state.pauseQueue);
            sendEvent(this, "onPause", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        resume: () => {
          if (isPaused(this)) {
            setPausedBit(this, false);
            if (isAnimating(this)) {
              this._resume();
            }
            flushCalls(state.resumeQueue);
            sendEvent(this, "onResume", getFinishedResult(this, checkFinished(this, this.animation.to)), this);
          }
        },
        start: this._merge.bind(this, range2)
      }
    }).then((result) => {
      if (props.loop && result.finished && !(isLoop && result.noop)) {
        const nextProps = createLoopUpdate(props);
        if (nextProps) {
          return this._update(nextProps, true);
        }
      }
      return result;
    });
  }
  _merge(range2, props, resolve) {
    if (props.cancel) {
      this.stop(true);
      return resolve(getCancelledResult(this));
    }
    const hasToProp = !is.und(range2.to);
    const hasFromProp = !is.und(range2.from);
    if (hasToProp || hasFromProp) {
      if (props.callId > this._lastToId) {
        this._lastToId = props.callId;
      } else {
        return resolve(getCancelledResult(this));
      }
    }
    const {
      key,
      defaultProps,
      animation: anim
    } = this;
    const {
      to: prevTo,
      from: prevFrom
    } = anim;
    let {
      to: to3 = prevTo,
      from = prevFrom
    } = range2;
    if (hasFromProp && !hasToProp && (!props.default || is.und(to3))) {
      to3 = from;
    }
    if (props.reverse) [to3, from] = [from, to3];
    const hasFromChanged = !isEqual(from, prevFrom);
    if (hasFromChanged) {
      anim.from = from;
    }
    from = getFluidValue(from);
    const hasToChanged = !isEqual(to3, prevTo);
    if (hasToChanged) {
      this._focus(to3);
    }
    const hasAsyncTo = isAsyncTo(props.to);
    const {
      config: config2
    } = anim;
    const {
      decay,
      velocity
    } = config2;
    if (hasToProp || hasFromProp) {
      config2.velocity = 0;
    }
    if (props.config && !hasAsyncTo) {
      mergeConfig(config2, callProp(props.config, key), props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);
    }
    let node = getAnimated(this);
    if (!node || is.und(to3)) {
      return resolve(getFinishedResult(this, true));
    }
    const reset = is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key);
    const value = reset ? from : this.get();
    const goal = computeGoal(to3);
    const isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal);
    const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));
    if (hasToChanged) {
      const nodeType = getAnimatedType(to3);
      if (nodeType !== node.constructor) {
        if (immediate) {
          node = this._set(goal);
        } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the "to" prop suggests`);
      }
    }
    const goalType = node.constructor;
    let started = hasFluidValue(to3);
    let finished = false;
    if (!started) {
      const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;
      if (hasToChanged || hasValueChanged) {
        finished = isEqual(computeGoal(value), goal);
        started = !finished;
      }
      if (!isEqual(anim.immediate, immediate) && !immediate || !isEqual(config2.decay, decay) || !isEqual(config2.velocity, velocity)) {
        started = true;
      }
    }
    if (finished && isAnimating(this)) {
      if (anim.changed && !reset) {
        started = true;
      } else if (!started) {
        this._stop(prevTo);
      }
    }
    if (!hasAsyncTo) {
      if (started || hasFluidValue(prevTo)) {
        anim.values = node.getPayload();
        anim.toValues = hasFluidValue(to3) ? null : goalType == AnimatedString ? [1] : toArray(goal);
      }
      if (anim.immediate != immediate) {
        anim.immediate = immediate;
        if (!immediate && !reset) {
          this._set(prevTo);
        }
      }
      if (started) {
        const {
          onRest
        } = anim;
        each(ACTIVE_EVENTS, (type) => mergeActiveFn(this, props, type));
        const result = getFinishedResult(this, checkFinished(this, prevTo));
        flushCalls(this._pendingCalls, result);
        this._pendingCalls.add(resolve);
        if (anim.changed) raf.batchedUpdates(() => {
          anim.changed = !reset;
          onRest == null ? void 0 : onRest(result, this);
          if (reset) {
            callProp(defaultProps.onRest, result);
          } else {
            anim.onStart == null ? void 0 : anim.onStart(result, this);
          }
        });
      }
    }
    if (reset) {
      this._set(value);
    }
    if (hasAsyncTo) {
      resolve(runAsync(props.to, props, this._state, this));
    } else if (started) {
      this._start();
    } else if (isAnimating(this) && !hasToChanged) {
      this._pendingCalls.add(resolve);
    } else {
      resolve(getNoopResult(value));
    }
  }
  _focus(value) {
    const anim = this.animation;
    if (value !== anim.to) {
      if (getFluidObservers(this)) {
        this._detach();
      }
      anim.to = value;
      if (getFluidObservers(this)) {
        this._attach();
      }
    }
  }
  _attach() {
    let priority2 = 0;
    const {
      to: to3
    } = this.animation;
    if (hasFluidValue(to3)) {
      addFluidObserver(to3, this);
      if (isFrameValue(to3)) {
        priority2 = to3.priority + 1;
      }
    }
    this.priority = priority2;
  }
  _detach() {
    const {
      to: to3
    } = this.animation;
    if (hasFluidValue(to3)) {
      removeFluidObserver(to3, this);
    }
  }
  _set(arg, idle = true) {
    const value = getFluidValue(arg);
    if (!is.und(value)) {
      const oldNode = getAnimated(this);
      if (!oldNode || !isEqual(value, oldNode.getValue())) {
        const nodeType = getAnimatedType(value);
        if (!oldNode || oldNode.constructor != nodeType) {
          setAnimated(this, nodeType.create(value));
        } else {
          oldNode.setValue(value);
        }
        if (oldNode) {
          raf.batchedUpdates(() => {
            this._onChange(value, idle);
          });
        }
      }
    }
    return getAnimated(this);
  }
  _onStart() {
    const anim = this.animation;
    if (!anim.changed) {
      anim.changed = true;
      sendEvent(this, "onStart", getFinishedResult(this, checkFinished(this, anim.to)), this);
    }
  }
  _onChange(value, idle) {
    if (!idle) {
      this._onStart();
      callProp(this.animation.onChange, value, this);
    }
    callProp(this.defaultProps.onChange, value, this);
    super._onChange(value, idle);
  }
  _start() {
    const anim = this.animation;
    getAnimated(this).reset(getFluidValue(anim.to));
    if (!anim.immediate) {
      anim.fromValues = anim.values.map((node) => node.lastPosition);
    }
    if (!isAnimating(this)) {
      setActiveBit(this, true);
      if (!isPaused(this)) {
        this._resume();
      }
    }
  }
  _resume() {
    if (globals.skipAnimation) {
      this.finish();
    } else {
      frameLoop.start(this);
    }
  }
  _stop(goal, cancel) {
    if (isAnimating(this)) {
      setActiveBit(this, false);
      const anim = this.animation;
      each(anim.values, (node) => {
        node.done = true;
      });
      if (anim.toValues) {
        anim.onChange = anim.onPause = anim.onResume = void 0;
      }
      callFluidObservers(this, {
        type: "idle",
        parent: this
      });
      const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal != null ? goal : anim.to));
      flushCalls(this._pendingCalls, result);
      if (anim.changed) {
        anim.changed = false;
        sendEvent(this, "onRest", result, this);
      }
    }
  }
};
function checkFinished(target, to3) {
  const goal = computeGoal(to3);
  const value = computeGoal(target.get());
  return isEqual(value, goal);
}
function createLoopUpdate(props, loop2 = props.loop, to3 = props.to) {
  let loopRet = callProp(loop2);
  if (loopRet) {
    const overrides = loopRet !== true && inferTo(loopRet);
    const reverse2 = (overrides || props).reverse;
    const reset = !overrides || overrides.reset;
    return createUpdate(_extends3({}, props, {
      loop: loop2,
      default: false,
      pause: void 0,
      to: !reverse2 || isAsyncTo(to3) ? to3 : void 0,
      from: reset ? props.from : void 0,
      reset
    }, overrides));
  }
}
function createUpdate(props) {
  const {
    to: to3,
    from
  } = props = inferTo(props);
  const keys = /* @__PURE__ */ new Set();
  if (is.obj(to3)) findDefined(to3, keys);
  if (is.obj(from)) findDefined(from, keys);
  props.keys = keys.size ? Array.from(keys) : null;
  return props;
}
function declareUpdate(props) {
  const update3 = createUpdate(props);
  if (is.und(update3.default)) {
    update3.default = getDefaultProps(update3);
  }
  return update3;
}
function findDefined(values, keys) {
  eachProp(values, (value, key) => value != null && keys.add(key));
}
var ACTIVE_EVENTS = ["onStart", "onRest", "onChange", "onPause", "onResume"];
function mergeActiveFn(target, props, type) {
  target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;
}
function sendEvent(target, type, ...args) {
  var _target$animation$typ, _target$animation, _target$defaultProps$, _target$defaultProps;
  (_target$animation$typ = (_target$animation = target.animation)[type]) == null ? void 0 : _target$animation$typ.call(_target$animation, ...args);
  (_target$defaultProps$ = (_target$defaultProps = target.defaultProps)[type]) == null ? void 0 : _target$defaultProps$.call(_target$defaultProps, ...args);
}
var BATCHED_EVENTS = ["onStart", "onChange", "onRest"];
var nextId = 1;
var Controller = class {
  constructor(props, flush2) {
    this.id = nextId++;
    this.springs = {};
    this.queue = [];
    this.ref = void 0;
    this._flush = void 0;
    this._initialProps = void 0;
    this._lastAsyncId = 0;
    this._active = /* @__PURE__ */ new Set();
    this._changed = /* @__PURE__ */ new Set();
    this._started = false;
    this._item = void 0;
    this._state = {
      paused: false,
      pauseQueue: /* @__PURE__ */ new Set(),
      resumeQueue: /* @__PURE__ */ new Set(),
      timeouts: /* @__PURE__ */ new Set()
    };
    this._events = {
      onStart: /* @__PURE__ */ new Map(),
      onChange: /* @__PURE__ */ new Map(),
      onRest: /* @__PURE__ */ new Map()
    };
    this._onFrame = this._onFrame.bind(this);
    if (flush2) {
      this._flush = flush2;
    }
    if (props) {
      this.start(_extends3({
        default: true
      }, props));
    }
  }
  get idle() {
    return !this._state.asyncTo && Object.values(this.springs).every((spring) => {
      return spring.idle && !spring.isDelayed && !spring.isPaused;
    });
  }
  get item() {
    return this._item;
  }
  set item(item) {
    this._item = item;
  }
  get() {
    const values = {};
    this.each((spring, key) => values[key] = spring.get());
    return values;
  }
  set(values) {
    for (const key in values) {
      const value = values[key];
      if (!is.und(value)) {
        this.springs[key].set(value);
      }
    }
  }
  update(props) {
    if (props) {
      this.queue.push(createUpdate(props));
    }
    return this;
  }
  start(props) {
    let {
      queue
    } = this;
    if (props) {
      queue = toArray(props).map(createUpdate);
    } else {
      this.queue = [];
    }
    if (this._flush) {
      return this._flush(this, queue);
    }
    prepareKeys(this, queue);
    return flushUpdateQueue(this, queue);
  }
  stop(arg, keys) {
    if (arg !== !!arg) {
      keys = arg;
    }
    if (keys) {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].stop(!!arg));
    } else {
      stopAsync(this._state, this._lastAsyncId);
      this.each((spring) => spring.stop(!!arg));
    }
    return this;
  }
  pause(keys) {
    if (is.und(keys)) {
      this.start({
        pause: true
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].pause());
    }
    return this;
  }
  resume(keys) {
    if (is.und(keys)) {
      this.start({
        pause: false
      });
    } else {
      const springs = this.springs;
      each(toArray(keys), (key) => springs[key].resume());
    }
    return this;
  }
  each(iterator) {
    eachProp(this.springs, iterator);
  }
  _onFrame() {
    const {
      onStart,
      onChange,
      onRest
    } = this._events;
    const active = this._active.size > 0;
    const changed = this._changed.size > 0;
    if (active && !this._started || changed && !this._started) {
      this._started = true;
      flush(onStart, ([onStart2, result]) => {
        result.value = this.get();
        onStart2(result, this, this._item);
      });
    }
    const idle = !active && this._started;
    const values = changed || idle && onRest.size ? this.get() : null;
    if (changed && onChange.size) {
      flush(onChange, ([onChange2, result]) => {
        result.value = values;
        onChange2(result, this, this._item);
      });
    }
    if (idle) {
      this._started = false;
      flush(onRest, ([onRest2, result]) => {
        result.value = values;
        onRest2(result, this, this._item);
      });
    }
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._changed.add(event.parent);
      if (!event.idle) {
        this._active.add(event.parent);
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else return;
    raf.onFrame(this._onFrame);
  }
};
function flushUpdateQueue(ctrl, queue) {
  return Promise.all(queue.map((props) => flushUpdate(ctrl, props))).then((results) => getCombinedResult(ctrl, results));
}
async function flushUpdate(ctrl, props, isLoop) {
  const {
    keys,
    to: to3,
    from,
    loop: loop2,
    onRest,
    onResolve
  } = props;
  const defaults2 = is.obj(props.default) && props.default;
  if (loop2) {
    props.loop = false;
  }
  if (to3 === false) props.to = null;
  if (from === false) props.from = null;
  const asyncTo = is.arr(to3) || is.fun(to3) ? to3 : void 0;
  if (asyncTo) {
    props.to = void 0;
    props.onRest = void 0;
    if (defaults2) {
      defaults2.onRest = void 0;
    }
  } else {
    each(BATCHED_EVENTS, (key) => {
      const handler = props[key];
      if (is.fun(handler)) {
        const queue = ctrl["_events"][key];
        props[key] = ({
          finished,
          cancelled
        }) => {
          const result2 = queue.get(handler);
          if (result2) {
            if (!finished) result2.finished = false;
            if (cancelled) result2.cancelled = true;
          } else {
            queue.set(handler, {
              value: null,
              finished: finished || false,
              cancelled: cancelled || false
            });
          }
        };
        if (defaults2) {
          defaults2[key] = props[key];
        }
      }
    });
  }
  const state = ctrl["_state"];
  if (props.pause === !state.paused) {
    state.paused = props.pause;
    flushCalls(props.pause ? state.pauseQueue : state.resumeQueue);
  } else if (state.paused) {
    props.pause = true;
  }
  const promises = (keys || Object.keys(ctrl.springs)).map((key) => ctrl.springs[key].start(props));
  const cancel = props.cancel === true || getDefaultProp(props, "cancel") === true;
  if (asyncTo || cancel && state.asyncId) {
    promises.push(scheduleProps(++ctrl["_lastAsyncId"], {
      props,
      state,
      actions: {
        pause: noop,
        resume: noop,
        start(props2, resolve) {
          if (cancel) {
            stopAsync(state, ctrl["_lastAsyncId"]);
            resolve(getCancelledResult(ctrl));
          } else {
            props2.onRest = onRest;
            resolve(runAsync(asyncTo, props2, state, ctrl));
          }
        }
      }
    }));
  }
  if (state.paused) {
    await new Promise((resume) => {
      state.resumeQueue.add(resume);
    });
  }
  const result = getCombinedResult(ctrl, await Promise.all(promises));
  if (loop2 && result.finished && !(isLoop && result.noop)) {
    const nextProps = createLoopUpdate(props, loop2, to3);
    if (nextProps) {
      prepareKeys(ctrl, [nextProps]);
      return flushUpdate(ctrl, nextProps, true);
    }
  }
  if (onResolve) {
    raf.batchedUpdates(() => onResolve(result, ctrl, ctrl.item));
  }
  return result;
}
function getSprings(ctrl, props) {
  const springs = _extends3({}, ctrl.springs);
  if (props) {
    each(toArray(props), (props2) => {
      if (is.und(props2.keys)) {
        props2 = createUpdate(props2);
      }
      if (!is.obj(props2.to)) {
        props2 = _extends3({}, props2, {
          to: void 0
        });
      }
      prepareSprings(springs, props2, (key) => {
        return createSpring(key);
      });
    });
  }
  setSprings(ctrl, springs);
  return springs;
}
function setSprings(ctrl, springs) {
  eachProp(springs, (spring, key) => {
    if (!ctrl.springs[key]) {
      ctrl.springs[key] = spring;
      addFluidObserver(spring, ctrl);
    }
  });
}
function createSpring(key, observer) {
  const spring = new SpringValue();
  spring.key = key;
  if (observer) {
    addFluidObserver(spring, observer);
  }
  return spring;
}
function prepareSprings(springs, props, create) {
  if (props.keys) {
    each(props.keys, (key) => {
      const spring = springs[key] || (springs[key] = create(key));
      spring["_prepareNode"](props);
    });
  }
}
function prepareKeys(ctrl, queue) {
  each(queue, (props) => {
    prepareSprings(ctrl.springs, props, (key) => {
      return createSpring(key, ctrl);
    });
  });
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i6;
  for (i6 = 0; i6 < sourceKeys.length; i6++) {
    key = sourceKeys[i6];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$3 = ["children"];
var SpringContext = (_ref) => {
  let {
    children
  } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded$3);
  const inherited = (0, import_react3.useContext)(ctx);
  const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;
  props = useMemoOne(() => ({
    pause,
    immediate
  }), [pause, immediate]);
  const {
    Provider
  } = ctx;
  return React3.createElement(Provider, {
    value: props
  }, children);
};
var ctx = makeContext(SpringContext, {});
SpringContext.Provider = ctx.Provider;
SpringContext.Consumer = ctx.Consumer;
function makeContext(target, init) {
  Object.assign(target, React3.createContext(init));
  target.Provider._context = target;
  target.Consumer._context = target;
  return target;
}
var SpringRef = () => {
  const current = [];
  const SpringRef2 = function SpringRef3(props) {
    deprecateDirectCall();
    const results = [];
    each(current, (ctrl, i6) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = _getProps(props, ctrl, i6);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.current = current;
  SpringRef2.add = function(ctrl) {
    if (!current.includes(ctrl)) {
      current.push(ctrl);
    }
  };
  SpringRef2.delete = function(ctrl) {
    const i6 = current.indexOf(ctrl);
    if (~i6) current.splice(i6, 1);
  };
  SpringRef2.pause = function() {
    each(current, (ctrl) => ctrl.pause(...arguments));
    return this;
  };
  SpringRef2.resume = function() {
    each(current, (ctrl) => ctrl.resume(...arguments));
    return this;
  };
  SpringRef2.set = function(values) {
    each(current, (ctrl) => ctrl.set(values));
  };
  SpringRef2.start = function(props) {
    const results = [];
    each(current, (ctrl, i6) => {
      if (is.und(props)) {
        results.push(ctrl.start());
      } else {
        const update3 = this._getProps(props, ctrl, i6);
        if (update3) {
          results.push(ctrl.start(update3));
        }
      }
    });
    return results;
  };
  SpringRef2.stop = function() {
    each(current, (ctrl) => ctrl.stop(...arguments));
    return this;
  };
  SpringRef2.update = function(props) {
    each(current, (ctrl, i6) => ctrl.update(this._getProps(props, ctrl, i6)));
    return this;
  };
  const _getProps = function _getProps2(arg, ctrl, index2) {
    return is.fun(arg) ? arg(index2, ctrl) : arg;
  };
  SpringRef2._getProps = _getProps;
  return SpringRef2;
};
function useSprings(length, props, deps) {
  const propsFn = is.fun(props) && props;
  if (propsFn && !deps) deps = [];
  const ref = (0, import_react3.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const layoutId = (0, import_react3.useRef)(0);
  const forceUpdate = useForceUpdate();
  const state = (0, import_react3.useMemo)(() => ({
    ctrls: [],
    queue: [],
    flush(ctrl, updates2) {
      const springs2 = getSprings(ctrl, updates2);
      const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key) => !ctrl.springs[key]);
      return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve) => {
        setSprings(ctrl, springs2);
        state.queue.push(() => {
          resolve(flushUpdateQueue(ctrl, updates2));
        });
        forceUpdate();
      });
    }
  }), []);
  const ctrls = (0, import_react3.useRef)([...state.ctrls]);
  const updates = [];
  const prevLength = usePrev(length) || 0;
  (0, import_react3.useMemo)(() => {
    each(ctrls.current.slice(length, prevLength), (ctrl) => {
      detachRefs(ctrl, ref);
      ctrl.stop(true);
    });
    ctrls.current.length = length;
    declareUpdates(prevLength, length);
  }, [length]);
  (0, import_react3.useMemo)(() => {
    declareUpdates(0, Math.min(prevLength, length));
  }, deps);
  function declareUpdates(startIndex, endIndex) {
    for (let i6 = startIndex; i6 < endIndex; i6++) {
      const ctrl = ctrls.current[i6] || (ctrls.current[i6] = new Controller(null, state.flush));
      const update3 = propsFn ? propsFn(i6, ctrl) : props[i6];
      if (update3) {
        updates[i6] = declareUpdate(update3);
      }
    }
  }
  const springs = ctrls.current.map((ctrl, i6) => getSprings(ctrl, updates[i6]));
  const context = (0, import_react3.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useLayoutEffect2(() => {
    layoutId.current++;
    state.ctrls = ctrls.current;
    const {
      queue
    } = state;
    if (queue.length) {
      state.queue = [];
      each(queue, (cb) => cb());
    }
    each(ctrls.current, (ctrl, i6) => {
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext) {
        ctrl.start({
          default: context
        });
      }
      const update3 = updates[i6];
      if (update3) {
        replaceRef(ctrl, update3.ref);
        if (ctrl.ref) {
          ctrl.queue.push(update3);
        } else {
          ctrl.start(update3);
        }
      }
    });
  });
  useOnce(() => () => {
    each(state.ctrls, (ctrl) => ctrl.stop(true));
  });
  const values = springs.map((x4) => _extends3({}, x4));
  return ref ? [values, ref] : values;
}
function useSpring(props, deps) {
  const isFn = is.fun(props);
  const [[values], ref] = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps);
  return isFn || arguments.length == 2 ? [values, ref] : values;
}
var TransitionPhase;
(function(TransitionPhase2) {
  TransitionPhase2["MOUNT"] = "mount";
  TransitionPhase2["ENTER"] = "enter";
  TransitionPhase2["UPDATE"] = "update";
  TransitionPhase2["LEAVE"] = "leave";
})(TransitionPhase || (TransitionPhase = {}));
function useTransition(data, props, deps) {
  const propsFn = is.fun(props) && props;
  const {
    reset,
    sort: sort2,
    trail = 0,
    expires = true,
    exitBeforeEnter = false,
    onDestroyed,
    ref: propsRef,
    config: propsConfig
  } = propsFn ? propsFn() : props;
  const ref = (0, import_react3.useMemo)(() => propsFn || arguments.length == 3 ? SpringRef() : void 0, []);
  const items = toArray(data);
  const transitions = [];
  const usedTransitions = (0, import_react3.useRef)(null);
  const prevTransitions = reset ? null : usedTransitions.current;
  useLayoutEffect2(() => {
    usedTransitions.current = transitions;
  });
  useOnce(() => {
    each(usedTransitions.current, (t10) => {
      var _t$ctrl$ref;
      (_t$ctrl$ref = t10.ctrl.ref) == null ? void 0 : _t$ctrl$ref.add(t10.ctrl);
      const change = changes.get(t10);
      if (change) {
        t10.ctrl.start(change.payload);
      }
    });
    return () => {
      each(usedTransitions.current, (t10) => {
        if (t10.expired) {
          clearTimeout(t10.expirationId);
        }
        detachRefs(t10.ctrl, ref);
        t10.ctrl.stop(true);
      });
    };
  });
  const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);
  const expired = reset && usedTransitions.current || [];
  useLayoutEffect2(() => each(expired, ({
    ctrl,
    item,
    key
  }) => {
    detachRefs(ctrl, ref);
    callProp(onDestroyed, item, key);
  }));
  const reused = [];
  if (prevTransitions) each(prevTransitions, (t10, i6) => {
    if (t10.expired) {
      clearTimeout(t10.expirationId);
      expired.push(t10);
    } else {
      i6 = reused[i6] = keys.indexOf(t10.key);
      if (~i6) transitions[i6] = t10;
    }
  });
  each(items, (item, i6) => {
    if (!transitions[i6]) {
      transitions[i6] = {
        key: keys[i6],
        item,
        phase: TransitionPhase.MOUNT,
        ctrl: new Controller()
      };
      transitions[i6].ctrl.item = item;
    }
  });
  if (reused.length) {
    let i6 = -1;
    const {
      leave
    } = propsFn ? propsFn() : props;
    each(reused, (keyIndex, prevIndex) => {
      const t10 = prevTransitions[prevIndex];
      if (~keyIndex) {
        i6 = transitions.indexOf(t10);
        transitions[i6] = _extends3({}, t10, {
          item: items[keyIndex]
        });
      } else if (leave) {
        transitions.splice(++i6, 0, t10);
      }
    });
  }
  if (is.fun(sort2)) {
    transitions.sort((a5, b5) => sort2(a5.item, b5.item));
  }
  let delay = -trail;
  const forceUpdate = useForceUpdate();
  const defaultProps = getDefaultProps(props);
  const changes = /* @__PURE__ */ new Map();
  const exitingTransitions = (0, import_react3.useRef)(/* @__PURE__ */ new Map());
  const forceChange = (0, import_react3.useRef)(false);
  each(transitions, (t10, i6) => {
    const key = t10.key;
    const prevPhase = t10.phase;
    const p4 = propsFn ? propsFn() : props;
    let to3;
    let phase;
    let propsDelay = callProp(p4.delay || 0, key);
    if (prevPhase == TransitionPhase.MOUNT) {
      to3 = p4.enter;
      phase = TransitionPhase.ENTER;
    } else {
      const isLeave = keys.indexOf(key) < 0;
      if (prevPhase != TransitionPhase.LEAVE) {
        if (isLeave) {
          to3 = p4.leave;
          phase = TransitionPhase.LEAVE;
        } else if (to3 = p4.update) {
          phase = TransitionPhase.UPDATE;
        } else return;
      } else if (!isLeave) {
        to3 = p4.enter;
        phase = TransitionPhase.ENTER;
      } else return;
    }
    to3 = callProp(to3, t10.item, i6);
    to3 = is.obj(to3) ? inferTo(to3) : {
      to: to3
    };
    if (!to3.config) {
      const config2 = propsConfig || defaultProps.config;
      to3.config = callProp(config2, t10.item, i6, phase);
    }
    delay += trail;
    const payload = _extends3({}, defaultProps, {
      delay: propsDelay + delay,
      ref: propsRef,
      immediate: p4.immediate,
      reset: false
    }, to3);
    if (phase == TransitionPhase.ENTER && is.und(payload.from)) {
      const _p = propsFn ? propsFn() : props;
      const from = is.und(_p.initial) || prevTransitions ? _p.from : _p.initial;
      payload.from = callProp(from, t10.item, i6);
    }
    const {
      onResolve
    } = payload;
    payload.onResolve = (result) => {
      callProp(onResolve, result);
      const transitions2 = usedTransitions.current;
      const t11 = transitions2.find((t14) => t14.key === key);
      if (!t11) return;
      if (result.cancelled && t11.phase != TransitionPhase.UPDATE) {
        return;
      }
      if (t11.ctrl.idle) {
        const idle = transitions2.every((t14) => t14.ctrl.idle);
        if (t11.phase == TransitionPhase.LEAVE) {
          const expiry = callProp(expires, t11.item);
          if (expiry !== false) {
            const expiryMs = expiry === true ? 0 : expiry;
            t11.expired = true;
            if (!idle && expiryMs > 0) {
              if (expiryMs <= 2147483647) t11.expirationId = setTimeout(forceUpdate, expiryMs);
              return;
            }
          }
        }
        if (idle && transitions2.some((t14) => t14.expired)) {
          exitingTransitions.current.delete(t11);
          if (exitBeforeEnter) {
            forceChange.current = true;
          }
          forceUpdate();
        }
      }
    };
    const springs = getSprings(t10.ctrl, payload);
    if (phase === TransitionPhase.LEAVE && exitBeforeEnter) {
      exitingTransitions.current.set(t10, {
        phase,
        springs,
        payload
      });
    } else {
      changes.set(t10, {
        phase,
        springs,
        payload
      });
    }
  });
  const context = (0, import_react3.useContext)(SpringContext);
  const prevContext = usePrev(context);
  const hasContext = context !== prevContext && hasProps(context);
  useLayoutEffect2(() => {
    if (hasContext) {
      each(transitions, (t10) => {
        t10.ctrl.start({
          default: context
        });
      });
    }
  }, [context]);
  each(changes, (_3, t10) => {
    if (exitingTransitions.current.size) {
      const ind = transitions.findIndex((state) => state.key === t10.key);
      transitions.splice(ind, 1);
    }
  });
  useLayoutEffect2(() => {
    each(exitingTransitions.current.size ? exitingTransitions.current : changes, ({
      phase,
      payload
    }, t10) => {
      const {
        ctrl
      } = t10;
      t10.phase = phase;
      ref == null ? void 0 : ref.add(ctrl);
      if (hasContext && phase == TransitionPhase.ENTER) {
        ctrl.start({
          default: context
        });
      }
      if (payload) {
        replaceRef(ctrl, payload.ref);
        if (ctrl.ref && !forceChange.current) {
          ctrl.update(payload);
        } else {
          ctrl.start(payload);
          if (forceChange.current) {
            forceChange.current = false;
          }
        }
      }
    });
  }, reset ? void 0 : deps);
  const renderTransitions = (render) => React3.createElement(React3.Fragment, null, transitions.map((t10, i6) => {
    const {
      springs
    } = changes.get(t10) || t10.ctrl;
    const elem = render(_extends3({}, springs), t10.item, t10, i6);
    return elem && elem.type ? React3.createElement(elem.type, _extends3({}, elem.props, {
      key: is.str(t10.key) || is.num(t10.key) ? t10.key : t10.ctrl.id,
      ref: elem.ref
    })) : elem;
  }));
  return ref ? [renderTransitions, ref] : renderTransitions;
}
var nextKey = 1;
function getKeys(items, {
  key,
  keys = key
}, prevTransitions) {
  if (keys === null) {
    const reused = /* @__PURE__ */ new Set();
    return items.map((item) => {
      const t10 = prevTransitions && prevTransitions.find((t11) => t11.item === item && t11.phase !== TransitionPhase.LEAVE && !reused.has(t11));
      if (t10) {
        reused.add(t10);
        return t10.key;
      }
      return nextKey++;
    });
  }
  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);
}
var Interpolation = class extends FrameValue {
  constructor(source, args) {
    super();
    this.key = void 0;
    this.idle = true;
    this.calc = void 0;
    this._active = /* @__PURE__ */ new Set();
    this.source = source;
    this.calc = createInterpolator(...args);
    const value = this._get();
    const nodeType = getAnimatedType(value);
    setAnimated(this, nodeType.create(value));
  }
  advance(_dt) {
    const value = this._get();
    const oldValue = this.get();
    if (!isEqual(value, oldValue)) {
      getAnimated(this).setValue(value);
      this._onChange(value, this.idle);
    }
    if (!this.idle && checkIdle(this._active)) {
      becomeIdle(this);
    }
  }
  _get() {
    const inputs = is.arr(this.source) ? this.source.map(getFluidValue) : toArray(getFluidValue(this.source));
    return this.calc(...inputs);
  }
  _start() {
    if (this.idle && !checkIdle(this._active)) {
      this.idle = false;
      each(getPayload(this), (node) => {
        node.done = false;
      });
      if (globals.skipAnimation) {
        raf.batchedUpdates(() => this.advance());
        becomeIdle(this);
      } else {
        frameLoop.start(this);
      }
    }
  }
  _attach() {
    let priority2 = 1;
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        addFluidObserver(source, this);
      }
      if (isFrameValue(source)) {
        if (!source.idle) {
          this._active.add(source);
        }
        priority2 = Math.max(priority2, source.priority + 1);
      }
    });
    this.priority = priority2;
    this._start();
  }
  _detach() {
    each(toArray(this.source), (source) => {
      if (hasFluidValue(source)) {
        removeFluidObserver(source, this);
      }
    });
    this._active.clear();
    becomeIdle(this);
  }
  eventObserved(event) {
    if (event.type == "change") {
      if (event.idle) {
        this.advance();
      } else {
        this._active.add(event.parent);
        this._start();
      }
    } else if (event.type == "idle") {
      this._active.delete(event.parent);
    } else if (event.type == "priority") {
      this.priority = toArray(this.source).reduce((highest, parent) => Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);
    }
  }
};
function isIdle(source) {
  return source.idle !== false;
}
function checkIdle(active) {
  return !active.size || Array.from(active).every(isIdle);
}
function becomeIdle(self2) {
  if (!self2.idle) {
    self2.idle = true;
    each(getPayload(self2), (node) => {
      node.done = true;
    });
    callFluidObservers(self2, {
      type: "idle",
      parent: self2
    });
  }
}
var to2 = (source, ...args) => new Interpolation(source, args);
globals.assign({
  createStringInterpolator,
  to: (source, args) => new Interpolation(source, args)
});
var update2 = frameLoop.advance;

// node_modules/@react-spring/web/dist/react-spring-web.esm.js
var import_react_dom = __toESM(require_react_dom());
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i6;
  for (i6 = 0; i6 < sourceKeys.length; i6++) {
    key = sourceKeys[i6];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
var _excluded$2 = ["style", "children", "scrollTop", "scrollLeft"];
var isCustomPropRE = /^--/;
function dangerousStyleValue(name, value) {
  if (value == null || typeof value === "boolean" || value === "") return "";
  if (typeof value === "number" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + "px";
  return ("" + value).trim();
}
var attributeCache = {};
function applyAnimatedValues(instance, props) {
  if (!instance.nodeType || !instance.setAttribute) {
    return false;
  }
  const isFilterElement = instance.nodeName === "filter" || instance.parentNode && instance.parentNode.nodeName === "filter";
  const _ref = props, {
    style,
    children,
    scrollTop,
    scrollLeft
  } = _ref, attributes = _objectWithoutPropertiesLoose2(_ref, _excluded$2);
  const values = Object.values(attributes);
  const names = Object.keys(attributes).map((name) => isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, (n7) => "-" + n7.toLowerCase())));
  if (children !== void 0) {
    instance.textContent = children;
  }
  for (let name in style) {
    if (style.hasOwnProperty(name)) {
      const value = dangerousStyleValue(name, style[name]);
      if (isCustomPropRE.test(name)) {
        instance.style.setProperty(name, value);
      } else {
        instance.style[name] = value;
      }
    }
  }
  names.forEach((name, i6) => {
    instance.setAttribute(name, values[i6]);
  });
  if (scrollTop !== void 0) {
    instance.scrollTop = scrollTop;
  }
  if (scrollLeft !== void 0) {
    instance.scrollLeft = scrollLeft;
  }
}
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
var prefixKey = (prefix2, key) => prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
var prefixes = ["Webkit", "Ms", "Moz", "O"];
isUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop) => {
  prefixes.forEach((prefix2) => acc[prefixKey(prefix2, prop)] = acc[prop]);
  return acc;
}, isUnitlessNumber);
var _excluded$1 = ["x", "y", "z"];
var domTransforms = /^(matrix|translate|scale|rotate|skew)/;
var pxTransforms = /^(translate)/;
var degTransforms = /^(rotate|skew)/;
var addUnit = (value, unit2) => is.num(value) && value !== 0 ? value + unit2 : value;
var isValueIdentity = (value, id) => is.arr(value) ? value.every((v6) => isValueIdentity(v6, id)) : is.num(value) ? value === id : parseFloat(value) === id;
var AnimatedStyle = class extends AnimatedObject {
  constructor(_ref) {
    let {
      x: x4,
      y: y4,
      z: z6
    } = _ref, style = _objectWithoutPropertiesLoose2(_ref, _excluded$1);
    const inputs = [];
    const transforms = [];
    if (x4 || y4 || z6) {
      inputs.push([x4 || 0, y4 || 0, z6 || 0]);
      transforms.push((xyz) => [`translate3d(${xyz.map((v6) => addUnit(v6, "px")).join(",")})`, isValueIdentity(xyz, 0)]);
    }
    eachProp(style, (value, key) => {
      if (key === "transform") {
        inputs.push([value || ""]);
        transforms.push((transform) => [transform, transform === ""]);
      } else if (domTransforms.test(key)) {
        delete style[key];
        if (is.und(value)) return;
        const unit2 = pxTransforms.test(key) ? "px" : degTransforms.test(key) ? "deg" : "";
        inputs.push(toArray(value));
        transforms.push(key === "rotate3d" ? ([x5, y5, z7, deg]) => [`rotate3d(${x5},${y5},${z7},${addUnit(deg, unit2)})`, isValueIdentity(deg, 0)] : (input) => [`${key}(${input.map((v6) => addUnit(v6, unit2)).join(",")})`, isValueIdentity(input, key.startsWith("scale") ? 1 : 0)]);
      }
    });
    if (inputs.length) {
      style.transform = new FluidTransform(inputs, transforms);
    }
    super(style);
  }
};
var FluidTransform = class extends FluidValue {
  constructor(inputs, transforms) {
    super();
    this._value = null;
    this.inputs = inputs;
    this.transforms = transforms;
  }
  get() {
    return this._value || (this._value = this._get());
  }
  _get() {
    let transform = "";
    let identity5 = true;
    each(this.inputs, (input, i6) => {
      const arg1 = getFluidValue(input[0]);
      const [t10, id] = this.transforms[i6](is.arr(arg1) ? arg1 : input.map(getFluidValue));
      transform += " " + t10;
      identity5 = identity5 && id;
    });
    return identity5 ? "none" : transform;
  }
  observerAdded(count2) {
    if (count2 == 1) each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && addFluidObserver(value, this)));
  }
  observerRemoved(count2) {
    if (count2 == 0) each(this.inputs, (input) => each(input, (value) => hasFluidValue(value) && removeFluidObserver(value, this)));
  }
  eventObserved(event) {
    if (event.type == "change") {
      this._value = null;
    }
    callFluidObservers(this, event);
  }
};
var primitives = ["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr", "circle", "clipPath", "defs", "ellipse", "foreignObject", "g", "image", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"];
var _excluded = ["scrollTop", "scrollLeft"];
globals.assign({
  batchedUpdates: import_react_dom.unstable_batchedUpdates,
  createStringInterpolator,
  colors
});
var host = createHost(primitives, {
  applyAnimatedValues,
  createAnimatedStyle: (style) => new AnimatedStyle(style),
  getComponentProps: (_ref) => {
    let props = _objectWithoutPropertiesLoose2(_ref, _excluded);
    return props;
  }
});
var animated = host.animated;

// node_modules/@nivo/tooltip/dist/nivo-tooltip.es.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
function v() {
  return v = Object.assign ? Object.assign.bind() : function(t10) {
    for (var i6 = 1; i6 < arguments.length; i6++) {
      var o5 = arguments[i6];
      for (var n7 in o5) Object.prototype.hasOwnProperty.call(o5, n7) && (t10[n7] = o5[n7]);
    }
    return t10;
  }, v.apply(this, arguments);
}
var x = { pointerEvents: "none", position: "absolute", zIndex: 10, top: 0, left: 0 };
var m = function(t10, i6) {
  return "translate(" + t10 + "px, " + i6 + "px)";
};
var b = (0, import_react4.memo)(function(t10) {
  var o5, n7 = t10.position, r7 = t10.anchor, e11 = t10.children, l5 = zt(), d3 = Ur(), y4 = d3.animate, f3 = d3.config, b5 = kt(), g4 = b5[0], w5 = b5[1], T4 = (0, import_react4.useRef)(false), C6 = void 0, E4 = false, P4 = w5.width > 0 && w5.height > 0, j3 = Math.round(n7[0]), N2 = Math.round(n7[1]);
  P4 && ("top" === r7 ? (j3 -= w5.width / 2, N2 -= w5.height + 14) : "right" === r7 ? (j3 += 14, N2 -= w5.height / 2) : "bottom" === r7 ? (j3 -= w5.width / 2, N2 += 14) : "left" === r7 ? (j3 -= w5.width + 14, N2 -= w5.height / 2) : "center" === r7 && (j3 -= w5.width / 2, N2 -= w5.height / 2), C6 = { transform: m(j3, N2) }, T4.current || (E4 = true), T4.current = [j3, N2]);
  var O5 = useSpring({ to: C6, config: f3, immediate: !y4 || E4 }), V2 = v({}, x, l5.tooltip.wrapper, { transform: null != (o5 = O5.transform) ? o5 : m(j3, N2), opacity: O5.transform ? 1 : 0 });
  return (0, import_jsx_runtime.jsx)(animated.div, { ref: g4, style: V2, children: e11 });
});
b.displayName = "TooltipWrapper";
var g = (0, import_react4.memo)(function(t10) {
  var i6 = t10.size, o5 = void 0 === i6 ? 12 : i6, n7 = t10.color, r7 = t10.style;
  return (0, import_jsx_runtime.jsx)("span", { style: v({ display: "block", width: o5, height: o5, background: n7 }, void 0 === r7 ? {} : r7) });
});
var w = (0, import_react4.memo)(function(t10) {
  var i6, o5 = t10.id, n7 = t10.value, r7 = t10.format, e11 = t10.enableChip, l5 = void 0 !== e11 && e11, a5 = t10.color, c9 = t10.renderContent, h2 = zt(), u6 = Ot(r7);
  if ("function" == typeof c9) i6 = c9();
  else {
    var f3 = n7;
    void 0 !== u6 && void 0 !== f3 && (f3 = u6(f3)), i6 = (0, import_jsx_runtime.jsxs)("div", { style: h2.tooltip.basic, children: [l5 && (0, import_jsx_runtime.jsx)(g, { color: a5, style: h2.tooltip.chip }), void 0 !== f3 ? (0, import_jsx_runtime.jsxs)("span", { children: [o5, ": ", (0, import_jsx_runtime.jsx)("strong", { children: "" + f3 })] }) : o5] });
  }
  return (0, import_jsx_runtime.jsx)("div", { style: h2.tooltip.container, children: i6 });
});
var T = { width: "100%", borderCollapse: "collapse" };
var C = (0, import_react4.memo)(function(t10) {
  var i6, o5 = t10.title, n7 = t10.rows, r7 = void 0 === n7 ? [] : n7, e11 = t10.renderContent, l5 = zt();
  return r7.length ? (i6 = "function" == typeof e11 ? e11() : (0, import_jsx_runtime.jsxs)("div", { children: [o5 && o5, (0, import_jsx_runtime.jsx)("table", { style: v({}, T, l5.tooltip.table), children: (0, import_jsx_runtime.jsx)("tbody", { children: r7.map(function(t11, i7) {
    return (0, import_jsx_runtime.jsx)("tr", { children: t11.map(function(t14, i8) {
      return (0, import_jsx_runtime.jsx)("td", { style: l5.tooltip.tableCell, children: t14 }, i8);
    }) }, i7);
  }) }) })] }), (0, import_jsx_runtime.jsx)("div", { style: l5.tooltip.container, children: i6 })) : null;
});
C.displayName = "TableTooltip";
var E = (0, import_react4.memo)(function(t10) {
  var i6 = t10.x0, n7 = t10.x1, r7 = t10.y0, e11 = t10.y1, l5 = zt(), u6 = Ur(), d3 = u6.animate, y4 = u6.config, f3 = (0, import_react4.useMemo)(function() {
    return v({}, l5.crosshair.line, { pointerEvents: "none" });
  }, [l5.crosshair.line]), x4 = useSpring({ x1: i6, x2: n7, y1: r7, y2: e11, config: y4, immediate: !d3 });
  return (0, import_jsx_runtime.jsx)(animated.line, v({}, x4, { fill: "none", style: f3 }));
});
E.displayName = "CrosshairLine";
var P = (0, import_react4.memo)(function(t10) {
  var i6, o5, n7 = t10.width, r7 = t10.height, e11 = t10.type, l5 = t10.x, a5 = t10.y;
  return "cross" === e11 ? (i6 = { x0: l5, x1: l5, y0: 0, y1: r7 }, o5 = { x0: 0, x1: n7, y0: a5, y1: a5 }) : "top-left" === e11 ? (i6 = { x0: l5, x1: l5, y0: 0, y1: a5 }, o5 = { x0: 0, x1: l5, y0: a5, y1: a5 }) : "top" === e11 ? i6 = { x0: l5, x1: l5, y0: 0, y1: a5 } : "top-right" === e11 ? (i6 = { x0: l5, x1: l5, y0: 0, y1: a5 }, o5 = { x0: l5, x1: n7, y0: a5, y1: a5 }) : "right" === e11 ? o5 = { x0: l5, x1: n7, y0: a5, y1: a5 } : "bottom-right" === e11 ? (i6 = { x0: l5, x1: l5, y0: a5, y1: r7 }, o5 = { x0: l5, x1: n7, y0: a5, y1: a5 }) : "bottom" === e11 ? i6 = { x0: l5, x1: l5, y0: a5, y1: r7 } : "bottom-left" === e11 ? (i6 = { x0: l5, x1: l5, y0: a5, y1: r7 }, o5 = { x0: 0, x1: l5, y0: a5, y1: a5 }) : "left" === e11 ? o5 = { x0: 0, x1: l5, y0: a5, y1: a5 } : "x" === e11 ? i6 = { x0: l5, x1: l5, y0: 0, y1: r7 } : "y" === e11 && (o5 = { x0: 0, x1: n7, y0: a5, y1: a5 }), (0, import_jsx_runtime.jsxs)(import_jsx_runtime.Fragment, { children: [i6 && (0, import_jsx_runtime.jsx)(E, { x0: i6.x0, x1: i6.x1, y0: i6.y0, y1: i6.y1 }), o5 && (0, import_jsx_runtime.jsx)(E, { x0: o5.x0, x1: o5.x1, y0: o5.y0, y1: o5.y1 })] });
});
P.displayName = "Crosshair";
var j = (0, import_react4.createContext)({ showTooltipAt: function() {
}, showTooltipFromEvent: function() {
}, hideTooltip: function() {
} });
var N = { isVisible: false, position: [null, null], content: null, anchor: null };
var O = (0, import_react4.createContext)(N);
var V = function(t10) {
  var i6 = (0, import_react4.useState)(N), n7 = i6[0], l5 = i6[1], a5 = (0, import_react4.useCallback)(function(t11, i7, o5) {
    var n8 = i7[0], r7 = i7[1];
    void 0 === o5 && (o5 = "top"), l5({ isVisible: true, position: [n8, r7], anchor: o5, content: t11 });
  }, [l5]), c9 = (0, import_react4.useCallback)(function(i7, o5, n8) {
    void 0 === n8 && (n8 = "top");
    var r7 = t10.current.getBoundingClientRect(), e11 = t10.current.offsetWidth, a6 = e11 === r7.width ? 1 : e11 / r7.width, c10 = "touches" in o5 ? o5.touches[0] : o5, s6 = c10.clientX, h2 = c10.clientY, u6 = (s6 - r7.left) * a6, d3 = (h2 - r7.top) * a6;
    "left" !== n8 && "right" !== n8 || (n8 = u6 < r7.width / 2 ? "right" : "left"), l5({ isVisible: true, position: [u6, d3], anchor: n8, content: i7 });
  }, [t10, l5]), s5 = (0, import_react4.useCallback)(function() {
    l5(N);
  }, [l5]);
  return { actions: (0, import_react4.useMemo)(function() {
    return { showTooltipAt: a5, showTooltipFromEvent: c9, hideTooltip: s5 };
  }, [a5, c9, s5]), state: n7 };
};
var k = function() {
  var t10 = (0, import_react4.useContext)(j);
  if (void 0 === t10) throw new Error("useTooltip must be used within a TooltipProvider");
  return t10;
};
var z = function() {
  var t10 = (0, import_react4.useContext)(O);
  if (void 0 === t10) throw new Error("useTooltipState must be used within a TooltipProvider");
  return t10;
};
var A = function(t10) {
  return t10.isVisible;
};
var F = function() {
  var t10 = z();
  return A(t10) ? (0, import_jsx_runtime.jsx)(b, { position: t10.position, anchor: t10.anchor, children: t10.content }) : null;
};
var M = function(t10) {
  var i6 = t10.container, o5 = t10.children, n7 = V(i6), r7 = n7.actions, e11 = n7.state;
  return (0, import_jsx_runtime.jsx)(j.Provider, { value: r7, children: (0, import_jsx_runtime.jsx)(O.Provider, { value: e11, children: o5 }) });
};

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_merge2 = __toESM(require_merge());
var import_get = __toESM(require_get());
var import_set = __toESM(require_set());

// node_modules/d3-color/src/define.js
function define_default(constructor, factory, prototype) {
  constructor.prototype = factory.prototype = prototype;
  prototype.constructor = constructor;
}
function extend(parent, definition) {
  var prototype = Object.create(parent.prototype);
  for (var key in definition) prototype[key] = definition[key];
  return prototype;
}

// node_modules/d3-color/src/color.js
function Color() {
}
var darker = 0.7;
var brighter = 1 / darker;
var reI = "\\s*([+-]?\\d+)\\s*";
var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
var reHex = /^#([0-9a-f]{3,8})$/;
var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
var named = {
  aliceblue: 15792383,
  antiquewhite: 16444375,
  aqua: 65535,
  aquamarine: 8388564,
  azure: 15794175,
  beige: 16119260,
  bisque: 16770244,
  black: 0,
  blanchedalmond: 16772045,
  blue: 255,
  blueviolet: 9055202,
  brown: 10824234,
  burlywood: 14596231,
  cadetblue: 6266528,
  chartreuse: 8388352,
  chocolate: 13789470,
  coral: 16744272,
  cornflowerblue: 6591981,
  cornsilk: 16775388,
  crimson: 14423100,
  cyan: 65535,
  darkblue: 139,
  darkcyan: 35723,
  darkgoldenrod: 12092939,
  darkgray: 11119017,
  darkgreen: 25600,
  darkgrey: 11119017,
  darkkhaki: 12433259,
  darkmagenta: 9109643,
  darkolivegreen: 5597999,
  darkorange: 16747520,
  darkorchid: 10040012,
  darkred: 9109504,
  darksalmon: 15308410,
  darkseagreen: 9419919,
  darkslateblue: 4734347,
  darkslategray: 3100495,
  darkslategrey: 3100495,
  darkturquoise: 52945,
  darkviolet: 9699539,
  deeppink: 16716947,
  deepskyblue: 49151,
  dimgray: 6908265,
  dimgrey: 6908265,
  dodgerblue: 2003199,
  firebrick: 11674146,
  floralwhite: 16775920,
  forestgreen: 2263842,
  fuchsia: 16711935,
  gainsboro: 14474460,
  ghostwhite: 16316671,
  gold: 16766720,
  goldenrod: 14329120,
  gray: 8421504,
  green: 32768,
  greenyellow: 11403055,
  grey: 8421504,
  honeydew: 15794160,
  hotpink: 16738740,
  indianred: 13458524,
  indigo: 4915330,
  ivory: 16777200,
  khaki: 15787660,
  lavender: 15132410,
  lavenderblush: 16773365,
  lawngreen: 8190976,
  lemonchiffon: 16775885,
  lightblue: 11393254,
  lightcoral: 15761536,
  lightcyan: 14745599,
  lightgoldenrodyellow: 16448210,
  lightgray: 13882323,
  lightgreen: 9498256,
  lightgrey: 13882323,
  lightpink: 16758465,
  lightsalmon: 16752762,
  lightseagreen: 2142890,
  lightskyblue: 8900346,
  lightslategray: 7833753,
  lightslategrey: 7833753,
  lightsteelblue: 11584734,
  lightyellow: 16777184,
  lime: 65280,
  limegreen: 3329330,
  linen: 16445670,
  magenta: 16711935,
  maroon: 8388608,
  mediumaquamarine: 6737322,
  mediumblue: 205,
  mediumorchid: 12211667,
  mediumpurple: 9662683,
  mediumseagreen: 3978097,
  mediumslateblue: 8087790,
  mediumspringgreen: 64154,
  mediumturquoise: 4772300,
  mediumvioletred: 13047173,
  midnightblue: 1644912,
  mintcream: 16121850,
  mistyrose: 16770273,
  moccasin: 16770229,
  navajowhite: 16768685,
  navy: 128,
  oldlace: 16643558,
  olive: 8421376,
  olivedrab: 7048739,
  orange: 16753920,
  orangered: 16729344,
  orchid: 14315734,
  palegoldenrod: 15657130,
  palegreen: 10025880,
  paleturquoise: 11529966,
  palevioletred: 14381203,
  papayawhip: 16773077,
  peachpuff: 16767673,
  peru: 13468991,
  pink: 16761035,
  plum: 14524637,
  powderblue: 11591910,
  purple: 8388736,
  rebeccapurple: 6697881,
  red: 16711680,
  rosybrown: 12357519,
  royalblue: 4286945,
  saddlebrown: 9127187,
  salmon: 16416882,
  sandybrown: 16032864,
  seagreen: 3050327,
  seashell: 16774638,
  sienna: 10506797,
  silver: 12632256,
  skyblue: 8900331,
  slateblue: 6970061,
  slategray: 7372944,
  slategrey: 7372944,
  snow: 16775930,
  springgreen: 65407,
  steelblue: 4620980,
  tan: 13808780,
  teal: 32896,
  thistle: 14204888,
  tomato: 16737095,
  turquoise: 4251856,
  violet: 15631086,
  wheat: 16113331,
  white: 16777215,
  whitesmoke: 16119285,
  yellow: 16776960,
  yellowgreen: 10145074
};
define_default(Color, color, {
  copy(channels) {
    return Object.assign(new this.constructor(), this, channels);
  },
  displayable() {
    return this.rgb().displayable();
  },
  hex: color_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: color_formatHex,
  formatHex8: color_formatHex8,
  formatHsl: color_formatHsl,
  formatRgb: color_formatRgb,
  toString: color_formatRgb
});
function color_formatHex() {
  return this.rgb().formatHex();
}
function color_formatHex8() {
  return this.rgb().formatHex8();
}
function color_formatHsl() {
  return hslConvert(this).formatHsl();
}
function color_formatRgb() {
  return this.rgb().formatRgb();
}
function color(format2) {
  var m5, l5;
  format2 = (format2 + "").trim().toLowerCase();
  return (m5 = reHex.exec(format2)) ? (l5 = m5[1].length, m5 = parseInt(m5[1], 16), l5 === 6 ? rgbn(m5) : l5 === 3 ? new Rgb(m5 >> 8 & 15 | m5 >> 4 & 240, m5 >> 4 & 15 | m5 & 240, (m5 & 15) << 4 | m5 & 15, 1) : l5 === 8 ? rgba2(m5 >> 24 & 255, m5 >> 16 & 255, m5 >> 8 & 255, (m5 & 255) / 255) : l5 === 4 ? rgba2(m5 >> 12 & 15 | m5 >> 8 & 240, m5 >> 8 & 15 | m5 >> 4 & 240, m5 >> 4 & 15 | m5 & 240, ((m5 & 15) << 4 | m5 & 15) / 255) : null) : (m5 = reRgbInteger.exec(format2)) ? new Rgb(m5[1], m5[2], m5[3], 1) : (m5 = reRgbPercent.exec(format2)) ? new Rgb(m5[1] * 255 / 100, m5[2] * 255 / 100, m5[3] * 255 / 100, 1) : (m5 = reRgbaInteger.exec(format2)) ? rgba2(m5[1], m5[2], m5[3], m5[4]) : (m5 = reRgbaPercent.exec(format2)) ? rgba2(m5[1] * 255 / 100, m5[2] * 255 / 100, m5[3] * 255 / 100, m5[4]) : (m5 = reHslPercent.exec(format2)) ? hsla2(m5[1], m5[2] / 100, m5[3] / 100, 1) : (m5 = reHslaPercent.exec(format2)) ? hsla2(m5[1], m5[2] / 100, m5[3] / 100, m5[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
}
function rgbn(n7) {
  return new Rgb(n7 >> 16 & 255, n7 >> 8 & 255, n7 & 255, 1);
}
function rgba2(r7, g4, b5, a5) {
  if (a5 <= 0) r7 = g4 = b5 = NaN;
  return new Rgb(r7, g4, b5, a5);
}
function rgbConvert(o5) {
  if (!(o5 instanceof Color)) o5 = color(o5);
  if (!o5) return new Rgb();
  o5 = o5.rgb();
  return new Rgb(o5.r, o5.g, o5.b, o5.opacity);
}
function rgb2(r7, g4, b5, opacity) {
  return arguments.length === 1 ? rgbConvert(r7) : new Rgb(r7, g4, b5, opacity == null ? 1 : opacity);
}
function Rgb(r7, g4, b5, opacity) {
  this.r = +r7;
  this.g = +g4;
  this.b = +b5;
  this.opacity = +opacity;
}
define_default(Rgb, rgb2, extend(Color, {
  brighter(k5) {
    k5 = k5 == null ? brighter : Math.pow(brighter, k5);
    return new Rgb(this.r * k5, this.g * k5, this.b * k5, this.opacity);
  },
  darker(k5) {
    k5 = k5 == null ? darker : Math.pow(darker, k5);
    return new Rgb(this.r * k5, this.g * k5, this.b * k5, this.opacity);
  },
  rgb() {
    return this;
  },
  clamp() {
    return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
  },
  displayable() {
    return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
  },
  hex: rgb_formatHex,
  // Deprecated! Use color.formatHex.
  formatHex: rgb_formatHex,
  formatHex8: rgb_formatHex8,
  formatRgb: rgb_formatRgb,
  toString: rgb_formatRgb
}));
function rgb_formatHex() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
}
function rgb_formatHex8() {
  return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
}
function rgb_formatRgb() {
  const a5 = clampa(this.opacity);
  return `${a5 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a5 === 1 ? ")" : `, ${a5})`}`;
}
function clampa(opacity) {
  return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
}
function clampi(value) {
  return Math.max(0, Math.min(255, Math.round(value) || 0));
}
function hex(value) {
  value = clampi(value);
  return (value < 16 ? "0" : "") + value.toString(16);
}
function hsla2(h2, s5, l5, a5) {
  if (a5 <= 0) h2 = s5 = l5 = NaN;
  else if (l5 <= 0 || l5 >= 1) h2 = s5 = NaN;
  else if (s5 <= 0) h2 = NaN;
  return new Hsl(h2, s5, l5, a5);
}
function hslConvert(o5) {
  if (o5 instanceof Hsl) return new Hsl(o5.h, o5.s, o5.l, o5.opacity);
  if (!(o5 instanceof Color)) o5 = color(o5);
  if (!o5) return new Hsl();
  if (o5 instanceof Hsl) return o5;
  o5 = o5.rgb();
  var r7 = o5.r / 255, g4 = o5.g / 255, b5 = o5.b / 255, min3 = Math.min(r7, g4, b5), max3 = Math.max(r7, g4, b5), h2 = NaN, s5 = max3 - min3, l5 = (max3 + min3) / 2;
  if (s5) {
    if (r7 === max3) h2 = (g4 - b5) / s5 + (g4 < b5) * 6;
    else if (g4 === max3) h2 = (b5 - r7) / s5 + 2;
    else h2 = (r7 - g4) / s5 + 4;
    s5 /= l5 < 0.5 ? max3 + min3 : 2 - max3 - min3;
    h2 *= 60;
  } else {
    s5 = l5 > 0 && l5 < 1 ? 0 : h2;
  }
  return new Hsl(h2, s5, l5, o5.opacity);
}
function hsl2(h2, s5, l5, opacity) {
  return arguments.length === 1 ? hslConvert(h2) : new Hsl(h2, s5, l5, opacity == null ? 1 : opacity);
}
function Hsl(h2, s5, l5, opacity) {
  this.h = +h2;
  this.s = +s5;
  this.l = +l5;
  this.opacity = +opacity;
}
define_default(Hsl, hsl2, extend(Color, {
  brighter(k5) {
    k5 = k5 == null ? brighter : Math.pow(brighter, k5);
    return new Hsl(this.h, this.s, this.l * k5, this.opacity);
  },
  darker(k5) {
    k5 = k5 == null ? darker : Math.pow(darker, k5);
    return new Hsl(this.h, this.s, this.l * k5, this.opacity);
  },
  rgb() {
    var h2 = this.h % 360 + (this.h < 0) * 360, s5 = isNaN(h2) || isNaN(this.s) ? 0 : this.s, l5 = this.l, m22 = l5 + (l5 < 0.5 ? l5 : 1 - l5) * s5, m1 = 2 * l5 - m22;
    return new Rgb(
      hsl2rgb(h2 >= 240 ? h2 - 240 : h2 + 120, m1, m22),
      hsl2rgb(h2, m1, m22),
      hsl2rgb(h2 < 120 ? h2 + 240 : h2 - 120, m1, m22),
      this.opacity
    );
  },
  clamp() {
    return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
  },
  displayable() {
    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
  },
  formatHsl() {
    const a5 = clampa(this.opacity);
    return `${a5 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a5 === 1 ? ")" : `, ${a5})`}`;
  }
}));
function clamph(value) {
  value = (value || 0) % 360;
  return value < 0 ? value + 360 : value;
}
function clampt(value) {
  return Math.max(0, Math.min(1, value || 0));
}
function hsl2rgb(h2, m1, m22) {
  return (h2 < 60 ? m1 + (m22 - m1) * h2 / 60 : h2 < 180 ? m22 : h2 < 240 ? m1 + (m22 - m1) * (240 - h2) / 60 : m1) * 255;
}

// node_modules/d3-color/src/math.js
var radians = Math.PI / 180;
var degrees = 180 / Math.PI;

// node_modules/d3-color/src/lab.js
var K = 18;
var Xn = 0.96422;
var Yn = 1;
var Zn = 0.82521;
var t0 = 4 / 29;
var t1 = 6 / 29;
var t2 = 3 * t1 * t1;
var t3 = t1 * t1 * t1;
function labConvert(o5) {
  if (o5 instanceof Lab) return new Lab(o5.l, o5.a, o5.b, o5.opacity);
  if (o5 instanceof Hcl) return hcl2lab(o5);
  if (!(o5 instanceof Rgb)) o5 = rgbConvert(o5);
  var r7 = rgb2lrgb(o5.r), g4 = rgb2lrgb(o5.g), b5 = rgb2lrgb(o5.b), y4 = xyz2lab((0.2225045 * r7 + 0.7168786 * g4 + 0.0606169 * b5) / Yn), x4, z6;
  if (r7 === g4 && g4 === b5) x4 = z6 = y4;
  else {
    x4 = xyz2lab((0.4360747 * r7 + 0.3850649 * g4 + 0.1430804 * b5) / Xn);
    z6 = xyz2lab((0.0139322 * r7 + 0.0971045 * g4 + 0.7141733 * b5) / Zn);
  }
  return new Lab(116 * y4 - 16, 500 * (x4 - y4), 200 * (y4 - z6), o5.opacity);
}
function lab(l5, a5, b5, opacity) {
  return arguments.length === 1 ? labConvert(l5) : new Lab(l5, a5, b5, opacity == null ? 1 : opacity);
}
function Lab(l5, a5, b5, opacity) {
  this.l = +l5;
  this.a = +a5;
  this.b = +b5;
  this.opacity = +opacity;
}
define_default(Lab, lab, extend(Color, {
  brighter(k5) {
    return new Lab(this.l + K * (k5 == null ? 1 : k5), this.a, this.b, this.opacity);
  },
  darker(k5) {
    return new Lab(this.l - K * (k5 == null ? 1 : k5), this.a, this.b, this.opacity);
  },
  rgb() {
    var y4 = (this.l + 16) / 116, x4 = isNaN(this.a) ? y4 : y4 + this.a / 500, z6 = isNaN(this.b) ? y4 : y4 - this.b / 200;
    x4 = Xn * lab2xyz(x4);
    y4 = Yn * lab2xyz(y4);
    z6 = Zn * lab2xyz(z6);
    return new Rgb(
      lrgb2rgb(3.1338561 * x4 - 1.6168667 * y4 - 0.4906146 * z6),
      lrgb2rgb(-0.9787684 * x4 + 1.9161415 * y4 + 0.033454 * z6),
      lrgb2rgb(0.0719453 * x4 - 0.2289914 * y4 + 1.4052427 * z6),
      this.opacity
    );
  }
}));
function xyz2lab(t10) {
  return t10 > t3 ? Math.pow(t10, 1 / 3) : t10 / t2 + t0;
}
function lab2xyz(t10) {
  return t10 > t1 ? t10 * t10 * t10 : t2 * (t10 - t0);
}
function lrgb2rgb(x4) {
  return 255 * (x4 <= 31308e-7 ? 12.92 * x4 : 1.055 * Math.pow(x4, 1 / 2.4) - 0.055);
}
function rgb2lrgb(x4) {
  return (x4 /= 255) <= 0.04045 ? x4 / 12.92 : Math.pow((x4 + 0.055) / 1.055, 2.4);
}
function hclConvert(o5) {
  if (o5 instanceof Hcl) return new Hcl(o5.h, o5.c, o5.l, o5.opacity);
  if (!(o5 instanceof Lab)) o5 = labConvert(o5);
  if (o5.a === 0 && o5.b === 0) return new Hcl(NaN, 0 < o5.l && o5.l < 100 ? 0 : NaN, o5.l, o5.opacity);
  var h2 = Math.atan2(o5.b, o5.a) * degrees;
  return new Hcl(h2 < 0 ? h2 + 360 : h2, Math.sqrt(o5.a * o5.a + o5.b * o5.b), o5.l, o5.opacity);
}
function hcl(h2, c9, l5, opacity) {
  return arguments.length === 1 ? hclConvert(h2) : new Hcl(h2, c9, l5, opacity == null ? 1 : opacity);
}
function Hcl(h2, c9, l5, opacity) {
  this.h = +h2;
  this.c = +c9;
  this.l = +l5;
  this.opacity = +opacity;
}
function hcl2lab(o5) {
  if (isNaN(o5.h)) return new Lab(o5.l, 0, 0, o5.opacity);
  var h2 = o5.h * radians;
  return new Lab(o5.l, Math.cos(h2) * o5.c, Math.sin(h2) * o5.c, o5.opacity);
}
define_default(Hcl, hcl, extend(Color, {
  brighter(k5) {
    return new Hcl(this.h, this.c, this.l + K * (k5 == null ? 1 : k5), this.opacity);
  },
  darker(k5) {
    return new Hcl(this.h, this.c, this.l - K * (k5 == null ? 1 : k5), this.opacity);
  },
  rgb() {
    return hcl2lab(this).rgb();
  }
}));

// node_modules/d3-color/src/cubehelix.js
var A2 = -0.14861;
var B = 1.78277;
var C2 = -0.29227;
var D = -0.90649;
var E2 = 1.97294;
var ED = E2 * D;
var EB = E2 * B;
var BC_DA = B * C2 - D * A2;
function cubehelixConvert(o5) {
  if (o5 instanceof Cubehelix) return new Cubehelix(o5.h, o5.s, o5.l, o5.opacity);
  if (!(o5 instanceof Rgb)) o5 = rgbConvert(o5);
  var r7 = o5.r / 255, g4 = o5.g / 255, b5 = o5.b / 255, l5 = (BC_DA * b5 + ED * r7 - EB * g4) / (BC_DA + ED - EB), bl = b5 - l5, k5 = (E2 * (g4 - l5) - C2 * bl) / D, s5 = Math.sqrt(k5 * k5 + bl * bl) / (E2 * l5 * (1 - l5)), h2 = s5 ? Math.atan2(k5, bl) * degrees - 120 : NaN;
  return new Cubehelix(h2 < 0 ? h2 + 360 : h2, s5, l5, o5.opacity);
}
function cubehelix(h2, s5, l5, opacity) {
  return arguments.length === 1 ? cubehelixConvert(h2) : new Cubehelix(h2, s5, l5, opacity == null ? 1 : opacity);
}
function Cubehelix(h2, s5, l5, opacity) {
  this.h = +h2;
  this.s = +s5;
  this.l = +l5;
  this.opacity = +opacity;
}
define_default(Cubehelix, cubehelix, extend(Color, {
  brighter(k5) {
    k5 = k5 == null ? brighter : Math.pow(brighter, k5);
    return new Cubehelix(this.h, this.s, this.l * k5, this.opacity);
  },
  darker(k5) {
    k5 = k5 == null ? darker : Math.pow(darker, k5);
    return new Cubehelix(this.h, this.s, this.l * k5, this.opacity);
  },
  rgb() {
    var h2 = isNaN(this.h) ? 0 : (this.h + 120) * radians, l5 = +this.l, a5 = isNaN(this.s) ? 0 : this.s * l5 * (1 - l5), cosh2 = Math.cos(h2), sinh2 = Math.sin(h2);
    return new Rgb(
      255 * (l5 + a5 * (A2 * cosh2 + B * sinh2)),
      255 * (l5 + a5 * (C2 * cosh2 + D * sinh2)),
      255 * (l5 + a5 * (E2 * cosh2)),
      this.opacity
    );
  }
}));

// node_modules/d3-interpolate/src/basis.js
function basis(t14, v0, v1, v22, v32) {
  var t22 = t14 * t14, t32 = t22 * t14;
  return ((1 - 3 * t14 + 3 * t22 - t32) * v0 + (4 - 6 * t22 + 3 * t32) * v1 + (1 + 3 * t14 + 3 * t22 - 3 * t32) * v22 + t32 * v32) / 6;
}
function basis_default(values) {
  var n7 = values.length - 1;
  return function(t10) {
    var i6 = t10 <= 0 ? t10 = 0 : t10 >= 1 ? (t10 = 1, n7 - 1) : Math.floor(t10 * n7), v1 = values[i6], v22 = values[i6 + 1], v0 = i6 > 0 ? values[i6 - 1] : 2 * v1 - v22, v32 = i6 < n7 - 1 ? values[i6 + 2] : 2 * v22 - v1;
    return basis((t10 - i6 / n7) * n7, v0, v1, v22, v32);
  };
}

// node_modules/d3-interpolate/src/basisClosed.js
function basisClosed_default(values) {
  var n7 = values.length;
  return function(t10) {
    var i6 = Math.floor(((t10 %= 1) < 0 ? ++t10 : t10) * n7), v0 = values[(i6 + n7 - 1) % n7], v1 = values[i6 % n7], v22 = values[(i6 + 1) % n7], v32 = values[(i6 + 2) % n7];
    return basis((t10 - i6 / n7) * n7, v0, v1, v22, v32);
  };
}

// node_modules/d3-interpolate/src/constant.js
var constant_default = (x4) => () => x4;

// node_modules/d3-interpolate/src/color.js
function linear(a5, d3) {
  return function(t10) {
    return a5 + t10 * d3;
  };
}
function exponential(a5, b5, y4) {
  return a5 = Math.pow(a5, y4), b5 = Math.pow(b5, y4) - a5, y4 = 1 / y4, function(t10) {
    return Math.pow(a5 + t10 * b5, y4);
  };
}
function hue(a5, b5) {
  var d3 = b5 - a5;
  return d3 ? linear(a5, d3 > 180 || d3 < -180 ? d3 - 360 * Math.round(d3 / 360) : d3) : constant_default(isNaN(a5) ? b5 : a5);
}
function gamma(y4) {
  return (y4 = +y4) === 1 ? nogamma : function(a5, b5) {
    return b5 - a5 ? exponential(a5, b5, y4) : constant_default(isNaN(a5) ? b5 : a5);
  };
}
function nogamma(a5, b5) {
  var d3 = b5 - a5;
  return d3 ? linear(a5, d3) : constant_default(isNaN(a5) ? b5 : a5);
}

// node_modules/d3-interpolate/src/rgb.js
var rgb_default = function rgbGamma(y4) {
  var color2 = gamma(y4);
  function rgb3(start2, end) {
    var r7 = color2((start2 = rgb2(start2)).r, (end = rgb2(end)).r), g4 = color2(start2.g, end.g), b5 = color2(start2.b, end.b), opacity = nogamma(start2.opacity, end.opacity);
    return function(t10) {
      start2.r = r7(t10);
      start2.g = g4(t10);
      start2.b = b5(t10);
      start2.opacity = opacity(t10);
      return start2 + "";
    };
  }
  rgb3.gamma = rgbGamma;
  return rgb3;
}(1);
function rgbSpline(spline) {
  return function(colors2) {
    var n7 = colors2.length, r7 = new Array(n7), g4 = new Array(n7), b5 = new Array(n7), i6, color2;
    for (i6 = 0; i6 < n7; ++i6) {
      color2 = rgb2(colors2[i6]);
      r7[i6] = color2.r || 0;
      g4[i6] = color2.g || 0;
      b5[i6] = color2.b || 0;
    }
    r7 = spline(r7);
    g4 = spline(g4);
    b5 = spline(b5);
    color2.opacity = 1;
    return function(t10) {
      color2.r = r7(t10);
      color2.g = g4(t10);
      color2.b = b5(t10);
      return color2 + "";
    };
  };
}
var rgbBasis = rgbSpline(basis_default);
var rgbBasisClosed = rgbSpline(basisClosed_default);

// node_modules/d3-interpolate/src/numberArray.js
function numberArray_default(a5, b5) {
  if (!b5) b5 = [];
  var n7 = a5 ? Math.min(b5.length, a5.length) : 0, c9 = b5.slice(), i6;
  return function(t10) {
    for (i6 = 0; i6 < n7; ++i6) c9[i6] = a5[i6] * (1 - t10) + b5[i6] * t10;
    return c9;
  };
}
function isNumberArray(x4) {
  return ArrayBuffer.isView(x4) && !(x4 instanceof DataView);
}

// node_modules/d3-interpolate/src/array.js
function genericArray(a5, b5) {
  var nb = b5 ? b5.length : 0, na = a5 ? Math.min(nb, a5.length) : 0, x4 = new Array(na), c9 = new Array(nb), i6;
  for (i6 = 0; i6 < na; ++i6) x4[i6] = value_default(a5[i6], b5[i6]);
  for (; i6 < nb; ++i6) c9[i6] = b5[i6];
  return function(t10) {
    for (i6 = 0; i6 < na; ++i6) c9[i6] = x4[i6](t10);
    return c9;
  };
}

// node_modules/d3-interpolate/src/date.js
function date_default(a5, b5) {
  var d3 = /* @__PURE__ */ new Date();
  return a5 = +a5, b5 = +b5, function(t10) {
    return d3.setTime(a5 * (1 - t10) + b5 * t10), d3;
  };
}

// node_modules/d3-interpolate/src/number.js
function number_default(a5, b5) {
  return a5 = +a5, b5 = +b5, function(t10) {
    return a5 * (1 - t10) + b5 * t10;
  };
}

// node_modules/d3-interpolate/src/object.js
function object_default(a5, b5) {
  var i6 = {}, c9 = {}, k5;
  if (a5 === null || typeof a5 !== "object") a5 = {};
  if (b5 === null || typeof b5 !== "object") b5 = {};
  for (k5 in b5) {
    if (k5 in a5) {
      i6[k5] = value_default(a5[k5], b5[k5]);
    } else {
      c9[k5] = b5[k5];
    }
  }
  return function(t10) {
    for (k5 in i6) c9[k5] = i6[k5](t10);
    return c9;
  };
}

// node_modules/d3-interpolate/src/string.js
var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
var reB = new RegExp(reA.source, "g");
function zero(b5) {
  return function() {
    return b5;
  };
}
function one(b5) {
  return function(t10) {
    return b5(t10) + "";
  };
}
function string_default(a5, b5) {
  var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i6 = -1, s5 = [], q2 = [];
  a5 = a5 + "", b5 = b5 + "";
  while ((am = reA.exec(a5)) && (bm = reB.exec(b5))) {
    if ((bs = bm.index) > bi) {
      bs = b5.slice(bi, bs);
      if (s5[i6]) s5[i6] += bs;
      else s5[++i6] = bs;
    }
    if ((am = am[0]) === (bm = bm[0])) {
      if (s5[i6]) s5[i6] += bm;
      else s5[++i6] = bm;
    } else {
      s5[++i6] = null;
      q2.push({ i: i6, x: number_default(am, bm) });
    }
    bi = reB.lastIndex;
  }
  if (bi < b5.length) {
    bs = b5.slice(bi);
    if (s5[i6]) s5[i6] += bs;
    else s5[++i6] = bs;
  }
  return s5.length < 2 ? q2[0] ? one(q2[0].x) : zero(b5) : (b5 = q2.length, function(t10) {
    for (var i7 = 0, o5; i7 < b5; ++i7) s5[(o5 = q2[i7]).i] = o5.x(t10);
    return s5.join("");
  });
}

// node_modules/d3-interpolate/src/value.js
function value_default(a5, b5) {
  var t10 = typeof b5, c9;
  return b5 == null || t10 === "boolean" ? constant_default(b5) : (t10 === "number" ? number_default : t10 === "string" ? (c9 = color(b5)) ? (b5 = c9, rgb_default) : string_default : b5 instanceof color ? rgb_default : b5 instanceof Date ? date_default : isNumberArray(b5) ? numberArray_default : Array.isArray(b5) ? genericArray : typeof b5.valueOf !== "function" && typeof b5.toString !== "function" || isNaN(b5) ? object_default : number_default)(a5, b5);
}

// node_modules/d3-interpolate/src/round.js
function round_default(a5, b5) {
  return a5 = +a5, b5 = +b5, function(t10) {
    return Math.round(a5 * (1 - t10) + b5 * t10);
  };
}

// node_modules/d3-interpolate/src/transform/decompose.js
var degrees2 = 180 / Math.PI;
var identity = {
  translateX: 0,
  translateY: 0,
  rotate: 0,
  skewX: 0,
  scaleX: 1,
  scaleY: 1
};
function decompose_default(a5, b5, c9, d3, e11, f3) {
  var scaleX, scaleY, skewX;
  if (scaleX = Math.sqrt(a5 * a5 + b5 * b5)) a5 /= scaleX, b5 /= scaleX;
  if (skewX = a5 * c9 + b5 * d3) c9 -= a5 * skewX, d3 -= b5 * skewX;
  if (scaleY = Math.sqrt(c9 * c9 + d3 * d3)) c9 /= scaleY, d3 /= scaleY, skewX /= scaleY;
  if (a5 * d3 < b5 * c9) a5 = -a5, b5 = -b5, skewX = -skewX, scaleX = -scaleX;
  return {
    translateX: e11,
    translateY: f3,
    rotate: Math.atan2(b5, a5) * degrees2,
    skewX: Math.atan(skewX) * degrees2,
    scaleX,
    scaleY
  };
}

// node_modules/d3-interpolate/src/transform/parse.js
var svgNode;
function parseCss(value) {
  const m5 = new (typeof DOMMatrix === "function" ? DOMMatrix : WebKitCSSMatrix)(value + "");
  return m5.isIdentity ? identity : decompose_default(m5.a, m5.b, m5.c, m5.d, m5.e, m5.f);
}
function parseSvg(value) {
  if (value == null) return identity;
  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
  svgNode.setAttribute("transform", value);
  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
  value = value.matrix;
  return decompose_default(value.a, value.b, value.c, value.d, value.e, value.f);
}

// node_modules/d3-interpolate/src/transform/index.js
function interpolateTransform(parse, pxComma, pxParen, degParen) {
  function pop(s5) {
    return s5.length ? s5.pop() + " " : "";
  }
  function translate(xa, ya, xb, yb, s5, q2) {
    if (xa !== xb || ya !== yb) {
      var i6 = s5.push("translate(", null, pxComma, null, pxParen);
      q2.push({ i: i6 - 4, x: number_default(xa, xb) }, { i: i6 - 2, x: number_default(ya, yb) });
    } else if (xb || yb) {
      s5.push("translate(" + xb + pxComma + yb + pxParen);
    }
  }
  function rotate(a5, b5, s5, q2) {
    if (a5 !== b5) {
      if (a5 - b5 > 180) b5 += 360;
      else if (b5 - a5 > 180) a5 += 360;
      q2.push({ i: s5.push(pop(s5) + "rotate(", null, degParen) - 2, x: number_default(a5, b5) });
    } else if (b5) {
      s5.push(pop(s5) + "rotate(" + b5 + degParen);
    }
  }
  function skewX(a5, b5, s5, q2) {
    if (a5 !== b5) {
      q2.push({ i: s5.push(pop(s5) + "skewX(", null, degParen) - 2, x: number_default(a5, b5) });
    } else if (b5) {
      s5.push(pop(s5) + "skewX(" + b5 + degParen);
    }
  }
  function scale2(xa, ya, xb, yb, s5, q2) {
    if (xa !== xb || ya !== yb) {
      var i6 = s5.push(pop(s5) + "scale(", null, ",", null, ")");
      q2.push({ i: i6 - 4, x: number_default(xa, xb) }, { i: i6 - 2, x: number_default(ya, yb) });
    } else if (xb !== 1 || yb !== 1) {
      s5.push(pop(s5) + "scale(" + xb + "," + yb + ")");
    }
  }
  return function(a5, b5) {
    var s5 = [], q2 = [];
    a5 = parse(a5), b5 = parse(b5);
    translate(a5.translateX, a5.translateY, b5.translateX, b5.translateY, s5, q2);
    rotate(a5.rotate, b5.rotate, s5, q2);
    skewX(a5.skewX, b5.skewX, s5, q2);
    scale2(a5.scaleX, a5.scaleY, b5.scaleX, b5.scaleY, s5, q2);
    a5 = b5 = null;
    return function(t10) {
      var i6 = -1, n7 = q2.length, o5;
      while (++i6 < n7) s5[(o5 = q2[i6]).i] = o5.x(t10);
      return s5.join("");
    };
  };
}
var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

// node_modules/d3-interpolate/src/zoom.js
var epsilon2 = 1e-12;
function cosh(x4) {
  return ((x4 = Math.exp(x4)) + 1 / x4) / 2;
}
function sinh(x4) {
  return ((x4 = Math.exp(x4)) - 1 / x4) / 2;
}
function tanh(x4) {
  return ((x4 = Math.exp(2 * x4)) - 1) / (x4 + 1);
}
var zoom_default = function zoomRho(rho, rho2, rho4) {
  function zoom(p0, p1) {
    var ux0 = p0[0], uy0 = p0[1], w0 = p0[2], ux1 = p1[0], uy1 = p1[1], w1 = p1[2], dx = ux1 - ux0, dy = uy1 - uy0, d22 = dx * dx + dy * dy, i6, S3;
    if (d22 < epsilon2) {
      S3 = Math.log(w1 / w0) / rho;
      i6 = function(t10) {
        return [
          ux0 + t10 * dx,
          uy0 + t10 * dy,
          w0 * Math.exp(rho * t10 * S3)
        ];
      };
    } else {
      var d1 = Math.sqrt(d22), b0 = (w1 * w1 - w0 * w0 + rho4 * d22) / (2 * w0 * rho2 * d1), b1 = (w1 * w1 - w0 * w0 - rho4 * d22) / (2 * w1 * rho2 * d1), r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0), r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
      S3 = (r1 - r0) / rho;
      i6 = function(t10) {
        var s5 = t10 * S3, coshr0 = cosh(r0), u6 = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s5 + r0) - sinh(r0));
        return [
          ux0 + u6 * dx,
          uy0 + u6 * dy,
          w0 * coshr0 / cosh(rho * s5 + r0)
        ];
      };
    }
    i6.duration = S3 * 1e3 * rho / Math.SQRT2;
    return i6;
  }
  zoom.rho = function(_3) {
    var _1 = Math.max(1e-3, +_3), _22 = _1 * _1, _4 = _22 * _22;
    return zoomRho(_1, _22, _4);
  };
  return zoom;
}(Math.SQRT2, 2, 4);

// node_modules/d3-interpolate/src/hsl.js
function hsl3(hue2) {
  return function(start2, end) {
    var h2 = hue2((start2 = hsl2(start2)).h, (end = hsl2(end)).h), s5 = nogamma(start2.s, end.s), l5 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t10) {
      start2.h = h2(t10);
      start2.s = s5(t10);
      start2.l = l5(t10);
      start2.opacity = opacity(t10);
      return start2 + "";
    };
  };
}
var hsl_default = hsl3(hue);
var hslLong = hsl3(nogamma);

// node_modules/d3-interpolate/src/hcl.js
function hcl2(hue2) {
  return function(start2, end) {
    var h2 = hue2((start2 = hcl(start2)).h, (end = hcl(end)).h), c9 = nogamma(start2.c, end.c), l5 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
    return function(t10) {
      start2.h = h2(t10);
      start2.c = c9(t10);
      start2.l = l5(t10);
      start2.opacity = opacity(t10);
      return start2 + "";
    };
  };
}
var hcl_default = hcl2(hue);
var hclLong = hcl2(nogamma);

// node_modules/d3-interpolate/src/cubehelix.js
function cubehelix2(hue2) {
  return function cubehelixGamma(y4) {
    y4 = +y4;
    function cubehelix3(start2, end) {
      var h2 = hue2((start2 = cubehelix(start2)).h, (end = cubehelix(end)).h), s5 = nogamma(start2.s, end.s), l5 = nogamma(start2.l, end.l), opacity = nogamma(start2.opacity, end.opacity);
      return function(t10) {
        start2.h = h2(t10);
        start2.s = s5(t10);
        start2.l = l5(Math.pow(t10, y4));
        start2.opacity = opacity(t10);
        return start2 + "";
      };
    }
    cubehelix3.gamma = cubehelixGamma;
    return cubehelix3;
  }(1);
}
var cubehelix_default = cubehelix2(hue);
var cubehelixLong = cubehelix2(nogamma);

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_isString = __toESM(require_isString());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_last = __toESM(require_last());
var import_isArray = __toESM(require_isArray());

// node_modules/d3-array/src/ascending.js
function ascending(a5, b5) {
  return a5 == null || b5 == null ? NaN : a5 < b5 ? -1 : a5 > b5 ? 1 : a5 >= b5 ? 0 : NaN;
}

// node_modules/d3-array/src/descending.js
function descending(a5, b5) {
  return a5 == null || b5 == null ? NaN : b5 < a5 ? -1 : b5 > a5 ? 1 : b5 >= a5 ? 0 : NaN;
}

// node_modules/d3-array/src/bisector.js
function bisector(f3) {
  let compare1, compare2, delta;
  if (f3.length !== 2) {
    compare1 = ascending;
    compare2 = (d3, x4) => ascending(f3(d3), x4);
    delta = (d3, x4) => f3(d3) - x4;
  } else {
    compare1 = f3 === ascending || f3 === descending ? f3 : zero2;
    compare2 = f3;
    delta = f3;
  }
  function left(a5, x4, lo = 0, hi = a5.length) {
    if (lo < hi) {
      if (compare1(x4, x4) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a5[mid], x4) < 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function right(a5, x4, lo = 0, hi = a5.length) {
    if (lo < hi) {
      if (compare1(x4, x4) !== 0) return hi;
      do {
        const mid = lo + hi >>> 1;
        if (compare2(a5[mid], x4) <= 0) lo = mid + 1;
        else hi = mid;
      } while (lo < hi);
    }
    return lo;
  }
  function center(a5, x4, lo = 0, hi = a5.length) {
    const i6 = left(a5, x4, lo, hi - 1);
    return i6 > lo && delta(a5[i6 - 1], x4) > -delta(a5[i6], x4) ? i6 - 1 : i6;
  }
  return { left, center, right };
}
function zero2() {
  return 0;
}

// node_modules/d3-array/src/number.js
function number(x4) {
  return x4 === null ? NaN : +x4;
}

// node_modules/d3-array/src/bisect.js
var ascendingBisect = bisector(ascending);
var bisectRight = ascendingBisect.right;
var bisectLeft = ascendingBisect.left;
var bisectCenter = bisector(number).center;
var bisect_default = bisectRight;

// node_modules/d3-array/src/blur.js
var blur2 = Blur2(blurf);
var blurImage = Blur2(blurfImage);
function Blur2(blur3) {
  return function(data, rx, ry = rx) {
    if (!((rx = +rx) >= 0)) throw new RangeError("invalid rx");
    if (!((ry = +ry) >= 0)) throw new RangeError("invalid ry");
    let { data: values, width, height } = data;
    if (!((width = Math.floor(width)) >= 0)) throw new RangeError("invalid width");
    if (!((height = Math.floor(height !== void 0 ? height : values.length / width)) >= 0)) throw new RangeError("invalid height");
    if (!width || !height || !rx && !ry) return data;
    const blurx = rx && blur3(rx);
    const blury = ry && blur3(ry);
    const temp = values.slice();
    if (blurx && blury) {
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    } else if (blurx) {
      blurh(blurx, values, temp, width, height);
      blurh(blurx, temp, values, width, height);
      blurh(blurx, values, temp, width, height);
    } else if (blury) {
      blurv(blury, values, temp, width, height);
      blurv(blury, temp, values, width, height);
      blurv(blury, values, temp, width, height);
    }
    return data;
  };
}
function blurh(blur3, T4, S3, w5, h2) {
  for (let y4 = 0, n7 = w5 * h2; y4 < n7; ) {
    blur3(T4, S3, y4, y4 += w5, 1);
  }
}
function blurv(blur3, T4, S3, w5, h2) {
  for (let x4 = 0, n7 = w5 * h2; x4 < w5; ++x4) {
    blur3(T4, S3, x4, x4 + n7, w5);
  }
}
function blurfImage(radius) {
  const blur3 = blurf(radius);
  return (T4, S3, start2, stop2, step) => {
    start2 <<= 2, stop2 <<= 2, step <<= 2;
    blur3(T4, S3, start2 + 0, stop2 + 0, step);
    blur3(T4, S3, start2 + 1, stop2 + 1, step);
    blur3(T4, S3, start2 + 2, stop2 + 2, step);
    blur3(T4, S3, start2 + 3, stop2 + 3, step);
  };
}
function blurf(radius) {
  const radius0 = Math.floor(radius);
  if (radius0 === radius) return bluri(radius);
  const t10 = radius - radius0;
  const w5 = 2 * radius + 1;
  return (T4, S3, start2, stop2, step) => {
    if (!((stop2 -= step) >= start2)) return;
    let sum4 = radius0 * S3[start2];
    const s0 = step * radius0;
    const s1 = s0 + step;
    for (let i6 = start2, j3 = start2 + s0; i6 < j3; i6 += step) {
      sum4 += S3[Math.min(stop2, i6)];
    }
    for (let i6 = start2, j3 = stop2; i6 <= j3; i6 += step) {
      sum4 += S3[Math.min(stop2, i6 + s0)];
      T4[i6] = (sum4 + t10 * (S3[Math.max(start2, i6 - s1)] + S3[Math.min(stop2, i6 + s1)])) / w5;
      sum4 -= S3[Math.max(start2, i6 - s0)];
    }
  };
}
function bluri(radius) {
  const w5 = 2 * radius + 1;
  return (T4, S3, start2, stop2, step) => {
    if (!((stop2 -= step) >= start2)) return;
    let sum4 = radius * S3[start2];
    const s5 = step * radius;
    for (let i6 = start2, j3 = start2 + s5; i6 < j3; i6 += step) {
      sum4 += S3[Math.min(stop2, i6)];
    }
    for (let i6 = start2, j3 = stop2; i6 <= j3; i6 += step) {
      sum4 += S3[Math.min(stop2, i6 + s5)];
      T4[i6] = sum4 / w5;
      sum4 -= S3[Math.max(start2, i6 - s5)];
    }
  };
}

// node_modules/internmap/src/index.js
var InternMap = class extends Map {
  constructor(entries, key = keyof) {
    super();
    Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
    if (entries != null) for (const [key2, value] of entries) this.set(key2, value);
  }
  get(key) {
    return super.get(intern_get(this, key));
  }
  has(key) {
    return super.has(intern_get(this, key));
  }
  set(key, value) {
    return super.set(intern_set(this, key), value);
  }
  delete(key) {
    return super.delete(intern_delete(this, key));
  }
};
function intern_get({ _intern, _key }, value) {
  const key = _key(value);
  return _intern.has(key) ? _intern.get(key) : value;
}
function intern_set({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) return _intern.get(key);
  _intern.set(key, value);
  return value;
}
function intern_delete({ _intern, _key }, value) {
  const key = _key(value);
  if (_intern.has(key)) {
    value = _intern.get(key);
    _intern.delete(key);
  }
  return value;
}
function keyof(value) {
  return value !== null && typeof value === "object" ? value.valueOf() : value;
}

// node_modules/d3-array/src/array.js
var array = Array.prototype;
var slice = array.slice;
var map = array.map;

// node_modules/d3-array/src/ticks.js
var e10 = Math.sqrt(50);
var e5 = Math.sqrt(10);
var e2 = Math.sqrt(2);
function tickSpec(start2, stop2, count2) {
  const step = (stop2 - start2) / Math.max(0, count2), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
  let i1, i22, inc;
  if (power < 0) {
    inc = Math.pow(10, -power) / factor;
    i1 = Math.round(start2 * inc);
    i22 = Math.round(stop2 * inc);
    if (i1 / inc < start2) ++i1;
    if (i22 / inc > stop2) --i22;
    inc = -inc;
  } else {
    inc = Math.pow(10, power) * factor;
    i1 = Math.round(start2 / inc);
    i22 = Math.round(stop2 / inc);
    if (i1 * inc < start2) ++i1;
    if (i22 * inc > stop2) --i22;
  }
  if (i22 < i1 && 0.5 <= count2 && count2 < 2) return tickSpec(start2, stop2, count2 * 2);
  return [i1, i22, inc];
}
function ticks(start2, stop2, count2) {
  stop2 = +stop2, start2 = +start2, count2 = +count2;
  if (!(count2 > 0)) return [];
  if (start2 === stop2) return [start2];
  const reverse2 = stop2 < start2, [i1, i22, inc] = reverse2 ? tickSpec(stop2, start2, count2) : tickSpec(start2, stop2, count2);
  if (!(i22 >= i1)) return [];
  const n7 = i22 - i1 + 1, ticks2 = new Array(n7);
  if (reverse2) {
    if (inc < 0) for (let i6 = 0; i6 < n7; ++i6) ticks2[i6] = (i22 - i6) / -inc;
    else for (let i6 = 0; i6 < n7; ++i6) ticks2[i6] = (i22 - i6) * inc;
  } else {
    if (inc < 0) for (let i6 = 0; i6 < n7; ++i6) ticks2[i6] = (i1 + i6) / -inc;
    else for (let i6 = 0; i6 < n7; ++i6) ticks2[i6] = (i1 + i6) * inc;
  }
  return ticks2;
}
function tickIncrement(start2, stop2, count2) {
  stop2 = +stop2, start2 = +start2, count2 = +count2;
  return tickSpec(start2, stop2, count2)[2];
}
function tickStep(start2, stop2, count2) {
  stop2 = +stop2, start2 = +start2, count2 = +count2;
  const reverse2 = stop2 < start2, inc = reverse2 ? tickIncrement(stop2, start2, count2) : tickIncrement(start2, stop2, count2);
  return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
}

// node_modules/d3-array/src/range.js
function range(start2, stop2, step) {
  start2 = +start2, stop2 = +stop2, step = (n7 = arguments.length) < 2 ? (stop2 = start2, start2 = 0, 1) : n7 < 3 ? 1 : +step;
  var i6 = -1, n7 = Math.max(0, Math.ceil((stop2 - start2) / step)) | 0, range2 = new Array(n7);
  while (++i6 < n7) {
    range2[i6] = start2 + i6 * step;
  }
  return range2;
}

// node_modules/d3-array/src/shuffle.js
var shuffle_default = shuffler(Math.random);
function shuffler(random) {
  return function shuffle(array2, i0 = 0, i1 = array2.length) {
    let m5 = i1 - (i0 = +i0);
    while (m5) {
      const i6 = random() * m5-- | 0, t10 = array2[m5 + i0];
      array2[m5 + i0] = array2[i6 + i0];
      array2[i6 + i0] = t10;
    }
    return array2;
  };
}

// node_modules/d3-scale/src/init.js
function initRange(domain, range2) {
  switch (arguments.length) {
    case 0:
      break;
    case 1:
      this.range(domain);
      break;
    default:
      this.range(range2).domain(domain);
      break;
  }
  return this;
}

// node_modules/d3-scale/src/ordinal.js
var implicit = Symbol("implicit");
function ordinal() {
  var index2 = new InternMap(), domain = [], range2 = [], unknown = implicit;
  function scale2(d3) {
    let i6 = index2.get(d3);
    if (i6 === void 0) {
      if (unknown !== implicit) return unknown;
      index2.set(d3, i6 = domain.push(d3) - 1);
    }
    return range2[i6 % range2.length];
  }
  scale2.domain = function(_3) {
    if (!arguments.length) return domain.slice();
    domain = [], index2 = new InternMap();
    for (const value of _3) {
      if (index2.has(value)) continue;
      index2.set(value, domain.push(value) - 1);
    }
    return scale2;
  };
  scale2.range = function(_3) {
    return arguments.length ? (range2 = Array.from(_3), scale2) : range2.slice();
  };
  scale2.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale2) : unknown;
  };
  scale2.copy = function() {
    return ordinal(domain, range2).unknown(unknown);
  };
  initRange.apply(scale2, arguments);
  return scale2;
}

// node_modules/d3-scale/src/band.js
function band() {
  var scale2 = ordinal().unknown(void 0), domain = scale2.domain, ordinalRange = scale2.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
  delete scale2.unknown;
  function rescale() {
    var n7 = domain().length, reverse2 = r1 < r0, start2 = reverse2 ? r1 : r0, stop2 = reverse2 ? r0 : r1;
    step = (stop2 - start2) / Math.max(1, n7 - paddingInner + paddingOuter * 2);
    if (round) step = Math.floor(step);
    start2 += (stop2 - start2 - step * (n7 - paddingInner)) * align;
    bandwidth = step * (1 - paddingInner);
    if (round) start2 = Math.round(start2), bandwidth = Math.round(bandwidth);
    var values = range(n7).map(function(i6) {
      return start2 + step * i6;
    });
    return ordinalRange(reverse2 ? values.reverse() : values);
  }
  scale2.domain = function(_3) {
    return arguments.length ? (domain(_3), rescale()) : domain();
  };
  scale2.range = function(_3) {
    return arguments.length ? ([r0, r1] = _3, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
  };
  scale2.rangeRound = function(_3) {
    return [r0, r1] = _3, r0 = +r0, r1 = +r1, round = true, rescale();
  };
  scale2.bandwidth = function() {
    return bandwidth;
  };
  scale2.step = function() {
    return step;
  };
  scale2.round = function(_3) {
    return arguments.length ? (round = !!_3, rescale()) : round;
  };
  scale2.padding = function(_3) {
    return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_3), rescale()) : paddingInner;
  };
  scale2.paddingInner = function(_3) {
    return arguments.length ? (paddingInner = Math.min(1, _3), rescale()) : paddingInner;
  };
  scale2.paddingOuter = function(_3) {
    return arguments.length ? (paddingOuter = +_3, rescale()) : paddingOuter;
  };
  scale2.align = function(_3) {
    return arguments.length ? (align = Math.max(0, Math.min(1, _3)), rescale()) : align;
  };
  scale2.copy = function() {
    return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
  };
  return initRange.apply(rescale(), arguments);
}
function pointish(scale2) {
  var copy3 = scale2.copy;
  scale2.padding = scale2.paddingOuter;
  delete scale2.paddingInner;
  delete scale2.paddingOuter;
  scale2.copy = function() {
    return pointish(copy3());
  };
  return scale2;
}
function point() {
  return pointish(band.apply(null, arguments).paddingInner(1));
}

// node_modules/d3-scale/src/constant.js
function constants(x4) {
  return function() {
    return x4;
  };
}

// node_modules/d3-scale/src/number.js
function number2(x4) {
  return +x4;
}

// node_modules/d3-scale/src/continuous.js
var unit = [0, 1];
function identity3(x4) {
  return x4;
}
function normalize(a5, b5) {
  return (b5 -= a5 = +a5) ? function(x4) {
    return (x4 - a5) / b5;
  } : constants(isNaN(b5) ? NaN : 0.5);
}
function clamper(a5, b5) {
  var t10;
  if (a5 > b5) t10 = a5, a5 = b5, b5 = t10;
  return function(x4) {
    return Math.max(a5, Math.min(b5, x4));
  };
}
function bimap(domain, range2, interpolate2) {
  var d0 = domain[0], d1 = domain[1], r0 = range2[0], r1 = range2[1];
  if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
  else d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
  return function(x4) {
    return r0(d0(x4));
  };
}
function polymap(domain, range2, interpolate2) {
  var j3 = Math.min(domain.length, range2.length) - 1, d3 = new Array(j3), r7 = new Array(j3), i6 = -1;
  if (domain[j3] < domain[0]) {
    domain = domain.slice().reverse();
    range2 = range2.slice().reverse();
  }
  while (++i6 < j3) {
    d3[i6] = normalize(domain[i6], domain[i6 + 1]);
    r7[i6] = interpolate2(range2[i6], range2[i6 + 1]);
  }
  return function(x4) {
    var i7 = bisect_default(domain, x4, 1, j3) - 1;
    return r7[i7](d3[i7](x4));
  };
}
function copy(source, target) {
  return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
}
function transformer() {
  var domain = unit, range2 = unit, interpolate2 = value_default, transform, untransform, unknown, clamp = identity3, piecewise2, output, input;
  function rescale() {
    var n7 = Math.min(domain.length, range2.length);
    if (clamp !== identity3) clamp = clamper(domain[0], domain[n7 - 1]);
    piecewise2 = n7 > 2 ? polymap : bimap;
    output = input = null;
    return scale2;
  }
  function scale2(x4) {
    return x4 == null || isNaN(x4 = +x4) ? unknown : (output || (output = piecewise2(domain.map(transform), range2, interpolate2)))(transform(clamp(x4)));
  }
  scale2.invert = function(y4) {
    return clamp(untransform((input || (input = piecewise2(range2, domain.map(transform), number_default)))(y4)));
  };
  scale2.domain = function(_3) {
    return arguments.length ? (domain = Array.from(_3, number2), rescale()) : domain.slice();
  };
  scale2.range = function(_3) {
    return arguments.length ? (range2 = Array.from(_3), rescale()) : range2.slice();
  };
  scale2.rangeRound = function(_3) {
    return range2 = Array.from(_3), interpolate2 = round_default, rescale();
  };
  scale2.clamp = function(_3) {
    return arguments.length ? (clamp = _3 ? true : identity3, rescale()) : clamp !== identity3;
  };
  scale2.interpolate = function(_3) {
    return arguments.length ? (interpolate2 = _3, rescale()) : interpolate2;
  };
  scale2.unknown = function(_3) {
    return arguments.length ? (unknown = _3, scale2) : unknown;
  };
  return function(t10, u6) {
    transform = t10, untransform = u6;
    return rescale();
  };
}
function continuous() {
  return transformer()(identity3, identity3);
}

// node_modules/d3-format/src/formatDecimal.js
function formatDecimal_default(x4) {
  return Math.abs(x4 = Math.round(x4)) >= 1e21 ? x4.toLocaleString("en").replace(/,/g, "") : x4.toString(10);
}
function formatDecimalParts(x4, p4) {
  if ((i6 = (x4 = p4 ? x4.toExponential(p4 - 1) : x4.toExponential()).indexOf("e")) < 0) return null;
  var i6, coefficient = x4.slice(0, i6);
  return [
    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
    +x4.slice(i6 + 1)
  ];
}

// node_modules/d3-format/src/exponent.js
function exponent_default(x4) {
  return x4 = formatDecimalParts(Math.abs(x4)), x4 ? x4[1] : NaN;
}

// node_modules/d3-format/src/formatGroup.js
function formatGroup_default(grouping, thousands) {
  return function(value, width) {
    var i6 = value.length, t10 = [], j3 = 0, g4 = grouping[0], length = 0;
    while (i6 > 0 && g4 > 0) {
      if (length + g4 + 1 > width) g4 = Math.max(1, width - length);
      t10.push(value.substring(i6 -= g4, i6 + g4));
      if ((length += g4 + 1) > width) break;
      g4 = grouping[j3 = (j3 + 1) % grouping.length];
    }
    return t10.reverse().join(thousands);
  };
}

// node_modules/d3-format/src/formatNumerals.js
function formatNumerals_default(numerals) {
  return function(value) {
    return value.replace(/[0-9]/g, function(i6) {
      return numerals[+i6];
    });
  };
}

// node_modules/d3-format/src/formatSpecifier.js
var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
function formatSpecifier(specifier) {
  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
  var match;
  return new FormatSpecifier({
    fill: match[1],
    align: match[2],
    sign: match[3],
    symbol: match[4],
    zero: match[5],
    width: match[6],
    comma: match[7],
    precision: match[8] && match[8].slice(1),
    trim: match[9],
    type: match[10]
  });
}
formatSpecifier.prototype = FormatSpecifier.prototype;
function FormatSpecifier(specifier) {
  this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
  this.align = specifier.align === void 0 ? ">" : specifier.align + "";
  this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
  this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
  this.zero = !!specifier.zero;
  this.width = specifier.width === void 0 ? void 0 : +specifier.width;
  this.comma = !!specifier.comma;
  this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
  this.trim = !!specifier.trim;
  this.type = specifier.type === void 0 ? "" : specifier.type + "";
}
FormatSpecifier.prototype.toString = function() {
  return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
};

// node_modules/d3-format/src/formatTrim.js
function formatTrim_default(s5) {
  out: for (var n7 = s5.length, i6 = 1, i0 = -1, i1; i6 < n7; ++i6) {
    switch (s5[i6]) {
      case ".":
        i0 = i1 = i6;
        break;
      case "0":
        if (i0 === 0) i0 = i6;
        i1 = i6;
        break;
      default:
        if (!+s5[i6]) break out;
        if (i0 > 0) i0 = 0;
        break;
    }
  }
  return i0 > 0 ? s5.slice(0, i0) + s5.slice(i1 + 1) : s5;
}

// node_modules/d3-format/src/formatPrefixAuto.js
var prefixExponent;
function formatPrefixAuto_default(x4, p4) {
  var d3 = formatDecimalParts(x4, p4);
  if (!d3) return x4 + "";
  var coefficient = d3[0], exponent = d3[1], i6 = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n7 = coefficient.length;
  return i6 === n7 ? coefficient : i6 > n7 ? coefficient + new Array(i6 - n7 + 1).join("0") : i6 > 0 ? coefficient.slice(0, i6) + "." + coefficient.slice(i6) : "0." + new Array(1 - i6).join("0") + formatDecimalParts(x4, Math.max(0, p4 + i6 - 1))[0];
}

// node_modules/d3-format/src/formatRounded.js
function formatRounded_default(x4, p4) {
  var d3 = formatDecimalParts(x4, p4);
  if (!d3) return x4 + "";
  var coefficient = d3[0], exponent = d3[1];
  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
}

// node_modules/d3-format/src/formatTypes.js
var formatTypes_default = {
  "%": function(x4, p4) {
    return (x4 * 100).toFixed(p4);
  },
  "b": function(x4) {
    return Math.round(x4).toString(2);
  },
  "c": function(x4) {
    return x4 + "";
  },
  "d": formatDecimal_default,
  "e": function(x4, p4) {
    return x4.toExponential(p4);
  },
  "f": function(x4, p4) {
    return x4.toFixed(p4);
  },
  "g": function(x4, p4) {
    return x4.toPrecision(p4);
  },
  "o": function(x4) {
    return Math.round(x4).toString(8);
  },
  "p": function(x4, p4) {
    return formatRounded_default(x4 * 100, p4);
  },
  "r": formatRounded_default,
  "s": formatPrefixAuto_default,
  "X": function(x4) {
    return Math.round(x4).toString(16).toUpperCase();
  },
  "x": function(x4) {
    return Math.round(x4).toString(16);
  }
};

// node_modules/d3-format/src/identity.js
function identity_default(x4) {
  return x4;
}

// node_modules/d3-format/src/locale.js
var map3 = Array.prototype.map;
var prefixes2 = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
function locale_default(locale3) {
  var group2 = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default : formatGroup_default(map3.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default : formatNumerals_default(map3.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "-" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
  function newFormat(specifier) {
    specifier = formatSpecifier(specifier);
    var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
    if (type === "n") comma = true, type = "g";
    else if (!formatTypes_default[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
    if (zero3 || fill === "0" && align === "=") zero3 = true, fill = "0", align = "=";
    var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
    var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
    precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
    function format2(value) {
      var valuePrefix = prefix2, valueSuffix = suffix, i6, n7, c9;
      if (type === "c") {
        valueSuffix = formatType(value) + valueSuffix;
        value = "";
      } else {
        value = +value;
        var valueNegative = value < 0 || 1 / value < 0;
        value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
        if (trim) value = formatTrim_default(value);
        if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
        valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
        valueSuffix = (type === "s" ? prefixes2[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
        if (maybeSuffix) {
          i6 = -1, n7 = value.length;
          while (++i6 < n7) {
            if (c9 = value.charCodeAt(i6), 48 > c9 || c9 > 57) {
              valueSuffix = (c9 === 46 ? decimal + value.slice(i6 + 1) : value.slice(i6)) + valueSuffix;
              value = value.slice(0, i6);
              break;
            }
          }
        }
      }
      if (comma && !zero3) value = group2(value, Infinity);
      var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
      if (comma && zero3) value = group2(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
      switch (align) {
        case "<":
          value = valuePrefix + value + valueSuffix + padding;
          break;
        case "=":
          value = valuePrefix + padding + value + valueSuffix;
          break;
        case "^":
          value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
          break;
        default:
          value = padding + valuePrefix + value + valueSuffix;
          break;
      }
      return numerals(value);
    }
    format2.toString = function() {
      return specifier + "";
    };
    return format2;
  }
  function formatPrefix2(specifier, value) {
    var f3 = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e11 = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k5 = Math.pow(10, -e11), prefix2 = prefixes2[8 + e11 / 3];
    return function(value2) {
      return f3(k5 * value2) + prefix2;
    };
  }
  return {
    format: newFormat,
    formatPrefix: formatPrefix2
  };
}

// node_modules/d3-format/src/defaultLocale.js
var locale;
var format;
var formatPrefix;
defaultLocale({
  decimal: ".",
  thousands: ",",
  grouping: [3],
  currency: ["$", ""],
  minus: "-"
});
function defaultLocale(definition) {
  locale = locale_default(definition);
  format = locale.format;
  formatPrefix = locale.formatPrefix;
  return locale;
}

// node_modules/d3-format/src/precisionFixed.js
function precisionFixed_default(step) {
  return Math.max(0, -exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionPrefix.js
function precisionPrefix_default(step, value) {
  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
}

// node_modules/d3-format/src/precisionRound.js
function precisionRound_default(step, max3) {
  step = Math.abs(step), max3 = Math.abs(max3) - step;
  return Math.max(0, exponent_default(max3) - exponent_default(step)) + 1;
}

// node_modules/d3-scale/src/tickFormat.js
function tickFormat(start2, stop2, count2, specifier) {
  var step = tickStep(start2, stop2, count2), precision;
  specifier = formatSpecifier(specifier == null ? ",f" : specifier);
  switch (specifier.type) {
    case "s": {
      var value = Math.max(Math.abs(start2), Math.abs(stop2));
      if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value))) specifier.precision = precision;
      return formatPrefix(specifier, value);
    }
    case "":
    case "e":
    case "g":
    case "p":
    case "r": {
      if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start2), Math.abs(stop2))))) specifier.precision = precision - (specifier.type === "e");
      break;
    }
    case "f":
    case "%": {
      if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step))) specifier.precision = precision - (specifier.type === "%") * 2;
      break;
    }
  }
  return format(specifier);
}

// node_modules/d3-scale/src/linear.js
function linearish(scale2) {
  var domain = scale2.domain;
  scale2.ticks = function(count2) {
    var d3 = domain();
    return ticks(d3[0], d3[d3.length - 1], count2 == null ? 10 : count2);
  };
  scale2.tickFormat = function(count2, specifier) {
    var d3 = domain();
    return tickFormat(d3[0], d3[d3.length - 1], count2 == null ? 10 : count2, specifier);
  };
  scale2.nice = function(count2) {
    if (count2 == null) count2 = 10;
    var d3 = domain();
    var i0 = 0;
    var i1 = d3.length - 1;
    var start2 = d3[i0];
    var stop2 = d3[i1];
    var prestep;
    var step;
    var maxIter = 10;
    if (stop2 < start2) {
      step = start2, start2 = stop2, stop2 = step;
      step = i0, i0 = i1, i1 = step;
    }
    while (maxIter-- > 0) {
      step = tickIncrement(start2, stop2, count2);
      if (step === prestep) {
        d3[i0] = start2;
        d3[i1] = stop2;
        return domain(d3);
      } else if (step > 0) {
        start2 = Math.floor(start2 / step) * step;
        stop2 = Math.ceil(stop2 / step) * step;
      } else if (step < 0) {
        start2 = Math.ceil(start2 * step) / step;
        stop2 = Math.floor(stop2 * step) / step;
      } else {
        break;
      }
      prestep = step;
    }
    return scale2;
  };
  return scale2;
}
function linear2() {
  var scale2 = continuous();
  scale2.copy = function() {
    return copy(scale2, linear2());
  };
  initRange.apply(scale2, arguments);
  return linearish(scale2);
}

// node_modules/d3-scale/src/nice.js
function nice2(domain, interval) {
  domain = domain.slice();
  var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t10;
  if (x1 < x0) {
    t10 = i0, i0 = i1, i1 = t10;
    t10 = x0, x0 = x1, x1 = t10;
  }
  domain[i0] = interval.floor(x0);
  domain[i1] = interval.ceil(x1);
  return domain;
}

// node_modules/d3-scale/src/log.js
function transformLog(x4) {
  return Math.log(x4);
}
function transformExp(x4) {
  return Math.exp(x4);
}
function transformLogn(x4) {
  return -Math.log(-x4);
}
function transformExpn(x4) {
  return -Math.exp(-x4);
}
function pow10(x4) {
  return isFinite(x4) ? +("1e" + x4) : x4 < 0 ? 0 : x4;
}
function powp(base) {
  return base === 10 ? pow10 : base === Math.E ? Math.exp : (x4) => Math.pow(base, x4);
}
function logp(base) {
  return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x4) => Math.log(x4) / base);
}
function reflect(f3) {
  return (x4, k5) => -f3(-x4, k5);
}
function loggish(transform) {
  const scale2 = transform(transformLog, transformExp);
  const domain = scale2.domain;
  let base = 10;
  let logs;
  let pows;
  function rescale() {
    logs = logp(base), pows = powp(base);
    if (domain()[0] < 0) {
      logs = reflect(logs), pows = reflect(pows);
      transform(transformLogn, transformExpn);
    } else {
      transform(transformLog, transformExp);
    }
    return scale2;
  }
  scale2.base = function(_3) {
    return arguments.length ? (base = +_3, rescale()) : base;
  };
  scale2.domain = function(_3) {
    return arguments.length ? (domain(_3), rescale()) : domain();
  };
  scale2.ticks = (count2) => {
    const d3 = domain();
    let u6 = d3[0];
    let v6 = d3[d3.length - 1];
    const r7 = v6 < u6;
    if (r7) [u6, v6] = [v6, u6];
    let i6 = logs(u6);
    let j3 = logs(v6);
    let k5;
    let t10;
    const n7 = count2 == null ? 10 : +count2;
    let z6 = [];
    if (!(base % 1) && j3 - i6 < n7) {
      i6 = Math.floor(i6), j3 = Math.ceil(j3);
      if (u6 > 0) for (; i6 <= j3; ++i6) {
        for (k5 = 1; k5 < base; ++k5) {
          t10 = i6 < 0 ? k5 / pows(-i6) : k5 * pows(i6);
          if (t10 < u6) continue;
          if (t10 > v6) break;
          z6.push(t10);
        }
      }
      else for (; i6 <= j3; ++i6) {
        for (k5 = base - 1; k5 >= 1; --k5) {
          t10 = i6 > 0 ? k5 / pows(-i6) : k5 * pows(i6);
          if (t10 < u6) continue;
          if (t10 > v6) break;
          z6.push(t10);
        }
      }
      if (z6.length * 2 < n7) z6 = ticks(u6, v6, n7);
    } else {
      z6 = ticks(i6, j3, Math.min(j3 - i6, n7)).map(pows);
    }
    return r7 ? z6.reverse() : z6;
  };
  scale2.tickFormat = (count2, specifier) => {
    if (count2 == null) count2 = 10;
    if (specifier == null) specifier = base === 10 ? "s" : ",";
    if (typeof specifier !== "function") {
      if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
      specifier = format(specifier);
    }
    if (count2 === Infinity) return specifier;
    const k5 = Math.max(1, base * count2 / scale2.ticks().length);
    return (d3) => {
      let i6 = d3 / pows(Math.round(logs(d3)));
      if (i6 * base < base - 0.5) i6 *= base;
      return i6 <= k5 ? specifier(d3) : "";
    };
  };
  scale2.nice = () => {
    return domain(nice2(domain(), {
      floor: (x4) => pows(Math.floor(logs(x4))),
      ceil: (x4) => pows(Math.ceil(logs(x4)))
    }));
  };
  return scale2;
}
function log() {
  const scale2 = loggish(transformer()).domain([1, 10]);
  scale2.copy = () => copy(scale2, log()).base(scale2.base());
  initRange.apply(scale2, arguments);
  return scale2;
}

// node_modules/d3-scale/src/symlog.js
function transformSymlog(c9) {
  return function(x4) {
    return Math.sign(x4) * Math.log1p(Math.abs(x4 / c9));
  };
}
function transformSymexp(c9) {
  return function(x4) {
    return Math.sign(x4) * Math.expm1(Math.abs(x4)) * c9;
  };
}
function symlogish(transform) {
  var c9 = 1, scale2 = transform(transformSymlog(c9), transformSymexp(c9));
  scale2.constant = function(_3) {
    return arguments.length ? transform(transformSymlog(c9 = +_3), transformSymexp(c9)) : c9;
  };
  return linearish(scale2);
}
function symlog() {
  var scale2 = symlogish(transformer());
  scale2.copy = function() {
    return copy(scale2, symlog()).constant(scale2.constant());
  };
  return initRange.apply(scale2, arguments);
}

// node_modules/d3-scale/node_modules/d3-time/src/interval.js
var t02 = /* @__PURE__ */ new Date();
var t12 = /* @__PURE__ */ new Date();
function timeInterval(floori, offseti, count2, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = (date2) => {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = (date2) => {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = (date2) => {
    const d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = (date2, step) => {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval.range = (start2, stop2, step) => {
    const range2 = [];
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0)) return range2;
    let previous;
    do
      range2.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range2;
  };
  interval.filter = (test) => {
    return timeInterval((date2) => {
      if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
    }, (date2, step) => {
      if (date2 >= date2) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date2, -1), !test(date2)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date2, 1), !test(date2)) {
          }
        }
      }
    });
  };
  if (count2) {
    interval.count = (start2, end) => {
      t02.setTime(+start2), t12.setTime(+end);
      floori(t02), floori(t12);
      return Math.floor(count2(t02, t12));
    };
    interval.every = (step) => {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d3) => field(d3) % step === 0 : (d3) => interval.count(0, d3) % step === 0);
    };
  }
  return interval;
}

// node_modules/d3-scale/node_modules/d3-time/src/millisecond.js
var millisecond = timeInterval(() => {
}, (date2, step) => {
  date2.setTime(+date2 + step);
}, (start2, end) => {
  return end - start2;
});
millisecond.every = (k5) => {
  k5 = Math.floor(k5);
  if (!isFinite(k5) || !(k5 > 0)) return null;
  if (!(k5 > 1)) return millisecond;
  return timeInterval((date2) => {
    date2.setTime(Math.floor(date2 / k5) * k5);
  }, (date2, step) => {
    date2.setTime(+date2 + step * k5);
  }, (start2, end) => {
    return (end - start2) / k5;
  });
};
var milliseconds = millisecond.range;

// node_modules/d3-scale/node_modules/d3-time/src/duration.js
var durationSecond = 1e3;
var durationMinute = durationSecond * 60;
var durationHour = durationMinute * 60;
var durationDay = durationHour * 24;
var durationWeek = durationDay * 7;
var durationMonth = durationDay * 30;
var durationYear = durationDay * 365;

// node_modules/d3-scale/node_modules/d3-time/src/second.js
var second = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds());
}, (date2, step) => {
  date2.setTime(+date2 + step * durationSecond);
}, (start2, end) => {
  return (end - start2) / durationSecond;
}, (date2) => {
  return date2.getUTCSeconds();
});
var seconds = second.range;

// node_modules/d3-scale/node_modules/d3-time/src/minute.js
var timeMinute = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start2, end) => {
  return (end - start2) / durationMinute;
}, (date2) => {
  return date2.getMinutes();
});
var timeMinutes = timeMinute.range;
var utcMinute = timeInterval((date2) => {
  date2.setUTCSeconds(0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationMinute);
}, (start2, end) => {
  return (end - start2) / durationMinute;
}, (date2) => {
  return date2.getUTCMinutes();
});
var utcMinutes = utcMinute.range;

// node_modules/d3-scale/node_modules/d3-time/src/hour.js
var timeHour = timeInterval((date2) => {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start2, end) => {
  return (end - start2) / durationHour;
}, (date2) => {
  return date2.getHours();
});
var timeHours = timeHour.range;
var utcHour = timeInterval((date2) => {
  date2.setUTCMinutes(0, 0, 0);
}, (date2, step) => {
  date2.setTime(+date2 + step * durationHour);
}, (start2, end) => {
  return (end - start2) / durationHour;
}, (date2) => {
  return date2.getUTCHours();
});
var utcHours = utcHour.range;

// node_modules/d3-scale/node_modules/d3-time/src/day.js
var timeDay = timeInterval(
  (date2) => date2.setHours(0, 0, 0, 0),
  (date2, step) => date2.setDate(date2.getDate() + step),
  (start2, end) => (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationDay,
  (date2) => date2.getDate() - 1
);
var timeDays = timeDay.range;
var utcDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start2, end) => {
  return (end - start2) / durationDay;
}, (date2) => {
  return date2.getUTCDate() - 1;
});
var utcDays = utcDay.range;
var unixDay = timeInterval((date2) => {
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCDate(date2.getUTCDate() + step);
}, (start2, end) => {
  return (end - start2) / durationDay;
}, (date2) => {
  return Math.floor(date2 / durationDay);
});
var unixDays = unixDay.range;

// node_modules/d3-scale/node_modules/d3-time/src/week.js
function timeWeekday(i6) {
  return timeInterval((date2) => {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i6) % 7);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setDate(date2.getDate() + step * 7);
  }, (start2, end) => {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute) / durationWeek;
  });
}
var timeSunday = timeWeekday(0);
var timeMonday = timeWeekday(1);
var timeTuesday = timeWeekday(2);
var timeWednesday = timeWeekday(3);
var timeThursday = timeWeekday(4);
var timeFriday = timeWeekday(5);
var timeSaturday = timeWeekday(6);
var timeSundays = timeSunday.range;
var timeMondays = timeMonday.range;
var timeTuesdays = timeTuesday.range;
var timeWednesdays = timeWednesday.range;
var timeThursdays = timeThursday.range;
var timeFridays = timeFriday.range;
var timeSaturdays = timeSaturday.range;
function utcWeekday(i6) {
  return timeInterval((date2) => {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i6) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, (start2, end) => {
    return (end - start2) / durationWeek;
  });
}
var utcSunday = utcWeekday(0);
var utcMonday = utcWeekday(1);
var utcTuesday = utcWeekday(2);
var utcWednesday = utcWeekday(3);
var utcThursday = utcWeekday(4);
var utcFriday = utcWeekday(5);
var utcSaturday = utcWeekday(6);
var utcSundays = utcSunday.range;
var utcMondays = utcMonday.range;
var utcTuesdays = utcTuesday.range;
var utcWednesdays = utcWednesday.range;
var utcThursdays = utcThursday.range;
var utcFridays = utcFriday.range;
var utcSaturdays = utcSaturday.range;

// node_modules/d3-scale/node_modules/d3-time/src/month.js
var timeMonth = timeInterval((date2) => {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setMonth(date2.getMonth() + step);
}, (start2, end) => {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, (date2) => {
  return date2.getMonth();
});
var timeMonths = timeMonth.range;
var utcMonth = timeInterval((date2) => {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, (start2, end) => {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, (date2) => {
  return date2.getUTCMonth();
});
var utcMonths = utcMonth.range;

// node_modules/d3-scale/node_modules/d3-time/src/year.js
var timeYear = timeInterval((date2) => {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setFullYear(date2.getFullYear() + step);
}, (start2, end) => {
  return end.getFullYear() - start2.getFullYear();
}, (date2) => {
  return date2.getFullYear();
});
timeYear.every = (k5) => {
  return !isFinite(k5 = Math.floor(k5)) || !(k5 > 0) ? null : timeInterval((date2) => {
    date2.setFullYear(Math.floor(date2.getFullYear() / k5) * k5);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step * k5);
  });
};
var timeYears = timeYear.range;
var utcYear = timeInterval((date2) => {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, (date2, step) => {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, (start2, end) => {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, (date2) => {
  return date2.getUTCFullYear();
});
utcYear.every = (k5) => {
  return !isFinite(k5 = Math.floor(k5)) || !(k5 > 0) ? null : timeInterval((date2) => {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k5) * k5);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k5);
  });
};
var utcYears = utcYear.range;

// node_modules/d3-scale/node_modules/d3-time/src/ticks.js
function ticker(year2, month2, week, day2, hour2, minute2) {
  const tickIntervals = [
    [second, 1, durationSecond],
    [second, 5, 5 * durationSecond],
    [second, 15, 15 * durationSecond],
    [second, 30, 30 * durationSecond],
    [minute2, 1, durationMinute],
    [minute2, 5, 5 * durationMinute],
    [minute2, 15, 15 * durationMinute],
    [minute2, 30, 30 * durationMinute],
    [hour2, 1, durationHour],
    [hour2, 3, 3 * durationHour],
    [hour2, 6, 6 * durationHour],
    [hour2, 12, 12 * durationHour],
    [day2, 1, durationDay],
    [day2, 2, 2 * durationDay],
    [week, 1, durationWeek],
    [month2, 1, durationMonth],
    [month2, 3, 3 * durationMonth],
    [year2, 1, durationYear]
  ];
  function ticks2(start2, stop2, count2) {
    const reverse2 = stop2 < start2;
    if (reverse2) [start2, stop2] = [stop2, start2];
    const interval = count2 && typeof count2.range === "function" ? count2 : tickInterval(start2, stop2, count2);
    const ticks3 = interval ? interval.range(start2, +stop2 + 1) : [];
    return reverse2 ? ticks3.reverse() : ticks3;
  }
  function tickInterval(start2, stop2, count2) {
    const target = Math.abs(stop2 - start2) / count2;
    const i6 = bisector(([, , step2]) => step2).right(tickIntervals, target);
    if (i6 === tickIntervals.length) return year2.every(tickStep(start2 / durationYear, stop2 / durationYear, count2));
    if (i6 === 0) return millisecond.every(Math.max(tickStep(start2, stop2, count2), 1));
    const [t10, step] = tickIntervals[target / tickIntervals[i6 - 1][2] < tickIntervals[i6][2] / target ? i6 - 1 : i6];
    return t10.every(step);
  }
  return [ticks2, tickInterval];
}
var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

// node_modules/d3-time/src/interval.js
var t03 = /* @__PURE__ */ new Date();
var t13 = /* @__PURE__ */ new Date();
function newInterval(floori, offseti, count2, field) {
  function interval(date2) {
    return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
  }
  interval.floor = function(date2) {
    return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
  };
  interval.ceil = function(date2) {
    return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
  };
  interval.round = function(date2) {
    var d0 = interval(date2), d1 = interval.ceil(date2);
    return date2 - d0 < d1 - date2 ? d0 : d1;
  };
  interval.offset = function(date2, step) {
    return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
  };
  interval.range = function(start2, stop2, step) {
    var range2 = [], previous;
    start2 = interval.ceil(start2);
    step = step == null ? 1 : Math.floor(step);
    if (!(start2 < stop2) || !(step > 0)) return range2;
    do
      range2.push(previous = /* @__PURE__ */ new Date(+start2)), offseti(start2, step), floori(start2);
    while (previous < start2 && start2 < stop2);
    return range2;
  };
  interval.filter = function(test) {
    return newInterval(function(date2) {
      if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
    }, function(date2, step) {
      if (date2 >= date2) {
        if (step < 0) while (++step <= 0) {
          while (offseti(date2, -1), !test(date2)) {
          }
        }
        else while (--step >= 0) {
          while (offseti(date2, 1), !test(date2)) {
          }
        }
      }
    });
  };
  if (count2) {
    interval.count = function(start2, end) {
      t03.setTime(+start2), t13.setTime(+end);
      floori(t03), floori(t13);
      return Math.floor(count2(t03, t13));
    };
    interval.every = function(step) {
      step = Math.floor(step);
      return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function(d3) {
        return field(d3) % step === 0;
      } : function(d3) {
        return interval.count(0, d3) % step === 0;
      });
    };
  }
  return interval;
}

// node_modules/d3-time/src/millisecond.js
var millisecond2 = newInterval(function() {
}, function(date2, step) {
  date2.setTime(+date2 + step);
}, function(start2, end) {
  return end - start2;
});
millisecond2.every = function(k5) {
  k5 = Math.floor(k5);
  if (!isFinite(k5) || !(k5 > 0)) return null;
  if (!(k5 > 1)) return millisecond2;
  return newInterval(function(date2) {
    date2.setTime(Math.floor(date2 / k5) * k5);
  }, function(date2, step) {
    date2.setTime(+date2 + step * k5);
  }, function(start2, end) {
    return (end - start2) / k5;
  });
};
var millisecond_default = millisecond2;
var milliseconds2 = millisecond2.range;

// node_modules/d3-time/src/duration.js
var durationSecond2 = 1e3;
var durationMinute2 = 6e4;
var durationHour2 = 36e5;
var durationDay2 = 864e5;
var durationWeek2 = 6048e5;

// node_modules/d3-time/src/second.js
var second2 = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds());
}, function(date2, step) {
  date2.setTime(+date2 + step * durationSecond2);
}, function(start2, end) {
  return (end - start2) / durationSecond2;
}, function(date2) {
  return date2.getUTCSeconds();
});
var second_default = second2;
var seconds2 = second2.range;

// node_modules/d3-time/src/minute.js
var minute = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond2);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date2) {
  return date2.getMinutes();
});
var minute_default = minute;
var minutes = minute.range;

// node_modules/d3-time/src/hour.js
var hour = newInterval(function(date2) {
  date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond2 - date2.getMinutes() * durationMinute2);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date2) {
  return date2.getHours();
});
var hour_default = hour;
var hours = hour.range;

// node_modules/d3-time/src/day.js
var day = newInterval(function(date2) {
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setDate(date2.getDate() + step);
}, function(start2, end) {
  return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationDay2;
}, function(date2) {
  return date2.getDate() - 1;
});
var day_default = day;
var days = day.range;

// node_modules/d3-time/src/week.js
function weekday(i6) {
  return newInterval(function(date2) {
    date2.setDate(date2.getDate() - (date2.getDay() + 7 - i6) % 7);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setDate(date2.getDate() + step * 7);
  }, function(start2, end) {
    return (end - start2 - (end.getTimezoneOffset() - start2.getTimezoneOffset()) * durationMinute2) / durationWeek2;
  });
}
var sunday = weekday(0);
var monday = weekday(1);
var tuesday = weekday(2);
var wednesday = weekday(3);
var thursday = weekday(4);
var friday = weekday(5);
var saturday = weekday(6);
var sundays = sunday.range;
var mondays = monday.range;
var tuesdays = tuesday.range;
var wednesdays = wednesday.range;
var thursdays = thursday.range;
var fridays = friday.range;
var saturdays = saturday.range;

// node_modules/d3-time/src/month.js
var month = newInterval(function(date2) {
  date2.setDate(1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setMonth(date2.getMonth() + step);
}, function(start2, end) {
  return end.getMonth() - start2.getMonth() + (end.getFullYear() - start2.getFullYear()) * 12;
}, function(date2) {
  return date2.getMonth();
});
var month_default = month;
var months = month.range;

// node_modules/d3-time/src/year.js
var year = newInterval(function(date2) {
  date2.setMonth(0, 1);
  date2.setHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setFullYear(date2.getFullYear() + step);
}, function(start2, end) {
  return end.getFullYear() - start2.getFullYear();
}, function(date2) {
  return date2.getFullYear();
});
year.every = function(k5) {
  return !isFinite(k5 = Math.floor(k5)) || !(k5 > 0) ? null : newInterval(function(date2) {
    date2.setFullYear(Math.floor(date2.getFullYear() / k5) * k5);
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setFullYear(date2.getFullYear() + step * k5);
  });
};
var year_default = year;
var years = year.range;

// node_modules/d3-time/src/utcMinute.js
var utcMinute2 = newInterval(function(date2) {
  date2.setUTCSeconds(0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationMinute2);
}, function(start2, end) {
  return (end - start2) / durationMinute2;
}, function(date2) {
  return date2.getUTCMinutes();
});
var utcMinute_default = utcMinute2;
var utcMinutes2 = utcMinute2.range;

// node_modules/d3-time/src/utcHour.js
var utcHour2 = newInterval(function(date2) {
  date2.setUTCMinutes(0, 0, 0);
}, function(date2, step) {
  date2.setTime(+date2 + step * durationHour2);
}, function(start2, end) {
  return (end - start2) / durationHour2;
}, function(date2) {
  return date2.getUTCHours();
});
var utcHour_default = utcHour2;
var utcHours2 = utcHour2.range;

// node_modules/d3-time/src/utcDay.js
var utcDay2 = newInterval(function(date2) {
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCDate(date2.getUTCDate() + step);
}, function(start2, end) {
  return (end - start2) / durationDay2;
}, function(date2) {
  return date2.getUTCDate() - 1;
});
var utcDay_default = utcDay2;
var utcDays2 = utcDay2.range;

// node_modules/d3-time/src/utcWeek.js
function utcWeekday2(i6) {
  return newInterval(function(date2) {
    date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i6) % 7);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCDate(date2.getUTCDate() + step * 7);
  }, function(start2, end) {
    return (end - start2) / durationWeek2;
  });
}
var utcSunday2 = utcWeekday2(0);
var utcMonday2 = utcWeekday2(1);
var utcTuesday2 = utcWeekday2(2);
var utcWednesday2 = utcWeekday2(3);
var utcThursday2 = utcWeekday2(4);
var utcFriday2 = utcWeekday2(5);
var utcSaturday2 = utcWeekday2(6);
var utcSundays2 = utcSunday2.range;
var utcMondays2 = utcMonday2.range;
var utcTuesdays2 = utcTuesday2.range;
var utcWednesdays2 = utcWednesday2.range;
var utcThursdays2 = utcThursday2.range;
var utcFridays2 = utcFriday2.range;
var utcSaturdays2 = utcSaturday2.range;

// node_modules/d3-time/src/utcMonth.js
var utcMonth2 = newInterval(function(date2) {
  date2.setUTCDate(1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCMonth(date2.getUTCMonth() + step);
}, function(start2, end) {
  return end.getUTCMonth() - start2.getUTCMonth() + (end.getUTCFullYear() - start2.getUTCFullYear()) * 12;
}, function(date2) {
  return date2.getUTCMonth();
});
var utcMonth_default = utcMonth2;
var utcMonths2 = utcMonth2.range;

// node_modules/d3-time/src/utcYear.js
var utcYear2 = newInterval(function(date2) {
  date2.setUTCMonth(0, 1);
  date2.setUTCHours(0, 0, 0, 0);
}, function(date2, step) {
  date2.setUTCFullYear(date2.getUTCFullYear() + step);
}, function(start2, end) {
  return end.getUTCFullYear() - start2.getUTCFullYear();
}, function(date2) {
  return date2.getUTCFullYear();
});
utcYear2.every = function(k5) {
  return !isFinite(k5 = Math.floor(k5)) || !(k5 > 0) ? null : newInterval(function(date2) {
    date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k5) * k5);
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, function(date2, step) {
    date2.setUTCFullYear(date2.getUTCFullYear() + step * k5);
  });
};
var utcYear_default = utcYear2;
var utcYears2 = utcYear2.range;

// node_modules/d3-time-format/src/locale.js
function localDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date2 = new Date(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
    date2.setFullYear(d3.y);
    return date2;
  }
  return new Date(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L);
}
function utcDate(d3) {
  if (0 <= d3.y && d3.y < 100) {
    var date2 = new Date(Date.UTC(-1, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
    date2.setUTCFullYear(d3.y);
    return date2;
  }
  return new Date(Date.UTC(d3.y, d3.m, d3.d, d3.H, d3.M, d3.S, d3.L));
}
function newDate(y4, m5, d3) {
  return { y: y4, m: m5, d: d3, H: 0, M: 0, S: 0, L: 0 };
}
function formatLocale(locale3) {
  var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
  var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
  var formats = {
    "a": formatShortWeekday,
    "A": formatWeekday,
    "b": formatShortMonth,
    "B": formatMonth,
    "c": null,
    "d": formatDayOfMonth,
    "e": formatDayOfMonth,
    "f": formatMicroseconds,
    "g": formatYearISO,
    "G": formatFullYearISO,
    "H": formatHour24,
    "I": formatHour12,
    "j": formatDayOfYear,
    "L": formatMilliseconds,
    "m": formatMonthNumber,
    "M": formatMinutes,
    "p": formatPeriod,
    "q": formatQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatSeconds,
    "u": formatWeekdayNumberMonday,
    "U": formatWeekNumberSunday,
    "V": formatWeekNumberISO,
    "w": formatWeekdayNumberSunday,
    "W": formatWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatYear,
    "Y": formatFullYear,
    "Z": formatZone,
    "%": formatLiteralPercent
  };
  var utcFormats = {
    "a": formatUTCShortWeekday,
    "A": formatUTCWeekday,
    "b": formatUTCShortMonth,
    "B": formatUTCMonth,
    "c": null,
    "d": formatUTCDayOfMonth,
    "e": formatUTCDayOfMonth,
    "f": formatUTCMicroseconds,
    "g": formatUTCYearISO,
    "G": formatUTCFullYearISO,
    "H": formatUTCHour24,
    "I": formatUTCHour12,
    "j": formatUTCDayOfYear,
    "L": formatUTCMilliseconds,
    "m": formatUTCMonthNumber,
    "M": formatUTCMinutes,
    "p": formatUTCPeriod,
    "q": formatUTCQuarter,
    "Q": formatUnixTimestamp,
    "s": formatUnixTimestampSeconds,
    "S": formatUTCSeconds,
    "u": formatUTCWeekdayNumberMonday,
    "U": formatUTCWeekNumberSunday,
    "V": formatUTCWeekNumberISO,
    "w": formatUTCWeekdayNumberSunday,
    "W": formatUTCWeekNumberMonday,
    "x": null,
    "X": null,
    "y": formatUTCYear,
    "Y": formatUTCFullYear,
    "Z": formatUTCZone,
    "%": formatLiteralPercent
  };
  var parses = {
    "a": parseShortWeekday,
    "A": parseWeekday,
    "b": parseShortMonth,
    "B": parseMonth,
    "c": parseLocaleDateTime,
    "d": parseDayOfMonth,
    "e": parseDayOfMonth,
    "f": parseMicroseconds,
    "g": parseYear,
    "G": parseFullYear,
    "H": parseHour24,
    "I": parseHour24,
    "j": parseDayOfYear,
    "L": parseMilliseconds,
    "m": parseMonthNumber,
    "M": parseMinutes,
    "p": parsePeriod,
    "q": parseQuarter,
    "Q": parseUnixTimestamp,
    "s": parseUnixTimestampSeconds,
    "S": parseSeconds,
    "u": parseWeekdayNumberMonday,
    "U": parseWeekNumberSunday,
    "V": parseWeekNumberISO,
    "w": parseWeekdayNumberSunday,
    "W": parseWeekNumberMonday,
    "x": parseLocaleDate,
    "X": parseLocaleTime,
    "y": parseYear,
    "Y": parseFullYear,
    "Z": parseZone,
    "%": parseLiteralPercent
  };
  formats.x = newFormat(locale_date, formats);
  formats.X = newFormat(locale_time, formats);
  formats.c = newFormat(locale_dateTime, formats);
  utcFormats.x = newFormat(locale_date, utcFormats);
  utcFormats.X = newFormat(locale_time, utcFormats);
  utcFormats.c = newFormat(locale_dateTime, utcFormats);
  function newFormat(specifier, formats2) {
    return function(date2) {
      var string = [], i6 = -1, j3 = 0, n7 = specifier.length, c9, pad2, format2;
      if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
      while (++i6 < n7) {
        if (specifier.charCodeAt(i6) === 37) {
          string.push(specifier.slice(j3, i6));
          if ((pad2 = pads[c9 = specifier.charAt(++i6)]) != null) c9 = specifier.charAt(++i6);
          else pad2 = c9 === "e" ? " " : "0";
          if (format2 = formats2[c9]) c9 = format2(date2, pad2);
          string.push(c9);
          j3 = i6 + 1;
        }
      }
      string.push(specifier.slice(j3, i6));
      return string.join("");
    };
  }
  function newParse(specifier, Z2) {
    return function(string) {
      var d3 = newDate(1900, void 0, 1), i6 = parseSpecifier(d3, specifier, string += "", 0), week, day2;
      if (i6 != string.length) return null;
      if ("Q" in d3) return new Date(d3.Q);
      if ("s" in d3) return new Date(d3.s * 1e3 + ("L" in d3 ? d3.L : 0));
      if (Z2 && !("Z" in d3)) d3.Z = 0;
      if ("p" in d3) d3.H = d3.H % 12 + d3.p * 12;
      if (d3.m === void 0) d3.m = "q" in d3 ? d3.q : 0;
      if ("V" in d3) {
        if (d3.V < 1 || d3.V > 53) return null;
        if (!("w" in d3)) d3.w = 1;
        if ("Z" in d3) {
          week = utcDate(newDate(d3.y, 0, 1)), day2 = week.getUTCDay();
          week = day2 > 4 || day2 === 0 ? utcMonday2.ceil(week) : utcMonday2(week);
          week = utcDay_default.offset(week, (d3.V - 1) * 7);
          d3.y = week.getUTCFullYear();
          d3.m = week.getUTCMonth();
          d3.d = week.getUTCDate() + (d3.w + 6) % 7;
        } else {
          week = localDate(newDate(d3.y, 0, 1)), day2 = week.getDay();
          week = day2 > 4 || day2 === 0 ? monday.ceil(week) : monday(week);
          week = day_default.offset(week, (d3.V - 1) * 7);
          d3.y = week.getFullYear();
          d3.m = week.getMonth();
          d3.d = week.getDate() + (d3.w + 6) % 7;
        }
      } else if ("W" in d3 || "U" in d3) {
        if (!("w" in d3)) d3.w = "u" in d3 ? d3.u % 7 : "W" in d3 ? 1 : 0;
        day2 = "Z" in d3 ? utcDate(newDate(d3.y, 0, 1)).getUTCDay() : localDate(newDate(d3.y, 0, 1)).getDay();
        d3.m = 0;
        d3.d = "W" in d3 ? (d3.w + 6) % 7 + d3.W * 7 - (day2 + 5) % 7 : d3.w + d3.U * 7 - (day2 + 6) % 7;
      }
      if ("Z" in d3) {
        d3.H += d3.Z / 100 | 0;
        d3.M += d3.Z % 100;
        return utcDate(d3);
      }
      return localDate(d3);
    };
  }
  function parseSpecifier(d3, specifier, string, j3) {
    var i6 = 0, n7 = specifier.length, m5 = string.length, c9, parse;
    while (i6 < n7) {
      if (j3 >= m5) return -1;
      c9 = specifier.charCodeAt(i6++);
      if (c9 === 37) {
        c9 = specifier.charAt(i6++);
        parse = parses[c9 in pads ? specifier.charAt(i6++) : c9];
        if (!parse || (j3 = parse(d3, string, j3)) < 0) return -1;
      } else if (c9 != string.charCodeAt(j3++)) {
        return -1;
      }
    }
    return j3;
  }
  function parsePeriod(d3, string, i6) {
    var n7 = periodRe.exec(string.slice(i6));
    return n7 ? (d3.p = periodLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortWeekday(d3, string, i6) {
    var n7 = shortWeekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = shortWeekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseWeekday(d3, string, i6) {
    var n7 = weekdayRe.exec(string.slice(i6));
    return n7 ? (d3.w = weekdayLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseShortMonth(d3, string, i6) {
    var n7 = shortMonthRe.exec(string.slice(i6));
    return n7 ? (d3.m = shortMonthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseMonth(d3, string, i6) {
    var n7 = monthRe.exec(string.slice(i6));
    return n7 ? (d3.m = monthLookup.get(n7[0].toLowerCase()), i6 + n7[0].length) : -1;
  }
  function parseLocaleDateTime(d3, string, i6) {
    return parseSpecifier(d3, locale_dateTime, string, i6);
  }
  function parseLocaleDate(d3, string, i6) {
    return parseSpecifier(d3, locale_date, string, i6);
  }
  function parseLocaleTime(d3, string, i6) {
    return parseSpecifier(d3, locale_time, string, i6);
  }
  function formatShortWeekday(d3) {
    return locale_shortWeekdays[d3.getDay()];
  }
  function formatWeekday(d3) {
    return locale_weekdays[d3.getDay()];
  }
  function formatShortMonth(d3) {
    return locale_shortMonths[d3.getMonth()];
  }
  function formatMonth(d3) {
    return locale_months[d3.getMonth()];
  }
  function formatPeriod(d3) {
    return locale_periods[+(d3.getHours() >= 12)];
  }
  function formatQuarter(d3) {
    return 1 + ~~(d3.getMonth() / 3);
  }
  function formatUTCShortWeekday(d3) {
    return locale_shortWeekdays[d3.getUTCDay()];
  }
  function formatUTCWeekday(d3) {
    return locale_weekdays[d3.getUTCDay()];
  }
  function formatUTCShortMonth(d3) {
    return locale_shortMonths[d3.getUTCMonth()];
  }
  function formatUTCMonth(d3) {
    return locale_months[d3.getUTCMonth()];
  }
  function formatUTCPeriod(d3) {
    return locale_periods[+(d3.getUTCHours() >= 12)];
  }
  function formatUTCQuarter(d3) {
    return 1 + ~~(d3.getUTCMonth() / 3);
  }
  return {
    format: function(specifier) {
      var f3 = newFormat(specifier += "", formats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    parse: function(specifier) {
      var p4 = newParse(specifier += "", false);
      p4.toString = function() {
        return specifier;
      };
      return p4;
    },
    utcFormat: function(specifier) {
      var f3 = newFormat(specifier += "", utcFormats);
      f3.toString = function() {
        return specifier;
      };
      return f3;
    },
    utcParse: function(specifier) {
      var p4 = newParse(specifier += "", true);
      p4.toString = function() {
        return specifier;
      };
      return p4;
    }
  };
}
var pads = { "-": "", "_": " ", "0": "0" };
var numberRe = /^\s*\d+/;
var percentRe = /^%/;
var requoteRe = /[\\^$*+?|[\]().{}]/g;
function pad(value, fill, width) {
  var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
  return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
}
function requote(s5) {
  return s5.replace(requoteRe, "\\$&");
}
function formatRe(names) {
  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
}
function formatLookup(names) {
  return new Map(names.map((name, i6) => [name.toLowerCase(), i6]));
}
function parseWeekdayNumberSunday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.w = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekdayNumberMonday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.u = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberSunday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.U = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberISO(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.V = +n7[0], i6 + n7[0].length) : -1;
}
function parseWeekNumberMonday(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.W = +n7[0], i6 + n7[0].length) : -1;
}
function parseFullYear(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 4));
  return n7 ? (d3.y = +n7[0], i6 + n7[0].length) : -1;
}
function parseYear(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.y = +n7[0] + (+n7[0] > 68 ? 1900 : 2e3), i6 + n7[0].length) : -1;
}
function parseZone(d3, string, i6) {
  var n7 = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.Z = n7[1] ? 0 : -(n7[2] + (n7[3] || "00")), i6 + n7[0].length) : -1;
}
function parseQuarter(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 1));
  return n7 ? (d3.q = n7[0] * 3 - 3, i6 + n7[0].length) : -1;
}
function parseMonthNumber(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.m = n7[0] - 1, i6 + n7[0].length) : -1;
}
function parseDayOfMonth(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseDayOfYear(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.m = 0, d3.d = +n7[0], i6 + n7[0].length) : -1;
}
function parseHour24(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.H = +n7[0], i6 + n7[0].length) : -1;
}
function parseMinutes(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.M = +n7[0], i6 + n7[0].length) : -1;
}
function parseSeconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 2));
  return n7 ? (d3.S = +n7[0], i6 + n7[0].length) : -1;
}
function parseMilliseconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 3));
  return n7 ? (d3.L = +n7[0], i6 + n7[0].length) : -1;
}
function parseMicroseconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6, i6 + 6));
  return n7 ? (d3.L = Math.floor(n7[0] / 1e3), i6 + n7[0].length) : -1;
}
function parseLiteralPercent(d3, string, i6) {
  var n7 = percentRe.exec(string.slice(i6, i6 + 1));
  return n7 ? i6 + n7[0].length : -1;
}
function parseUnixTimestamp(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6));
  return n7 ? (d3.Q = +n7[0], i6 + n7[0].length) : -1;
}
function parseUnixTimestampSeconds(d3, string, i6) {
  var n7 = numberRe.exec(string.slice(i6));
  return n7 ? (d3.s = +n7[0], i6 + n7[0].length) : -1;
}
function formatDayOfMonth(d3, p4) {
  return pad(d3.getDate(), p4, 2);
}
function formatHour24(d3, p4) {
  return pad(d3.getHours(), p4, 2);
}
function formatHour12(d3, p4) {
  return pad(d3.getHours() % 12 || 12, p4, 2);
}
function formatDayOfYear(d3, p4) {
  return pad(1 + day_default.count(year_default(d3), d3), p4, 3);
}
function formatMilliseconds(d3, p4) {
  return pad(d3.getMilliseconds(), p4, 3);
}
function formatMicroseconds(d3, p4) {
  return formatMilliseconds(d3, p4) + "000";
}
function formatMonthNumber(d3, p4) {
  return pad(d3.getMonth() + 1, p4, 2);
}
function formatMinutes(d3, p4) {
  return pad(d3.getMinutes(), p4, 2);
}
function formatSeconds(d3, p4) {
  return pad(d3.getSeconds(), p4, 2);
}
function formatWeekdayNumberMonday(d3) {
  var day2 = d3.getDay();
  return day2 === 0 ? 7 : day2;
}
function formatWeekNumberSunday(d3, p4) {
  return pad(sunday.count(year_default(d3) - 1, d3), p4, 2);
}
function dISO(d3) {
  var day2 = d3.getDay();
  return day2 >= 4 || day2 === 0 ? thursday(d3) : thursday.ceil(d3);
}
function formatWeekNumberISO(d3, p4) {
  d3 = dISO(d3);
  return pad(thursday.count(year_default(d3), d3) + (year_default(d3).getDay() === 4), p4, 2);
}
function formatWeekdayNumberSunday(d3) {
  return d3.getDay();
}
function formatWeekNumberMonday(d3, p4) {
  return pad(monday.count(year_default(d3) - 1, d3), p4, 2);
}
function formatYear(d3, p4) {
  return pad(d3.getFullYear() % 100, p4, 2);
}
function formatYearISO(d3, p4) {
  d3 = dISO(d3);
  return pad(d3.getFullYear() % 100, p4, 2);
}
function formatFullYear(d3, p4) {
  return pad(d3.getFullYear() % 1e4, p4, 4);
}
function formatFullYearISO(d3, p4) {
  var day2 = d3.getDay();
  d3 = day2 >= 4 || day2 === 0 ? thursday(d3) : thursday.ceil(d3);
  return pad(d3.getFullYear() % 1e4, p4, 4);
}
function formatZone(d3) {
  var z6 = d3.getTimezoneOffset();
  return (z6 > 0 ? "-" : (z6 *= -1, "+")) + pad(z6 / 60 | 0, "0", 2) + pad(z6 % 60, "0", 2);
}
function formatUTCDayOfMonth(d3, p4) {
  return pad(d3.getUTCDate(), p4, 2);
}
function formatUTCHour24(d3, p4) {
  return pad(d3.getUTCHours(), p4, 2);
}
function formatUTCHour12(d3, p4) {
  return pad(d3.getUTCHours() % 12 || 12, p4, 2);
}
function formatUTCDayOfYear(d3, p4) {
  return pad(1 + utcDay_default.count(utcYear_default(d3), d3), p4, 3);
}
function formatUTCMilliseconds(d3, p4) {
  return pad(d3.getUTCMilliseconds(), p4, 3);
}
function formatUTCMicroseconds(d3, p4) {
  return formatUTCMilliseconds(d3, p4) + "000";
}
function formatUTCMonthNumber(d3, p4) {
  return pad(d3.getUTCMonth() + 1, p4, 2);
}
function formatUTCMinutes(d3, p4) {
  return pad(d3.getUTCMinutes(), p4, 2);
}
function formatUTCSeconds(d3, p4) {
  return pad(d3.getUTCSeconds(), p4, 2);
}
function formatUTCWeekdayNumberMonday(d3) {
  var dow = d3.getUTCDay();
  return dow === 0 ? 7 : dow;
}
function formatUTCWeekNumberSunday(d3, p4) {
  return pad(utcSunday2.count(utcYear_default(d3) - 1, d3), p4, 2);
}
function UTCdISO(d3) {
  var day2 = d3.getUTCDay();
  return day2 >= 4 || day2 === 0 ? utcThursday2(d3) : utcThursday2.ceil(d3);
}
function formatUTCWeekNumberISO(d3, p4) {
  d3 = UTCdISO(d3);
  return pad(utcThursday2.count(utcYear_default(d3), d3) + (utcYear_default(d3).getUTCDay() === 4), p4, 2);
}
function formatUTCWeekdayNumberSunday(d3) {
  return d3.getUTCDay();
}
function formatUTCWeekNumberMonday(d3, p4) {
  return pad(utcMonday2.count(utcYear_default(d3) - 1, d3), p4, 2);
}
function formatUTCYear(d3, p4) {
  return pad(d3.getUTCFullYear() % 100, p4, 2);
}
function formatUTCYearISO(d3, p4) {
  d3 = UTCdISO(d3);
  return pad(d3.getUTCFullYear() % 100, p4, 2);
}
function formatUTCFullYear(d3, p4) {
  return pad(d3.getUTCFullYear() % 1e4, p4, 4);
}
function formatUTCFullYearISO(d3, p4) {
  var day2 = d3.getUTCDay();
  d3 = day2 >= 4 || day2 === 0 ? utcThursday2(d3) : utcThursday2.ceil(d3);
  return pad(d3.getUTCFullYear() % 1e4, p4, 4);
}
function formatUTCZone() {
  return "+0000";
}
function formatLiteralPercent() {
  return "%";
}
function formatUnixTimestamp(d3) {
  return +d3;
}
function formatUnixTimestampSeconds(d3) {
  return Math.floor(+d3 / 1e3);
}

// node_modules/d3-time-format/src/defaultLocale.js
var locale2;
var timeFormat;
var timeParse;
var utcFormat;
var utcParse;
defaultLocale2({
  dateTime: "%x, %X",
  date: "%-m/%-d/%Y",
  time: "%-I:%M:%S %p",
  periods: ["AM", "PM"],
  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
});
function defaultLocale2(definition) {
  locale2 = formatLocale(definition);
  timeFormat = locale2.format;
  timeParse = locale2.parse;
  utcFormat = locale2.utcFormat;
  utcParse = locale2.utcParse;
  return locale2;
}

// node_modules/d3-time-format/src/isoFormat.js
var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
function formatIsoNative(date2) {
  return date2.toISOString();
}
var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

// node_modules/d3-time-format/src/isoParse.js
function parseIsoNative(string) {
  var date2 = new Date(string);
  return isNaN(date2) ? null : date2;
}
var parseIso = +/* @__PURE__ */ new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

// node_modules/d3-scale/src/time.js
function date(t10) {
  return new Date(t10);
}
function number3(t10) {
  return t10 instanceof Date ? +t10 : +/* @__PURE__ */ new Date(+t10);
}
function calendar(ticks2, tickInterval, year2, month2, week, day2, hour2, minute2, second3, format2) {
  var scale2 = continuous(), invert = scale2.invert, domain = scale2.domain;
  var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
  function tickFormat2(date2) {
    return (second3(date2) < date2 ? formatMillisecond : minute2(date2) < date2 ? formatSecond : hour2(date2) < date2 ? formatMinute : day2(date2) < date2 ? formatHour : month2(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year2(date2) < date2 ? formatMonth : formatYear2)(date2);
  }
  scale2.invert = function(y4) {
    return new Date(invert(y4));
  };
  scale2.domain = function(_3) {
    return arguments.length ? domain(Array.from(_3, number3)) : domain().map(date);
  };
  scale2.ticks = function(interval) {
    var d3 = domain();
    return ticks2(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
  };
  scale2.tickFormat = function(count2, specifier) {
    return specifier == null ? tickFormat2 : format2(specifier);
  };
  scale2.nice = function(interval) {
    var d3 = domain();
    if (!interval || typeof interval.range !== "function") interval = tickInterval(d3[0], d3[d3.length - 1], interval == null ? 10 : interval);
    return interval ? domain(nice2(d3, interval)) : scale2;
  };
  scale2.copy = function() {
    return copy(scale2, calendar(ticks2, tickInterval, year2, month2, week, day2, hour2, minute2, second3, format2));
  };
  return scale2;
}
function time() {
  return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
}

// node_modules/d3-scale/src/utcTime.js
function utcTime() {
  return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
}

// node_modules/d3-scale-chromatic/src/colors.js
function colors_default(specifier) {
  var n7 = specifier.length / 6 | 0, colors2 = new Array(n7), i6 = 0;
  while (i6 < n7) colors2[i6] = "#" + specifier.slice(i6 * 6, ++i6 * 6);
  return colors2;
}

// node_modules/d3-scale-chromatic/src/categorical/category10.js
var category10_default = colors_default("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

// node_modules/d3-scale-chromatic/src/categorical/Accent.js
var Accent_default = colors_default("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

// node_modules/d3-scale-chromatic/src/categorical/Dark2.js
var Dark2_default = colors_default("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

// node_modules/d3-scale-chromatic/src/categorical/observable10.js
var observable10_default = colors_default("4269d0efb118ff725c6cc5b03ca951ff8ab7a463f297bbf59c6b4e9498a0");

// node_modules/d3-scale-chromatic/src/categorical/Paired.js
var Paired_default = colors_default("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

// node_modules/d3-scale-chromatic/src/categorical/Pastel1.js
var Pastel1_default = colors_default("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

// node_modules/d3-scale-chromatic/src/categorical/Pastel2.js
var Pastel2_default = colors_default("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

// node_modules/d3-scale-chromatic/src/categorical/Set1.js
var Set1_default = colors_default("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

// node_modules/d3-scale-chromatic/src/categorical/Set2.js
var Set2_default = colors_default("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

// node_modules/d3-scale-chromatic/src/categorical/Set3.js
var Set3_default = colors_default("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

// node_modules/d3-scale-chromatic/src/categorical/Tableau10.js
var Tableau10_default = colors_default("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");

// node_modules/d3-scale-chromatic/src/ramp.js
var ramp_default = (scheme28) => rgbBasis(scheme28[scheme28.length - 1]);

// node_modules/d3-scale-chromatic/src/diverging/BrBG.js
var scheme = new Array(3).concat(
  "d8b365f5f5f55ab4ac",
  "a6611adfc27d80cdc1018571",
  "a6611adfc27df5f5f580cdc1018571",
  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
).map(colors_default);
var BrBG_default = ramp_default(scheme);

// node_modules/d3-scale-chromatic/src/diverging/PRGn.js
var scheme2 = new Array(3).concat(
  "af8dc3f7f7f77fbf7b",
  "7b3294c2a5cfa6dba0008837",
  "7b3294c2a5cff7f7f7a6dba0008837",
  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
).map(colors_default);
var PRGn_default = ramp_default(scheme2);

// node_modules/d3-scale-chromatic/src/diverging/PiYG.js
var scheme3 = new Array(3).concat(
  "e9a3c9f7f7f7a1d76a",
  "d01c8bf1b6dab8e1864dac26",
  "d01c8bf1b6daf7f7f7b8e1864dac26",
  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
).map(colors_default);
var PiYG_default = ramp_default(scheme3);

// node_modules/d3-scale-chromatic/src/diverging/PuOr.js
var scheme4 = new Array(3).concat(
  "998ec3f7f7f7f1a340",
  "5e3c99b2abd2fdb863e66101",
  "5e3c99b2abd2f7f7f7fdb863e66101",
  "542788998ec3d8daebfee0b6f1a340b35806",
  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
).map(colors_default);
var PuOr_default = ramp_default(scheme4);

// node_modules/d3-scale-chromatic/src/diverging/RdBu.js
var scheme5 = new Array(3).concat(
  "ef8a62f7f7f767a9cf",
  "ca0020f4a58292c5de0571b0",
  "ca0020f4a582f7f7f792c5de0571b0",
  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
).map(colors_default);
var RdBu_default = ramp_default(scheme5);

// node_modules/d3-scale-chromatic/src/diverging/RdGy.js
var scheme6 = new Array(3).concat(
  "ef8a62ffffff999999",
  "ca0020f4a582bababa404040",
  "ca0020f4a582ffffffbababa404040",
  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
).map(colors_default);
var RdGy_default = ramp_default(scheme6);

// node_modules/d3-scale-chromatic/src/diverging/RdYlBu.js
var scheme7 = new Array(3).concat(
  "fc8d59ffffbf91bfdb",
  "d7191cfdae61abd9e92c7bb6",
  "d7191cfdae61ffffbfabd9e92c7bb6",
  "d73027fc8d59fee090e0f3f891bfdb4575b4",
  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
).map(colors_default);
var RdYlBu_default = ramp_default(scheme7);

// node_modules/d3-scale-chromatic/src/diverging/RdYlGn.js
var scheme8 = new Array(3).concat(
  "fc8d59ffffbf91cf60",
  "d7191cfdae61a6d96a1a9641",
  "d7191cfdae61ffffbfa6d96a1a9641",
  "d73027fc8d59fee08bd9ef8b91cf601a9850",
  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
).map(colors_default);
var RdYlGn_default = ramp_default(scheme8);

// node_modules/d3-scale-chromatic/src/diverging/Spectral.js
var scheme9 = new Array(3).concat(
  "fc8d59ffffbf99d594",
  "d7191cfdae61abdda42b83ba",
  "d7191cfdae61ffffbfabdda42b83ba",
  "d53e4ffc8d59fee08be6f59899d5943288bd",
  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
).map(colors_default);
var Spectral_default = ramp_default(scheme9);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuGn.js
var scheme10 = new Array(3).concat(
  "e5f5f999d8c92ca25f",
  "edf8fbb2e2e266c2a4238b45",
  "edf8fbb2e2e266c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a42ca25f006d2c",
  "edf8fbccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
).map(colors_default);
var BuGn_default = ramp_default(scheme10);

// node_modules/d3-scale-chromatic/src/sequential-multi/BuPu.js
var scheme11 = new Array(3).concat(
  "e0ecf49ebcda8856a7",
  "edf8fbb3cde38c96c688419d",
  "edf8fbb3cde38c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
).map(colors_default);
var BuPu_default = ramp_default(scheme11);

// node_modules/d3-scale-chromatic/src/sequential-multi/GnBu.js
var scheme12 = new Array(3).concat(
  "e0f3dba8ddb543a2ca",
  "f0f9e8bae4bc7bccc42b8cbe",
  "f0f9e8bae4bc7bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
).map(colors_default);
var GnBu_default = ramp_default(scheme12);

// node_modules/d3-scale-chromatic/src/sequential-multi/OrRd.js
var scheme13 = new Array(3).concat(
  "fee8c8fdbb84e34a33",
  "fef0d9fdcc8afc8d59d7301f",
  "fef0d9fdcc8afc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
).map(colors_default);
var OrRd_default = ramp_default(scheme13);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBuGn.js
var scheme14 = new Array(3).concat(
  "ece2f0a6bddb1c9099",
  "f6eff7bdc9e167a9cf02818a",
  "f6eff7bdc9e167a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
).map(colors_default);
var PuBuGn_default = ramp_default(scheme14);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuBu.js
var scheme15 = new Array(3).concat(
  "ece7f2a6bddb2b8cbe",
  "f1eef6bdc9e174a9cf0570b0",
  "f1eef6bdc9e174a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
).map(colors_default);
var PuBu_default = ramp_default(scheme15);

// node_modules/d3-scale-chromatic/src/sequential-multi/PuRd.js
var scheme16 = new Array(3).concat(
  "e7e1efc994c7dd1c77",
  "f1eef6d7b5d8df65b0ce1256",
  "f1eef6d7b5d8df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0dd1c77980043",
  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
).map(colors_default);
var PuRd_default = ramp_default(scheme16);

// node_modules/d3-scale-chromatic/src/sequential-multi/RdPu.js
var scheme17 = new Array(3).concat(
  "fde0ddfa9fb5c51b8a",
  "feebe2fbb4b9f768a1ae017e",
  "feebe2fbb4b9f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
).map(colors_default);
var RdPu_default = ramp_default(scheme17);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGnBu.js
var scheme18 = new Array(3).concat(
  "edf8b17fcdbb2c7fb8",
  "ffffcca1dab441b6c4225ea8",
  "ffffcca1dab441b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
).map(colors_default);
var YlGnBu_default = ramp_default(scheme18);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlGn.js
var scheme19 = new Array(3).concat(
  "f7fcb9addd8e31a354",
  "ffffccc2e69978c679238443",
  "ffffccc2e69978c67931a354006837",
  "ffffccd9f0a3addd8e78c67931a354006837",
  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
).map(colors_default);
var YlGn_default = ramp_default(scheme19);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrBr.js
var scheme20 = new Array(3).concat(
  "fff7bcfec44fd95f0e",
  "ffffd4fed98efe9929cc4c02",
  "ffffd4fed98efe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929d95f0e993404",
  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
).map(colors_default);
var YlOrBr_default = ramp_default(scheme20);

// node_modules/d3-scale-chromatic/src/sequential-multi/YlOrRd.js
var scheme21 = new Array(3).concat(
  "ffeda0feb24cf03b20",
  "ffffb2fecc5cfd8d3ce31a1c",
  "ffffb2fecc5cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
).map(colors_default);
var YlOrRd_default = ramp_default(scheme21);

// node_modules/d3-scale-chromatic/src/sequential-single/Blues.js
var scheme22 = new Array(3).concat(
  "deebf79ecae13182bd",
  "eff3ffbdd7e76baed62171b5",
  "eff3ffbdd7e76baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed63182bd08519c",
  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
).map(colors_default);
var Blues_default = ramp_default(scheme22);

// node_modules/d3-scale-chromatic/src/sequential-single/Greens.js
var scheme23 = new Array(3).concat(
  "e5f5e0a1d99b31a354",
  "edf8e9bae4b374c476238b45",
  "edf8e9bae4b374c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
).map(colors_default);
var Greens_default = ramp_default(scheme23);

// node_modules/d3-scale-chromatic/src/sequential-single/Greys.js
var scheme24 = new Array(3).concat(
  "f0f0f0bdbdbd636363",
  "f7f7f7cccccc969696525252",
  "f7f7f7cccccc969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696636363252525",
  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
).map(colors_default);
var Greys_default = ramp_default(scheme24);

// node_modules/d3-scale-chromatic/src/sequential-single/Purples.js
var scheme25 = new Array(3).concat(
  "efedf5bcbddc756bb1",
  "f2f0f7cbc9e29e9ac86a51a3",
  "f2f0f7cbc9e29e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
).map(colors_default);
var Purples_default = ramp_default(scheme25);

// node_modules/d3-scale-chromatic/src/sequential-single/Reds.js
var scheme26 = new Array(3).concat(
  "fee0d2fc9272de2d26",
  "fee5d9fcae91fb6a4acb181d",
  "fee5d9fcae91fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
).map(colors_default);
var Reds_default = ramp_default(scheme26);

// node_modules/d3-scale-chromatic/src/sequential-single/Oranges.js
var scheme27 = new Array(3).concat(
  "fee6cefdae6be6550d",
  "feeddefdbe85fd8d3cd94701",
  "feeddefdbe85fd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
).map(colors_default);
var Oranges_default = ramp_default(scheme27);

// node_modules/d3-scale-chromatic/src/sequential-multi/cividis.js
function cividis_default(t10) {
  t10 = Math.max(0, Math.min(1, t10));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(-4.54 - t10 * (35.34 - t10 * (2381.73 - t10 * (6402.7 - t10 * (7024.72 - t10 * 2710.57))))))) + ", " + Math.max(0, Math.min(255, Math.round(32.49 + t10 * (170.73 + t10 * (52.82 - t10 * (131.46 - t10 * (176.58 - t10 * 67.37))))))) + ", " + Math.max(0, Math.min(255, Math.round(81.24 + t10 * (442.36 - t10 * (2482.43 - t10 * (6167.24 - t10 * (6614.94 - t10 * 2475.67))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/cubehelix.js
var cubehelix_default2 = cubehelixLong(cubehelix(300, 0.5, 0), cubehelix(-240, 0.5, 1));

// node_modules/d3-scale-chromatic/src/sequential-multi/rainbow.js
var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8));
var c = cubehelix();
function rainbow_default(t10) {
  if (t10 < 0 || t10 > 1) t10 -= Math.floor(t10);
  var ts2 = Math.abs(t10 - 0.5);
  c.h = 360 * t10 - 100;
  c.s = 1.5 - 1.5 * ts2;
  c.l = 0.8 - 0.9 * ts2;
  return c + "";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/sinebow.js
var c6 = rgb2();
var pi_1_3 = Math.PI / 3;
var pi_2_3 = Math.PI * 2 / 3;
function sinebow_default(t10) {
  var x4;
  t10 = (0.5 - t10) * Math.PI;
  c6.r = 255 * (x4 = Math.sin(t10)) * x4;
  c6.g = 255 * (x4 = Math.sin(t10 + pi_1_3)) * x4;
  c6.b = 255 * (x4 = Math.sin(t10 + pi_2_3)) * x4;
  return c6 + "";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/turbo.js
function turbo_default(t10) {
  t10 = Math.max(0, Math.min(1, t10));
  return "rgb(" + Math.max(0, Math.min(255, Math.round(34.61 + t10 * (1172.33 - t10 * (10793.56 - t10 * (33300.12 - t10 * (38394.49 - t10 * 14825.05))))))) + ", " + Math.max(0, Math.min(255, Math.round(23.31 + t10 * (557.33 + t10 * (1225.33 - t10 * (3574.96 - t10 * (1073.77 + t10 * 707.56))))))) + ", " + Math.max(0, Math.min(255, Math.round(27.2 + t10 * (3211.1 - t10 * (15327.97 - t10 * (27814 - t10 * (22569.18 - t10 * 6838.66))))))) + ")";
}

// node_modules/d3-scale-chromatic/src/sequential-multi/viridis.js
function ramp(range2) {
  var n7 = range2.length;
  return function(t10) {
    return range2[Math.max(0, Math.min(n7 - 1, Math.floor(t10 * n7)))];
  };
}
var viridis_default = ramp(colors_default("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
var magma = ramp(colors_default("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
var inferno = ramp(colors_default("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
var plasma = ramp(colors_default("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_isFunction = __toESM(require_isFunction());
var import_without = __toESM(require_without());

// node_modules/d3-shape/src/constant.js
function constant_default2(x4) {
  return function constant2() {
    return x4;
  };
}

// node_modules/d3-shape/src/math.js
var cos = Math.cos;
var sin = Math.sin;
var sqrt2 = Math.sqrt;
var epsilon = 1e-12;
var pi = Math.PI;
var halfPi = pi / 2;
var tau = 2 * pi;

// node_modules/d3-path/src/path.js
var pi2 = Math.PI;
var tau2 = 2 * pi2;
var epsilon3 = 1e-6;
var tauEpsilon = tau2 - epsilon3;
function append(strings) {
  this._ += strings[0];
  for (let i6 = 1, n7 = strings.length; i6 < n7; ++i6) {
    this._ += arguments[i6] + strings[i6];
  }
}
function appendRound(digits) {
  let d3 = Math.floor(digits);
  if (!(d3 >= 0)) throw new Error(`invalid digits: ${digits}`);
  if (d3 > 15) return append;
  const k5 = 10 ** d3;
  return function(strings) {
    this._ += strings[0];
    for (let i6 = 1, n7 = strings.length; i6 < n7; ++i6) {
      this._ += Math.round(arguments[i6] * k5) / k5 + strings[i6];
    }
  };
}
var Path = class {
  constructor(digits) {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
    this._append = digits == null ? append : appendRound(digits);
  }
  moveTo(x4, y4) {
    this._append`M${this._x0 = this._x1 = +x4},${this._y0 = this._y1 = +y4}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._append`Z`;
    }
  }
  lineTo(x4, y4) {
    this._append`L${this._x1 = +x4},${this._y1 = +y4}`;
  }
  quadraticCurveTo(x1, y1, x4, y4) {
    this._append`Q${+x1},${+y1},${this._x1 = +x4},${this._y1 = +y4}`;
  }
  bezierCurveTo(x1, y1, x22, y22, x4, y4) {
    this._append`C${+x1},${+y1},${+x22},${+y22},${this._x1 = +x4},${this._y1 = +y4}`;
  }
  arcTo(x1, y1, x22, y22, r7) {
    x1 = +x1, y1 = +y1, x22 = +x22, y22 = +y22, r7 = +r7;
    if (r7 < 0) throw new Error(`negative radius: ${r7}`);
    let x0 = this._x1, y0 = this._y1, x21 = x22 - x1, y21 = y22 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
    if (this._x1 === null) {
      this._append`M${this._x1 = x1},${this._y1 = y1}`;
    } else if (!(l01_2 > epsilon3)) ;
    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon3) || !r7) {
      this._append`L${this._x1 = x1},${this._y1 = y1}`;
    } else {
      let x20 = x22 - x0, y20 = y22 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l5 = r7 * Math.tan((pi2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l5 / l01, t21 = l5 / l21;
      if (Math.abs(t01 - 1) > epsilon3) {
        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
      }
      this._append`A${r7},${r7},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
    }
  }
  arc(x4, y4, r7, a0, a1, ccw) {
    x4 = +x4, y4 = +y4, r7 = +r7, ccw = !!ccw;
    if (r7 < 0) throw new Error(`negative radius: ${r7}`);
    let dx = r7 * Math.cos(a0), dy = r7 * Math.sin(a0), x0 = x4 + dx, y0 = y4 + dy, cw = 1 ^ ccw, da2 = ccw ? a0 - a1 : a1 - a0;
    if (this._x1 === null) {
      this._append`M${x0},${y0}`;
    } else if (Math.abs(this._x1 - x0) > epsilon3 || Math.abs(this._y1 - y0) > epsilon3) {
      this._append`L${x0},${y0}`;
    }
    if (!r7) return;
    if (da2 < 0) da2 = da2 % tau2 + tau2;
    if (da2 > tauEpsilon) {
      this._append`A${r7},${r7},0,1,${cw},${x4 - dx},${y4 - dy}A${r7},${r7},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
    } else if (da2 > epsilon3) {
      this._append`A${r7},${r7},0,${+(da2 >= pi2)},${cw},${this._x1 = x4 + r7 * Math.cos(a1)},${this._y1 = y4 + r7 * Math.sin(a1)}`;
    }
  }
  rect(x4, y4, w5, h2) {
    this._append`M${this._x0 = this._x1 = +x4},${this._y0 = this._y1 = +y4}h${w5 = +w5}v${+h2}h${-w5}Z`;
  }
  toString() {
    return this._;
  }
};
function path() {
  return new Path();
}
path.prototype = Path.prototype;

// node_modules/d3-shape/src/path.js
function withPath(shape) {
  let digits = 3;
  shape.digits = function(_3) {
    if (!arguments.length) return digits;
    if (_3 == null) {
      digits = null;
    } else {
      const d3 = Math.floor(_3);
      if (!(d3 >= 0)) throw new RangeError(`invalid digits: ${_3}`);
      digits = d3;
    }
    return shape;
  };
  return () => new Path(digits);
}

// node_modules/d3-shape/src/array.js
var slice2 = Array.prototype.slice;
function array_default2(x4) {
  return typeof x4 === "object" && "length" in x4 ? x4 : Array.from(x4);
}

// node_modules/d3-shape/src/curve/linear.js
function Linear(context) {
  this._context = context;
}
Linear.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
      default:
        this._context.lineTo(x4, y4);
        break;
    }
  }
};
function linear_default(context) {
  return new Linear(context);
}

// node_modules/d3-shape/src/point.js
function x2(p4) {
  return p4[0];
}
function y2(p4) {
  return p4[1];
}

// node_modules/d3-shape/src/line.js
function line_default(x4, y4) {
  var defined = constant_default2(true), context = null, curve = linear_default, output = null, path2 = withPath(line);
  x4 = typeof x4 === "function" ? x4 : x4 === void 0 ? x2 : constant_default2(x4);
  y4 = typeof y4 === "function" ? y4 : y4 === void 0 ? y2 : constant_default2(y4);
  function line(data) {
    var i6, n7 = (data = array_default2(data)).length, d3, defined0 = false, buffer;
    if (context == null) output = curve(buffer = path2());
    for (i6 = 0; i6 <= n7; ++i6) {
      if (!(i6 < n7 && defined(d3 = data[i6], i6, data)) === defined0) {
        if (defined0 = !defined0) output.lineStart();
        else output.lineEnd();
      }
      if (defined0) output.point(+x4(d3, i6, data), +y4(d3, i6, data));
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  line.x = function(_3) {
    return arguments.length ? (x4 = typeof _3 === "function" ? _3 : constant_default2(+_3), line) : x4;
  };
  line.y = function(_3) {
    return arguments.length ? (y4 = typeof _3 === "function" ? _3 : constant_default2(+_3), line) : y4;
  };
  line.defined = function(_3) {
    return arguments.length ? (defined = typeof _3 === "function" ? _3 : constant_default2(!!_3), line) : defined;
  };
  line.curve = function(_3) {
    return arguments.length ? (curve = _3, context != null && (output = curve(context)), line) : curve;
  };
  line.context = function(_3) {
    return arguments.length ? (_3 == null ? context = output = null : output = curve(context = _3), line) : context;
  };
  return line;
}

// node_modules/d3-shape/src/area.js
function area_default(x0, y0, y1) {
  var x1 = null, defined = constant_default2(true), context = null, curve = linear_default, output = null, path2 = withPath(area);
  x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x2 : constant_default2(+x0);
  y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default2(0) : constant_default2(+y0);
  y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y2 : constant_default2(+y1);
  function area(data) {
    var i6, j3, k5, n7 = (data = array_default2(data)).length, d3, defined0 = false, buffer, x0z = new Array(n7), y0z = new Array(n7);
    if (context == null) output = curve(buffer = path2());
    for (i6 = 0; i6 <= n7; ++i6) {
      if (!(i6 < n7 && defined(d3 = data[i6], i6, data)) === defined0) {
        if (defined0 = !defined0) {
          j3 = i6;
          output.areaStart();
          output.lineStart();
        } else {
          output.lineEnd();
          output.lineStart();
          for (k5 = i6 - 1; k5 >= j3; --k5) {
            output.point(x0z[k5], y0z[k5]);
          }
          output.lineEnd();
          output.areaEnd();
        }
      }
      if (defined0) {
        x0z[i6] = +x0(d3, i6, data), y0z[i6] = +y0(d3, i6, data);
        output.point(x1 ? +x1(d3, i6, data) : x0z[i6], y1 ? +y1(d3, i6, data) : y0z[i6]);
      }
    }
    if (buffer) return output = null, buffer + "" || null;
  }
  function arealine() {
    return line_default().defined(defined).curve(curve).context(context);
  }
  area.x = function(_3) {
    return arguments.length ? (x0 = typeof _3 === "function" ? _3 : constant_default2(+_3), x1 = null, area) : x0;
  };
  area.x0 = function(_3) {
    return arguments.length ? (x0 = typeof _3 === "function" ? _3 : constant_default2(+_3), area) : x0;
  };
  area.x1 = function(_3) {
    return arguments.length ? (x1 = _3 == null ? null : typeof _3 === "function" ? _3 : constant_default2(+_3), area) : x1;
  };
  area.y = function(_3) {
    return arguments.length ? (y0 = typeof _3 === "function" ? _3 : constant_default2(+_3), y1 = null, area) : y0;
  };
  area.y0 = function(_3) {
    return arguments.length ? (y0 = typeof _3 === "function" ? _3 : constant_default2(+_3), area) : y0;
  };
  area.y1 = function(_3) {
    return arguments.length ? (y1 = _3 == null ? null : typeof _3 === "function" ? _3 : constant_default2(+_3), area) : y1;
  };
  area.lineX0 = area.lineY0 = function() {
    return arealine().x(x0).y(y0);
  };
  area.lineY1 = function() {
    return arealine().x(x0).y(y1);
  };
  area.lineX1 = function() {
    return arealine().x(x1).y(y0);
  };
  area.defined = function(_3) {
    return arguments.length ? (defined = typeof _3 === "function" ? _3 : constant_default2(!!_3), area) : defined;
  };
  area.curve = function(_3) {
    return arguments.length ? (curve = _3, context != null && (output = curve(context)), area) : curve;
  };
  area.context = function(_3) {
    return arguments.length ? (_3 == null ? context = output = null : output = curve(context = _3), area) : context;
  };
  return area;
}

// node_modules/d3-shape/src/curve/radial.js
var curveRadialLinear = curveRadial(linear_default);
function Radial(curve) {
  this._curve = curve;
}
Radial.prototype = {
  areaStart: function() {
    this._curve.areaStart();
  },
  areaEnd: function() {
    this._curve.areaEnd();
  },
  lineStart: function() {
    this._curve.lineStart();
  },
  lineEnd: function() {
    this._curve.lineEnd();
  },
  point: function(a5, r7) {
    this._curve.point(r7 * Math.sin(a5), r7 * -Math.cos(a5));
  }
};
function curveRadial(curve) {
  function radial2(context) {
    return new Radial(curve(context));
  }
  radial2._curve = curve;
  return radial2;
}

// node_modules/d3-shape/src/symbol/asterisk.js
var sqrt3 = sqrt2(3);

// node_modules/d3-shape/src/symbol/diamond.js
var tan30 = sqrt2(1 / 3);
var tan30_2 = tan30 * 2;

// node_modules/d3-shape/src/symbol/star.js
var kr = sin(pi / 10) / sin(7 * pi / 10);
var kx = sin(tau / 10) * kr;
var ky = -cos(tau / 10) * kr;

// node_modules/d3-shape/src/symbol/triangle.js
var sqrt32 = sqrt2(3);

// node_modules/d3-shape/src/symbol/triangle2.js
var sqrt33 = sqrt2(3);

// node_modules/d3-shape/src/symbol/wye.js
var s = sqrt2(3) / 2;
var k2 = 1 / sqrt2(12);
var a = (k2 / 2 + 1) * 3;

// node_modules/d3-shape/src/noop.js
function noop_default() {
}

// node_modules/d3-shape/src/curve/basis.js
function point2(that, x4, y4) {
  that._context.bezierCurveTo(
    (2 * that._x0 + that._x1) / 3,
    (2 * that._y0 + that._y1) / 3,
    (that._x0 + 2 * that._x1) / 3,
    (that._y0 + 2 * that._y1) / 3,
    (that._x0 + 4 * that._x1 + x4) / 6,
    (that._y0 + 4 * that._y1 + y4) / 6
  );
}
function Basis(context) {
  this._context = context;
}
Basis.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 3:
        point2(this, this._x1, this._y1);
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
      default:
        point2(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basis_default2(context) {
  return new Basis(context);
}

// node_modules/d3-shape/src/curve/basisClosed.js
function BasisClosed(context) {
  this._context = context;
}
BasisClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x2, this._y2);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x2, this._y2);
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        break;
      }
    }
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x2 = x4, this._y2 = y4;
        break;
      case 1:
        this._point = 2;
        this._x3 = x4, this._y3 = y4;
        break;
      case 2:
        this._point = 3;
        this._x4 = x4, this._y4 = y4;
        this._context.moveTo((this._x0 + 4 * this._x1 + x4) / 6, (this._y0 + 4 * this._y1 + y4) / 6);
        break;
      default:
        point2(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basisClosed_default2(context) {
  return new BasisClosed(context);
}

// node_modules/d3-shape/src/curve/basisOpen.js
function BasisOpen(context) {
  this._context = context;
}
BasisOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        var x0 = (this._x0 + 4 * this._x1 + x4) / 6, y0 = (this._y0 + 4 * this._y1 + y4) / 6;
        this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
        break;
      case 3:
        this._point = 4;
      default:
        point2(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
  }
};
function basisOpen_default(context) {
  return new BasisOpen(context);
}

// node_modules/d3-shape/src/curve/bundle.js
function Bundle(context, beta) {
  this._basis = new Basis(context);
  this._beta = beta;
}
Bundle.prototype = {
  lineStart: function() {
    this._x = [];
    this._y = [];
    this._basis.lineStart();
  },
  lineEnd: function() {
    var x4 = this._x, y4 = this._y, j3 = x4.length - 1;
    if (j3 > 0) {
      var x0 = x4[0], y0 = y4[0], dx = x4[j3] - x0, dy = y4[j3] - y0, i6 = -1, t10;
      while (++i6 <= j3) {
        t10 = i6 / j3;
        this._basis.point(
          this._beta * x4[i6] + (1 - this._beta) * (x0 + t10 * dx),
          this._beta * y4[i6] + (1 - this._beta) * (y0 + t10 * dy)
        );
      }
    }
    this._x = this._y = null;
    this._basis.lineEnd();
  },
  point: function(x4, y4) {
    this._x.push(+x4);
    this._y.push(+y4);
  }
};
var bundle_default = function custom(beta) {
  function bundle(context) {
    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
  }
  bundle.beta = function(beta2) {
    return custom(+beta2);
  };
  return bundle;
}(0.85);

// node_modules/d3-shape/src/curve/cardinal.js
function point3(that, x4, y4) {
  that._context.bezierCurveTo(
    that._x1 + that._k * (that._x2 - that._x0),
    that._y1 + that._k * (that._y2 - that._y0),
    that._x2 + that._k * (that._x1 - x4),
    that._y2 + that._k * (that._y1 - y4),
    that._x2,
    that._y2
  );
}
function Cardinal(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
Cardinal.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        point3(this, this._x1, this._y1);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        this._x1 = x4, this._y1 = y4;
        break;
      case 2:
        this._point = 3;
      default:
        point3(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinal_default = function custom2(tension) {
  function cardinal(context) {
    return new Cardinal(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom2(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalClosed.js
function CardinalClosed(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x4, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x4, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x4, this._y5 = y4;
        break;
      default:
        point3(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalClosed_default = function custom3(tension) {
  function cardinal(context) {
    return new CardinalClosed(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom3(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/cardinalOpen.js
function CardinalOpen(context, tension) {
  this._context = context;
  this._k = (1 - tension) / 6;
}
CardinalOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point3(this, x4, y4);
        break;
    }
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var cardinalOpen_default = function custom4(tension) {
  function cardinal(context) {
    return new CardinalOpen(context, tension);
  }
  cardinal.tension = function(tension2) {
    return custom4(+tension2);
  };
  return cardinal;
}(0);

// node_modules/d3-shape/src/curve/catmullRom.js
function point4(that, x4, y4) {
  var x1 = that._x1, y1 = that._y1, x22 = that._x2, y22 = that._y2;
  if (that._l01_a > epsilon) {
    var a5 = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a, n7 = 3 * that._l01_a * (that._l01_a + that._l12_a);
    x1 = (x1 * a5 - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n7;
    y1 = (y1 * a5 - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n7;
  }
  if (that._l23_a > epsilon) {
    var b5 = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a, m5 = 3 * that._l23_a * (that._l23_a + that._l12_a);
    x22 = (x22 * b5 + that._x1 * that._l23_2a - x4 * that._l12_2a) / m5;
    y22 = (y22 * b5 + that._y1 * that._l23_2a - y4 * that._l12_2a) / m5;
  }
  that._context.bezierCurveTo(x1, y1, x22, y22, that._x2, that._y2);
}
function CatmullRom(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRom.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x2, this._y2);
        break;
      case 3:
        this.point(this._x2, this._y2);
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x4, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
      default:
        point4(this, x4, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRom_default = function custom5(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom5(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomClosed.js
function CatmullRomClosed(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 1: {
        this._context.moveTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 2: {
        this._context.lineTo(this._x3, this._y3);
        this._context.closePath();
        break;
      }
      case 3: {
        this.point(this._x3, this._y3);
        this.point(this._x4, this._y4);
        this.point(this._x5, this._y5);
        break;
      }
    }
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x4, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        this._x3 = x4, this._y3 = y4;
        break;
      case 1:
        this._point = 2;
        this._context.moveTo(this._x4 = x4, this._y4 = y4);
        break;
      case 2:
        this._point = 3;
        this._x5 = x4, this._y5 = y4;
        break;
      default:
        point4(this, x4, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomClosed_default = function custom6(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom6(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/catmullRomOpen.js
function CatmullRomOpen(context, alpha) {
  this._context = context;
  this._alpha = alpha;
}
CatmullRomOpen.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
    this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
  },
  lineEnd: function() {
    if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point) {
      var x23 = this._x2 - x4, y23 = this._y2 - y4;
      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
    }
    switch (this._point) {
      case 0:
        this._point = 1;
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
        break;
      case 3:
        this._point = 4;
      default:
        point4(this, x4, y4);
        break;
    }
    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x4;
    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y4;
  }
};
var catmullRomOpen_default = function custom7(alpha) {
  function catmullRom(context) {
    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
  }
  catmullRom.alpha = function(alpha2) {
    return custom7(+alpha2);
  };
  return catmullRom;
}(0.5);

// node_modules/d3-shape/src/curve/linearClosed.js
function LinearClosed(context) {
  this._context = context;
}
LinearClosed.prototype = {
  areaStart: noop_default,
  areaEnd: noop_default,
  lineStart: function() {
    this._point = 0;
  },
  lineEnd: function() {
    if (this._point) this._context.closePath();
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    if (this._point) this._context.lineTo(x4, y4);
    else this._point = 1, this._context.moveTo(x4, y4);
  }
};
function linearClosed_default(context) {
  return new LinearClosed(context);
}

// node_modules/d3-shape/src/curve/monotone.js
function sign(x4) {
  return x4 < 0 ? -1 : 1;
}
function slope3(that, x22, y22) {
  var h0 = that._x1 - that._x0, h1 = x22 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y22 - that._y1) / (h1 || h0 < 0 && -0), p4 = (s0 * h1 + s1 * h0) / (h0 + h1);
  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p4)) || 0;
}
function slope2(that, t10) {
  var h2 = that._x1 - that._x0;
  return h2 ? (3 * (that._y1 - that._y0) / h2 - t10) / 2 : t10;
}
function point5(that, t04, t14) {
  var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
  that._context.bezierCurveTo(x0 + dx, y0 + dx * t04, x1 - dx, y1 - dx * t14, x1, y1);
}
function MonotoneX(context) {
  this._context = context;
}
MonotoneX.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    switch (this._point) {
      case 2:
        this._context.lineTo(this._x1, this._y1);
        break;
      case 3:
        point5(this, this._t0, slope2(this, this._t0));
        break;
    }
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    var t14 = NaN;
    x4 = +x4, y4 = +y4;
    if (x4 === this._x1 && y4 === this._y1) return;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
        break;
      case 2:
        this._point = 3;
        point5(this, slope2(this, t14 = slope3(this, x4, y4)), t14);
        break;
      default:
        point5(this, this._t0, t14 = slope3(this, x4, y4));
        break;
    }
    this._x0 = this._x1, this._x1 = x4;
    this._y0 = this._y1, this._y1 = y4;
    this._t0 = t14;
  }
};
function MonotoneY(context) {
  this._context = new ReflectContext(context);
}
(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x4, y4) {
  MonotoneX.prototype.point.call(this, y4, x4);
};
function ReflectContext(context) {
  this._context = context;
}
ReflectContext.prototype = {
  moveTo: function(x4, y4) {
    this._context.moveTo(y4, x4);
  },
  closePath: function() {
    this._context.closePath();
  },
  lineTo: function(x4, y4) {
    this._context.lineTo(y4, x4);
  },
  bezierCurveTo: function(x1, y1, x22, y22, x4, y4) {
    this._context.bezierCurveTo(y1, x1, y22, x22, y4, x4);
  }
};
function monotoneX(context) {
  return new MonotoneX(context);
}
function monotoneY(context) {
  return new MonotoneY(context);
}

// node_modules/d3-shape/src/curve/natural.js
function Natural(context) {
  this._context = context;
}
Natural.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = [];
    this._y = [];
  },
  lineEnd: function() {
    var x4 = this._x, y4 = this._y, n7 = x4.length;
    if (n7) {
      this._line ? this._context.lineTo(x4[0], y4[0]) : this._context.moveTo(x4[0], y4[0]);
      if (n7 === 2) {
        this._context.lineTo(x4[1], y4[1]);
      } else {
        var px = controlPoints(x4), py = controlPoints(y4);
        for (var i0 = 0, i1 = 1; i1 < n7; ++i0, ++i1) {
          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x4[i1], y4[i1]);
        }
      }
    }
    if (this._line || this._line !== 0 && n7 === 1) this._context.closePath();
    this._line = 1 - this._line;
    this._x = this._y = null;
  },
  point: function(x4, y4) {
    this._x.push(+x4);
    this._y.push(+y4);
  }
};
function controlPoints(x4) {
  var i6, n7 = x4.length - 1, m5, a5 = new Array(n7), b5 = new Array(n7), r7 = new Array(n7);
  a5[0] = 0, b5[0] = 2, r7[0] = x4[0] + 2 * x4[1];
  for (i6 = 1; i6 < n7 - 1; ++i6) a5[i6] = 1, b5[i6] = 4, r7[i6] = 4 * x4[i6] + 2 * x4[i6 + 1];
  a5[n7 - 1] = 2, b5[n7 - 1] = 7, r7[n7 - 1] = 8 * x4[n7 - 1] + x4[n7];
  for (i6 = 1; i6 < n7; ++i6) m5 = a5[i6] / b5[i6 - 1], b5[i6] -= m5, r7[i6] -= m5 * r7[i6 - 1];
  a5[n7 - 1] = r7[n7 - 1] / b5[n7 - 1];
  for (i6 = n7 - 2; i6 >= 0; --i6) a5[i6] = (r7[i6] - a5[i6 + 1]) / b5[i6];
  b5[n7 - 1] = (x4[n7] + a5[n7 - 1]) / 2;
  for (i6 = 0; i6 < n7 - 1; ++i6) b5[i6] = 2 * x4[i6 + 1] - a5[i6 + 1];
  return [a5, b5];
}
function natural_default(context) {
  return new Natural(context);
}

// node_modules/d3-shape/src/curve/step.js
function Step(context, t10) {
  this._context = context;
  this._t = t10;
}
Step.prototype = {
  areaStart: function() {
    this._line = 0;
  },
  areaEnd: function() {
    this._line = NaN;
  },
  lineStart: function() {
    this._x = this._y = NaN;
    this._point = 0;
  },
  lineEnd: function() {
    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
    if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
  },
  point: function(x4, y4) {
    x4 = +x4, y4 = +y4;
    switch (this._point) {
      case 0:
        this._point = 1;
        this._line ? this._context.lineTo(x4, y4) : this._context.moveTo(x4, y4);
        break;
      case 1:
        this._point = 2;
      default: {
        if (this._t <= 0) {
          this._context.lineTo(this._x, y4);
          this._context.lineTo(x4, y4);
        } else {
          var x1 = this._x * (1 - this._t) + x4 * this._t;
          this._context.lineTo(x1, this._y);
          this._context.lineTo(x1, y4);
        }
        break;
      }
    }
    this._x = x4, this._y = y4;
  }
};
function step_default(context) {
  return new Step(context, 0.5);
}
function stepBefore(context) {
  return new Step(context, 0);
}
function stepAfter(context) {
  return new Step(context, 1);
}

// node_modules/d3-shape/src/offset/none.js
function none_default(series, order) {
  if (!((n7 = series.length) > 1)) return;
  for (var i6 = 1, j3, s0, s1 = series[order[0]], n7, m5 = s1.length; i6 < n7; ++i6) {
    s0 = s1, s1 = series[order[i6]];
    for (j3 = 0; j3 < m5; ++j3) {
      s1[j3][1] += s1[j3][0] = isNaN(s0[j3][1]) ? s0[j3][0] : s0[j3][1];
    }
  }
}

// node_modules/d3-shape/src/order/none.js
function none_default2(series) {
  var n7 = series.length, o5 = new Array(n7);
  while (--n7 >= 0) o5[n7] = n7;
  return o5;
}

// node_modules/d3-shape/src/offset/expand.js
function expand_default(series, order) {
  if (!((n7 = series.length) > 0)) return;
  for (var i6, n7, j3 = 0, m5 = series[0].length, y4; j3 < m5; ++j3) {
    for (y4 = i6 = 0; i6 < n7; ++i6) y4 += series[i6][j3][1] || 0;
    if (y4) for (i6 = 0; i6 < n7; ++i6) series[i6][j3][1] /= y4;
  }
  none_default(series, order);
}

// node_modules/d3-shape/src/offset/diverging.js
function diverging_default(series, order) {
  if (!((n7 = series.length) > 0)) return;
  for (var i6, j3 = 0, d3, dy, yp, yn3, n7, m5 = series[order[0]].length; j3 < m5; ++j3) {
    for (yp = yn3 = 0, i6 = 0; i6 < n7; ++i6) {
      if ((dy = (d3 = series[order[i6]][j3])[1] - d3[0]) > 0) {
        d3[0] = yp, d3[1] = yp += dy;
      } else if (dy < 0) {
        d3[1] = yn3, d3[0] = yn3 += dy;
      } else {
        d3[0] = 0, d3[1] = dy;
      }
    }
  }
}

// node_modules/d3-shape/src/offset/silhouette.js
function silhouette_default(series, order) {
  if (!((n7 = series.length) > 0)) return;
  for (var j3 = 0, s0 = series[order[0]], n7, m5 = s0.length; j3 < m5; ++j3) {
    for (var i6 = 0, y4 = 0; i6 < n7; ++i6) y4 += series[i6][j3][1] || 0;
    s0[j3][1] += s0[j3][0] = -y4 / 2;
  }
  none_default(series, order);
}

// node_modules/d3-shape/src/offset/wiggle.js
function wiggle_default(series, order) {
  if (!((n7 = series.length) > 0) || !((m5 = (s0 = series[order[0]]).length) > 0)) return;
  for (var y4 = 0, j3 = 1, s0, m5, n7; j3 < m5; ++j3) {
    for (var i6 = 0, s1 = 0, s22 = 0; i6 < n7; ++i6) {
      var si = series[order[i6]], sij0 = si[j3][1] || 0, sij1 = si[j3 - 1][1] || 0, s32 = (sij0 - sij1) / 2;
      for (var k5 = 0; k5 < i6; ++k5) {
        var sk = series[order[k5]], skj0 = sk[j3][1] || 0, skj1 = sk[j3 - 1][1] || 0;
        s32 += skj0 - skj1;
      }
      s1 += sij0, s22 += s32 * sij0;
    }
    s0[j3 - 1][1] += s0[j3 - 1][0] = y4;
    if (s1) y4 -= s22 / s1;
  }
  s0[j3 - 1][1] += s0[j3 - 1][0] = y4;
  none_default(series, order);
}

// node_modules/d3-shape/src/order/appearance.js
function appearance_default(series) {
  var peaks = series.map(peak);
  return none_default2(series).sort(function(a5, b5) {
    return peaks[a5] - peaks[b5];
  });
}
function peak(series) {
  var i6 = -1, j3 = 0, n7 = series.length, vi, vj = -Infinity;
  while (++i6 < n7) if ((vi = +series[i6][1]) > vj) vj = vi, j3 = i6;
  return j3;
}

// node_modules/d3-shape/src/order/ascending.js
function ascending_default(series) {
  var sums = series.map(sum2);
  return none_default2(series).sort(function(a5, b5) {
    return sums[a5] - sums[b5];
  });
}
function sum2(series) {
  var s5 = 0, i6 = -1, n7 = series.length, v6;
  while (++i6 < n7) if (v6 = +series[i6][1]) s5 += v6;
  return s5;
}

// node_modules/d3-shape/src/order/descending.js
function descending_default2(series) {
  return ascending_default(series).reverse();
}

// node_modules/d3-shape/src/order/insideOut.js
function insideOut_default(series) {
  var n7 = series.length, i6, j3, sums = series.map(sum2), order = appearance_default(series), top = 0, bottom = 0, tops = [], bottoms = [];
  for (i6 = 0; i6 < n7; ++i6) {
    j3 = order[i6];
    if (top < bottom) {
      top += sums[j3];
      tops.push(j3);
    } else {
      bottom += sums[j3];
      bottoms.push(j3);
    }
  }
  return bottoms.reverse().concat(tops);
}

// node_modules/d3-shape/src/order/reverse.js
function reverse_default(series) {
  return none_default2(series).reverse();
}

// node_modules/@nivo/core/dist/nivo-core.es.js
var import_isPlainObject = __toESM(require_isPlainObject());
var import_pick = __toESM(require_pick());
var import_isEqual = __toESM(require_isEqual());
var Pr = { background: "transparent", text: { fontFamily: "sans-serif", fontSize: 11, fill: "#333333", outlineWidth: 0, outlineColor: "transparent", outlineOpacity: 1 }, axis: { domain: { line: { stroke: "transparent", strokeWidth: 1 } }, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: {} }, legend: { text: { fontSize: 12 } } }, grid: { line: { stroke: "#dddddd", strokeWidth: 1 } }, legends: { hidden: { symbol: { fill: "#333333", opacity: 0.6 }, text: { fill: "#333333", opacity: 0.6 } }, text: {}, ticks: { line: { stroke: "#777777", strokeWidth: 1 }, text: { fontSize: 10 } }, title: { text: {} } }, labels: { text: {} }, markers: { lineColor: "#000000", lineStrokeWidth: 1, text: {} }, dots: { text: {} }, tooltip: { container: { background: "white", color: "inherit", fontSize: "inherit", borderRadius: "2px", boxShadow: "0 1px 2px rgba(0, 0, 0, 0.25)", padding: "5px 9px" }, basic: { whiteSpace: "pre", display: "flex", alignItems: "center" }, chip: { marginRight: 7 }, table: {}, tableCell: { padding: "3px 5px" }, tableCellValue: { fontWeight: "bold" } }, crosshair: { line: { stroke: "#000000", strokeWidth: 1, strokeOpacity: 0.75, strokeDasharray: "6 6" } }, annotations: { text: { fontSize: 13, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, link: { stroke: "#000000", strokeWidth: 1, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, outline: { fill: "none", stroke: "#000000", strokeWidth: 2, outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 }, symbol: { fill: "#000000", outlineWidth: 2, outlineColor: "#ffffff", outlineOpacity: 1 } } };
function jr() {
  return jr = Object.assign ? Object.assign.bind() : function(e11) {
    for (var r7 = 1; r7 < arguments.length; r7++) {
      var t10 = arguments[r7];
      for (var n7 in t10) Object.prototype.hasOwnProperty.call(t10, n7) && (e11[n7] = t10[n7]);
    }
    return e11;
  }, jr.apply(this, arguments);
}
function Sr(e11, r7) {
  return Sr = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(e12, r8) {
    return e12.__proto__ = r8, e12;
  }, Sr(e11, r7);
}
function Br(e11, r7) {
  if (null == e11) return {};
  var t10, n7, i6 = {}, o5 = Object.keys(e11);
  for (n7 = 0; n7 < o5.length; n7++) t10 = o5[n7], r7.indexOf(t10) >= 0 || (i6[t10] = e11[t10]);
  return i6;
}
var Gr = ["axis.ticks.text", "axis.legend.text", "legends.title.text", "legends.text", "legends.ticks.text", "legends.title.text", "labels.text", "dots.text", "markers.text", "annotations.text"];
var Lr = function(e11, r7) {
  return jr({}, r7, e11);
};
var Ir = function(e11, r7) {
  var t10 = (0, import_merge2.default)({}, e11, r7);
  return Gr.forEach(function(e12) {
    (0, import_set.default)(t10, e12, Lr((0, import_get.default)(t10, e12), t10.text));
  }), t10;
};
var Yr = (0, import_react5.createContext)();
var Ar = function(e11) {
  var t10 = e11.children, n7 = e11.animate, i6 = void 0 === n7 || n7, o5 = e11.config, l5 = void 0 === o5 ? "default" : o5, a5 = (0, import_react5.useMemo)(function() {
    var e12 = (0, import_isString.default)(l5) ? config[l5] : l5;
    return { animate: i6, config: e12 };
  }, [i6, l5]);
  return (0, import_jsx_runtime2.jsx)(Yr.Provider, { value: a5, children: t10 });
};
var Er = { animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Object.keys(config)), import_prop_types.default.shape({ mass: import_prop_types.default.number, tension: import_prop_types.default.number, friction: import_prop_types.default.number, clamp: import_prop_types.default.bool, precision: import_prop_types.default.number, velocity: import_prop_types.default.number, duration: import_prop_types.default.number, easing: import_prop_types.default.func })]) };
Ar.propTypes = { children: import_prop_types.default.node.isRequired, animate: Er.animate, config: Er.motionConfig };
var Ur = function() {
  return (0, import_react5.useContext)(Yr);
};
var Fr = function(e11) {
  var t10 = Ur(), o5 = t10.animate, l5 = t10.config, a5 = function(e12) {
    var r7 = (0, import_react5.useRef)();
    return (0, import_react5.useEffect)(function() {
      r7.current = e12;
    }, [e12]), r7.current;
  }(e11), d3 = (0, import_react5.useMemo)(function() {
    return string_default(a5, e11);
  }, [a5, e11]), s5 = useSpring({ from: { value: 0 }, to: { value: 1 }, reset: true, config: l5, immediate: !o5 }).value;
  return to2(s5, d3);
};
var Xr = { nivo: ["#d76445", "#f47560", "#e8c1a0", "#97e3d5", "#61cdbb", "#00b0a7"], BrBG: (0, import_last.default)(scheme), PRGn: (0, import_last.default)(scheme2), PiYG: (0, import_last.default)(scheme3), PuOr: (0, import_last.default)(scheme4), RdBu: (0, import_last.default)(scheme5), RdGy: (0, import_last.default)(scheme6), RdYlBu: (0, import_last.default)(scheme7), RdYlGn: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), BuGn: (0, import_last.default)(scheme10), BuPu: (0, import_last.default)(scheme11), GnBu: (0, import_last.default)(scheme12), OrRd: (0, import_last.default)(scheme13), PuBuGn: (0, import_last.default)(scheme14), PuBu: (0, import_last.default)(scheme15), PuRd: (0, import_last.default)(scheme16), RdPu: (0, import_last.default)(scheme17), YlGnBu: (0, import_last.default)(scheme18), YlGn: (0, import_last.default)(scheme19), YlOrBr: (0, import_last.default)(scheme20), YlOrRd: (0, import_last.default)(scheme21) };
var Hr = Object.keys(Xr);
var Nr = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default, brown_blueGreen: (0, import_last.default)(scheme), purpleRed_green: (0, import_last.default)(scheme2), pink_yellowGreen: (0, import_last.default)(scheme3), purple_orange: (0, import_last.default)(scheme4), red_blue: (0, import_last.default)(scheme5), red_grey: (0, import_last.default)(scheme6), red_yellow_blue: (0, import_last.default)(scheme7), red_yellow_green: (0, import_last.default)(scheme8), spectral: (0, import_last.default)(scheme9), blues: (0, import_last.default)(scheme22), greens: (0, import_last.default)(scheme23), greys: (0, import_last.default)(scheme24), oranges: (0, import_last.default)(scheme27), purples: (0, import_last.default)(scheme25), reds: (0, import_last.default)(scheme26), blue_green: (0, import_last.default)(scheme10), blue_purple: (0, import_last.default)(scheme11), green_blue: (0, import_last.default)(scheme12), orange_red: (0, import_last.default)(scheme13), purple_blue_green: (0, import_last.default)(scheme14), purple_blue: (0, import_last.default)(scheme15), purple_red: (0, import_last.default)(scheme16), red_purple: (0, import_last.default)(scheme17), yellow_green_blue: (0, import_last.default)(scheme18), yellow_green: (0, import_last.default)(scheme19), yellow_orange_brown: (0, import_last.default)(scheme20), yellow_orange_red: (0, import_last.default)(scheme21) };
var et = import_prop_types.default.oneOfType([import_prop_types.default.oneOf(Hr), import_prop_types.default.func, import_prop_types.default.arrayOf(import_prop_types.default.string)]);
var rt = { basis: basis_default2, basisClosed: basisClosed_default2, basisOpen: basisOpen_default, bundle: bundle_default, cardinal: cardinal_default, cardinalClosed: cardinalClosed_default, cardinalOpen: cardinalOpen_default, catmullRom: catmullRom_default, catmullRomClosed: catmullRomClosed_default, catmullRomOpen: catmullRomOpen_default, linear: linear_default, linearClosed: linearClosed_default, monotoneX, monotoneY, natural: natural_default, step: step_default, stepAfter, stepBefore };
var tt = Object.keys(rt);
var nt = tt.filter(function(e11) {
  return e11.endsWith("Closed");
});
var it = (0, import_without.default)(tt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var ot = (0, import_without.default)(tt, "bundle", "basisClosed", "basisOpen", "cardinalClosed", "cardinalOpen", "catmullRomClosed", "catmullRomOpen", "linearClosed");
var lt = function(e11) {
  if (!rt[e11]) throw new TypeError("'" + e11 + "', is not a valid curve interpolator identifier.");
  return rt[e11];
};
var at = { ascending: ascending_default, descending: descending_default2, insideOut: insideOut_default, none: none_default2, reverse: reverse_default };
var dt = Object.keys(at);
var ut = { expand: expand_default, diverging: diverging_default, none: none_default, silhouette: silhouette_default, wiggle: wiggle_default };
var ct = Object.keys(ut);
var pt = import_prop_types.default.shape({ top: import_prop_types.default.number, right: import_prop_types.default.number, bottom: import_prop_types.default.number, left: import_prop_types.default.number }).isRequired;
var ht = ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity"];
var gt = import_prop_types.default.oneOf(ht);
var vt = ordinal(Set3_default);
var _t = { top: 0, right: 0, bottom: 0, left: 0 };
var wt = function(e11, t10, n7) {
  return void 0 === n7 && (n7 = {}), (0, import_react5.useMemo)(function() {
    var r7 = jr({}, _t, n7);
    return { margin: r7, innerWidth: e11 - r7.left - r7.right, innerHeight: t10 - r7.top - r7.bottom, outerWidth: e11, outerHeight: t10 };
  }, [e11, t10, n7.top, n7.right, n7.bottom, n7.left]);
};
var kt = function() {
  var e11 = (0, import_react5.useRef)(null), r7 = (0, import_react5.useState)({ left: 0, top: 0, width: 0, height: 0 }), t10 = r7[0], l5 = r7[1], a5 = (0, import_react5.useState)(function() {
    return "undefined" == typeof ResizeObserver ? null : new ResizeObserver(function(e12) {
      var r8 = e12[0];
      return l5(r8.contentRect);
    });
  })[0];
  return (0, import_react5.useEffect)(function() {
    return e11.current && null !== a5 && a5.observe(e11.current), function() {
      null !== a5 && a5.disconnect();
    };
  }, []), [e11, t10];
};
var Rt = function(e11) {
  return (0, import_react5.useMemo)(function() {
    return Ir(Pr, e11);
  }, [e11]);
};
var xt = function(e11) {
  return "function" == typeof e11 ? e11 : "string" == typeof e11 ? 0 === e11.indexOf("time:") ? timeFormat(e11.slice("5")) : format(e11) : function(e12) {
    return "" + e12;
  };
};
var Ot = function(e11) {
  return (0, import_react5.useMemo)(function() {
    return xt(e11);
  }, [e11]);
};
var qt = (0, import_react5.createContext)();
var Ct = {};
var Wt = function(e11) {
  var r7 = e11.theme, t10 = void 0 === r7 ? Ct : r7, n7 = e11.children, i6 = Rt(t10);
  return (0, import_jsx_runtime2.jsx)(qt.Provider, { value: i6, children: n7 });
};
Wt.propTypes = { children: import_prop_types.default.node.isRequired, theme: import_prop_types.default.object };
var zt = function() {
  return (0, import_react5.useContext)(qt);
};
var Tt = ["outlineWidth", "outlineColor", "outlineOpacity"];
var Mt = function(e11) {
  return e11.outlineWidth, e11.outlineColor, e11.outlineOpacity, Br(e11, Tt);
};
var Pt = function(e11) {
  var r7 = e11.children, t10 = e11.condition, n7 = e11.wrapper;
  return t10 ? (0, import_react5.cloneElement)(n7, {}, r7) : r7;
};
Pt.propTypes = { children: import_prop_types.default.node.isRequired, condition: import_prop_types.default.bool.isRequired, wrapper: import_prop_types.default.element.isRequired };
var jt = { position: "relative" };
var St = function(e11) {
  var r7 = e11.children, t10 = e11.theme, i6 = e11.renderWrapper, o5 = void 0 === i6 || i6, l5 = e11.isInteractive, a5 = void 0 === l5 || l5, d3 = e11.animate, s5 = e11.motionConfig, u6 = (0, import_react5.useRef)(null);
  return (0, import_jsx_runtime2.jsx)(Wt, { theme: t10, children: (0, import_jsx_runtime2.jsx)(Ar, { animate: d3, config: s5, children: (0, import_jsx_runtime2.jsx)(M, { container: u6, children: (0, import_jsx_runtime2.jsxs)(Pt, { condition: o5, wrapper: (0, import_jsx_runtime2.jsx)("div", { style: jt, ref: u6 }), children: [r7, a5 && (0, import_jsx_runtime2.jsx)(F, {})] }) }) }) });
};
St.propTypes = { children: import_prop_types.default.element.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object, animate: import_prop_types.default.bool, motionConfig: import_prop_types.default.string };
var Bt = function() {
};
var Gt = { position: "relative" };
var Lt = function(e11) {
  var t10 = e11.children, i6 = e11.theme, o5 = e11.isInteractive, l5 = void 0 === o5 || o5, d3 = e11.renderWrapper, s5 = void 0 === d3 || d3, u6 = e11.animate, c9 = e11.motionConfig, f3 = (0, import_react5.useRef)(null), m5 = V(f3), y4 = m5.actions, v6 = m5.state, _3 = (0, import_react5.useCallback)(function(e12, r7) {
    return y4.showTooltipFromEvent(e12, r7);
  }, [y4.showTooltipFromEvent]), w5 = (0, import_react5.useMemo)(function() {
    return { showTooltip: l5 ? _3 : Bt, hideTooltip: l5 ? y4.hideTooltip : Bt };
  }, [y4.hideTooltip, l5, _3]);
  return (0, import_jsx_runtime2.jsx)(Wt, { theme: i6, children: (0, import_jsx_runtime2.jsx)(Ar, { animate: u6, config: c9, children: (0, import_jsx_runtime2.jsx)(j.Provider, { value: y4, children: (0, import_jsx_runtime2.jsx)(O.Provider, { value: v6, children: (0, import_jsx_runtime2.jsxs)(Pt, { condition: s5, wrapper: (0, import_jsx_runtime2.jsx)("div", { style: Gt, ref: f3 }), children: [t10(w5), l5 && (0, import_jsx_runtime2.jsx)(F, {})] }) }) }) }) });
};
Lt.propTypes = { children: import_prop_types.default.func.isRequired, isInteractive: import_prop_types.default.bool, renderWrapper: import_prop_types.default.bool, theme: import_prop_types.default.object.isRequired, animate: import_prop_types.default.bool.isRequired, motionConfig: import_prop_types.default.string };
var It = function(e11) {
  var r7 = e11.children, t10 = kt(), n7 = t10[0], i6 = t10[1], o5 = i6.width > 0 && i6.height > 0;
  return (0, import_jsx_runtime2.jsx)("div", { ref: n7, style: { width: "100%", height: "100%" }, children: o5 && r7({ width: i6.width, height: i6.height }) });
};
It.propTypes = { children: import_prop_types.default.func.isRequired };
var Yt = ["id", "colors"];
var Dt = function(e11) {
  var r7 = e11.id, t10 = e11.colors, n7 = Br(e11, Yt);
  return (0, import_jsx_runtime2.jsx)("linearGradient", jr({ id: r7, x1: 0, x2: 0, y1: 0, y2: 1 }, n7, { children: t10.map(function(e12) {
    var r8 = e12.offset, t11 = e12.color, n8 = e12.opacity;
    return (0, import_jsx_runtime2.jsx)("stop", { offset: r8 + "%", stopColor: t11, stopOpacity: void 0 !== n8 ? n8 : 1 }, r8);
  }) }));
};
Dt.propTypes = { id: import_prop_types.default.string.isRequired, colors: import_prop_types.default.arrayOf(import_prop_types.default.shape({ offset: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, opacity: import_prop_types.default.number })).isRequired, gradientTransform: import_prop_types.default.string };
var Et = { linearGradient: Dt };
var Ut = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var Ft = (0, import_react5.memo)(function(e11) {
  var r7 = e11.id, t10 = e11.background, n7 = void 0 === t10 ? Ut.background : t10, i6 = e11.color, o5 = void 0 === i6 ? Ut.color : i6, l5 = e11.size, a5 = void 0 === l5 ? Ut.size : l5, d3 = e11.padding, s5 = void 0 === d3 ? Ut.padding : d3, u6 = e11.stagger, c9 = void 0 === u6 ? Ut.stagger : u6, f3 = a5 + s5, p4 = a5 / 2, h2 = s5 / 2;
  return true === c9 && (f3 = 2 * a5 + 2 * s5), (0, import_jsx_runtime2.jsxs)("pattern", { id: r7, width: f3, height: f3, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: f3, height: f3, fill: n7 }), (0, import_jsx_runtime2.jsx)("circle", { cx: h2 + p4, cy: h2 + p4, r: p4, fill: o5 }), c9 && (0, import_jsx_runtime2.jsx)("circle", { cx: 1.5 * s5 + a5 + p4, cy: 1.5 * s5 + a5 + p4, r: p4, fill: o5 })] });
});
Ft.displayName = "PatternDots", Ft.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired };
var Ht = 2 * Math.PI;
var Kt = function(e11) {
  return e11 * Math.PI / 180;
};
var rn = { svg: { align: { left: "start", center: "middle", right: "end", start: "start", middle: "middle", end: "end" }, baseline: { top: "text-before-edge", center: "central", bottom: "alphabetic" } }, canvas: { align: { left: "left", center: "center", right: "right", start: "left", middle: "center", end: "right" }, baseline: { top: "top", center: "middle", bottom: "bottom" } } };
var nn = { spacing: 5, rotation: 0, background: "#000000", color: "#ffffff", lineWidth: 2 };
var on = (0, import_react5.memo)(function(e11) {
  var r7 = e11.id, t10 = e11.spacing, n7 = void 0 === t10 ? nn.spacing : t10, i6 = e11.rotation, o5 = void 0 === i6 ? nn.rotation : i6, l5 = e11.background, a5 = void 0 === l5 ? nn.background : l5, d3 = e11.color, s5 = void 0 === d3 ? nn.color : d3, u6 = e11.lineWidth, c9 = void 0 === u6 ? nn.lineWidth : u6, f3 = Math.round(o5) % 360, p4 = Math.abs(n7);
  f3 > 180 ? f3 -= 360 : f3 > 90 ? f3 -= 180 : f3 < -180 ? f3 += 360 : f3 < -90 && (f3 += 180);
  var h2, g4 = p4, b5 = p4;
  return 0 === f3 ? h2 = "\n                M 0 0 L " + g4 + " 0\n                M 0 " + b5 + " L " + g4 + " " + b5 + "\n            " : 90 === f3 ? h2 = "\n                M 0 0 L 0 " + b5 + "\n                M " + g4 + " 0 L " + g4 + " " + b5 + "\n            " : (g4 = Math.abs(p4 / Math.sin(Kt(f3))), b5 = p4 / Math.sin(Kt(90 - f3)), h2 = f3 > 0 ? "\n                    M 0 " + -b5 + " L " + 2 * g4 + " " + b5 + "\n                    M " + -g4 + " " + -b5 + " L " + g4 + " " + b5 + "\n                    M " + -g4 + " 0 L " + g4 + " " + 2 * b5 + "\n                " : "\n                    M " + -g4 + " " + b5 + " L " + g4 + " " + -b5 + "\n                    M " + -g4 + " " + 2 * b5 + " L " + 2 * g4 + " " + -b5 + "\n                    M 0 " + 2 * b5 + " L " + 2 * g4 + " 0\n                "), (0, import_jsx_runtime2.jsxs)("pattern", { id: r7, width: g4, height: b5, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: g4, height: b5, fill: a5, stroke: "rgba(255, 0, 0, 0.1)", strokeWidth: 0 }), (0, import_jsx_runtime2.jsx)("path", { d: h2, strokeWidth: c9, stroke: s5, strokeLinecap: "square" })] });
});
on.displayName = "PatternLines", on.propTypes = { id: import_prop_types.default.string.isRequired, spacing: import_prop_types.default.number.isRequired, rotation: import_prop_types.default.number.isRequired, background: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, lineWidth: import_prop_types.default.number.isRequired };
var an = { color: "#000000", background: "#ffffff", size: 4, padding: 4, stagger: false };
var dn = (0, import_react5.memo)(function(e11) {
  var r7 = e11.id, t10 = e11.color, n7 = void 0 === t10 ? an.color : t10, i6 = e11.background, o5 = void 0 === i6 ? an.background : i6, l5 = e11.size, a5 = void 0 === l5 ? an.size : l5, d3 = e11.padding, s5 = void 0 === d3 ? an.padding : d3, u6 = e11.stagger, c9 = void 0 === u6 ? an.stagger : u6, f3 = a5 + s5, p4 = s5 / 2;
  return true === c9 && (f3 = 2 * a5 + 2 * s5), (0, import_jsx_runtime2.jsxs)("pattern", { id: r7, width: f3, height: f3, patternUnits: "userSpaceOnUse", children: [(0, import_jsx_runtime2.jsx)("rect", { width: f3, height: f3, fill: o5 }), (0, import_jsx_runtime2.jsx)("rect", { x: p4, y: p4, width: a5, height: a5, fill: n7 }), c9 && (0, import_jsx_runtime2.jsx)("rect", { x: 1.5 * s5 + a5, y: 1.5 * s5 + a5, width: a5, height: a5, fill: n7 })] });
});
dn.displayName = "PatternSquares", dn.propTypes = { id: import_prop_types.default.string.isRequired, color: import_prop_types.default.string.isRequired, background: import_prop_types.default.string.isRequired, size: import_prop_types.default.number.isRequired, padding: import_prop_types.default.number.isRequired, stagger: import_prop_types.default.bool.isRequired };
var un = { patternDots: Ft, patternLines: on, patternSquares: dn };
var cn = ["type"];
var fn = jr({}, Et, un);
var pn = function(e11) {
  var r7 = e11.defs;
  return !r7 || r7.length < 1 ? null : (0, import_jsx_runtime2.jsx)("defs", { "aria-hidden": true, children: r7.map(function(e12) {
    var r8 = e12.type, t10 = Br(e12, cn);
    return fn[r8] ? (0, import_react5.createElement)(fn[r8], jr({ key: t10.id }, t10)) : null;
  }) });
};
pn.propTypes = { defs: import_prop_types.default.arrayOf(import_prop_types.default.shape({ type: import_prop_types.default.oneOf(Object.keys(fn)).isRequired, id: import_prop_types.default.string.isRequired })) };
var hn = (0, import_react5.memo)(pn);
var gn = function(e11) {
  var r7 = e11.width, t10 = e11.height, n7 = e11.margin, i6 = e11.defs, o5 = e11.children, l5 = e11.role, a5 = e11.ariaLabel, d3 = e11.ariaLabelledBy, s5 = e11.ariaDescribedBy, u6 = e11.isFocusable, c9 = zt();
  return (0, import_jsx_runtime2.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", width: r7, height: t10, role: l5, "aria-label": a5, "aria-labelledby": d3, "aria-describedby": s5, focusable: u6, tabIndex: u6 ? 0 : void 0, children: [(0, import_jsx_runtime2.jsx)(hn, { defs: i6 }), (0, import_jsx_runtime2.jsx)("rect", { width: r7, height: t10, fill: c9.background }), (0, import_jsx_runtime2.jsx)("g", { transform: "translate(" + n7.left + "," + n7.top + ")", children: o5 })] });
};
gn.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, margin: import_prop_types.default.shape({ top: import_prop_types.default.number.isRequired, left: import_prop_types.default.number.isRequired }).isRequired, defs: import_prop_types.default.array, children: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.node), import_prop_types.default.node]).isRequired, role: import_prop_types.default.string, isFocusable: import_prop_types.default.bool, ariaLabel: import_prop_types.default.string, ariaLabelledBy: import_prop_types.default.string, ariaDescribedBy: import_prop_types.default.string };
var bn = function(e11) {
  var r7 = e11.size, t10 = e11.color, n7 = e11.borderWidth, i6 = e11.borderColor;
  return (0, import_jsx_runtime2.jsx)("circle", { r: r7 / 2, fill: t10, stroke: i6, strokeWidth: n7, style: { pointerEvents: "none" } });
};
bn.propTypes = { size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired };
var mn = (0, import_react5.memo)(bn);
var yn = function(e11) {
  var r7 = e11.x, t10 = e11.y, n7 = e11.symbol, i6 = void 0 === n7 ? mn : n7, o5 = e11.size, l5 = e11.datum, a5 = e11.color, d3 = e11.borderWidth, u6 = e11.borderColor, c9 = e11.label, f3 = e11.labelTextAnchor, p4 = void 0 === f3 ? "middle" : f3, h2 = e11.labelYOffset, g4 = void 0 === h2 ? -12 : h2, b5 = zt(), m5 = Ur(), y4 = m5.animate, v6 = m5.config, _3 = useSpring({ transform: "translate(" + r7 + ", " + t10 + ")", config: v6, immediate: !y4 });
  return (0, import_jsx_runtime2.jsxs)(animated.g, { transform: _3.transform, style: { pointerEvents: "none" }, children: [(0, import_react5.createElement)(i6, { size: o5, color: a5, datum: l5, borderWidth: d3, borderColor: u6 }), c9 && (0, import_jsx_runtime2.jsx)("text", { textAnchor: p4, y: g4, style: Mt(b5.dots.text), children: c9 })] });
};
yn.propTypes = { x: import_prop_types.default.number.isRequired, y: import_prop_types.default.number.isRequired, datum: import_prop_types.default.object.isRequired, size: import_prop_types.default.number.isRequired, color: import_prop_types.default.string.isRequired, borderWidth: import_prop_types.default.number.isRequired, borderColor: import_prop_types.default.string.isRequired, symbol: import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object]), label: import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.number]), labelTextAnchor: import_prop_types.default.oneOf(["start", "middle", "end"]), labelYOffset: import_prop_types.default.number };
var vn = (0, import_react5.memo)(yn);
var _n = function(e11) {
  var r7 = e11.width, t10 = e11.height, n7 = e11.axis, i6 = e11.scale, o5 = e11.value, l5 = e11.lineStyle, a5 = e11.textStyle, d3 = e11.legend, s5 = e11.legendPosition, u6 = void 0 === s5 ? "top-right" : s5, c9 = e11.legendOffsetX, f3 = void 0 === c9 ? 14 : c9, p4 = e11.legendOffsetY, h2 = void 0 === p4 ? 14 : p4, g4 = e11.legendOrientation, b5 = void 0 === g4 ? "horizontal" : g4, m5 = zt(), y4 = 0, v6 = 0, _3 = 0, w5 = 0;
  "y" === n7 ? (_3 = i6(o5), v6 = r7) : (y4 = i6(o5), w5 = t10);
  var k5 = null;
  if (d3) {
    var R = function(e12) {
      var r8 = e12.axis, t11 = e12.width, n8 = e12.height, i7 = e12.position, o6 = e12.offsetX, l6 = e12.offsetY, a6 = e12.orientation, d4 = 0, s6 = 0, u7 = "vertical" === a6 ? -90 : 0, c10 = "start";
      if ("x" === r8) switch (i7) {
        case "top-left":
          d4 = -o6, s6 = l6, c10 = "end";
          break;
        case "top":
          s6 = -l6, c10 = "horizontal" === a6 ? "middle" : "start";
          break;
        case "top-right":
          d4 = o6, s6 = l6, c10 = "horizontal" === a6 ? "start" : "end";
          break;
        case "right":
          d4 = o6, s6 = n8 / 2, c10 = "horizontal" === a6 ? "start" : "middle";
          break;
        case "bottom-right":
          d4 = o6, s6 = n8 - l6, c10 = "start";
          break;
        case "bottom":
          s6 = n8 + l6, c10 = "horizontal" === a6 ? "middle" : "end";
          break;
        case "bottom-left":
          s6 = n8 - l6, d4 = -o6, c10 = "horizontal" === a6 ? "end" : "start";
          break;
        case "left":
          d4 = -o6, s6 = n8 / 2, c10 = "horizontal" === a6 ? "end" : "middle";
      }
      else switch (i7) {
        case "top-left":
          d4 = o6, s6 = -l6, c10 = "start";
          break;
        case "top":
          d4 = t11 / 2, s6 = -l6, c10 = "horizontal" === a6 ? "middle" : "start";
          break;
        case "top-right":
          d4 = t11 - o6, s6 = -l6, c10 = "horizontal" === a6 ? "end" : "start";
          break;
        case "right":
          d4 = t11 + o6, c10 = "horizontal" === a6 ? "start" : "middle";
          break;
        case "bottom-right":
          d4 = t11 - o6, s6 = l6, c10 = "end";
          break;
        case "bottom":
          d4 = t11 / 2, s6 = l6, c10 = "horizontal" === a6 ? "middle" : "end";
          break;
        case "bottom-left":
          d4 = o6, s6 = l6, c10 = "horizontal" === a6 ? "start" : "end";
          break;
        case "left":
          d4 = -o6, c10 = "horizontal" === a6 ? "end" : "middle";
      }
      return { x: d4, y: s6, rotation: u7, textAnchor: c10 };
    }({ axis: n7, width: r7, height: t10, position: u6, offsetX: f3, offsetY: h2, orientation: b5 });
    k5 = (0, import_jsx_runtime2.jsx)("text", { transform: "translate(" + R.x + ", " + R.y + ") rotate(" + R.rotation + ")", textAnchor: R.textAnchor, dominantBaseline: "central", style: a5, children: d3 });
  }
  return (0, import_jsx_runtime2.jsxs)("g", { transform: "translate(" + y4 + ", " + _3 + ")", children: [(0, import_jsx_runtime2.jsx)("line", { x1: 0, x2: v6, y1: 0, y2: w5, stroke: m5.markers.lineColor, strokeWidth: m5.markers.lineStrokeWidth, style: l5 }), k5] });
};
_n.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, scale: import_prop_types.default.func.isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object, legend: import_prop_types.default.string, legendPosition: import_prop_types.default.oneOf(["top-left", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left"]), legendOffsetX: import_prop_types.default.number.isRequired, legendOffsetY: import_prop_types.default.number.isRequired, legendOrientation: import_prop_types.default.oneOf(["horizontal", "vertical"]).isRequired };
var wn = (0, import_react5.memo)(_n);
var kn = function(e11) {
  var r7 = e11.markers, t10 = e11.width, n7 = e11.height, i6 = e11.xScale, o5 = e11.yScale;
  return r7 && 0 !== r7.length ? r7.map(function(e12, r8) {
    return (0, import_jsx_runtime2.jsx)(wn, jr({}, e12, { width: t10, height: n7, scale: "y" === e12.axis ? o5 : i6 }), r8);
  }) : null;
};
kn.propTypes = { width: import_prop_types.default.number.isRequired, height: import_prop_types.default.number.isRequired, xScale: import_prop_types.default.func.isRequired, yScale: import_prop_types.default.func.isRequired, markers: import_prop_types.default.arrayOf(import_prop_types.default.shape({ axis: import_prop_types.default.oneOf(["x", "y"]).isRequired, value: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string, import_prop_types.default.instanceOf(Date)]).isRequired, lineStyle: import_prop_types.default.object, textStyle: import_prop_types.default.object })) };
var Rn = (0, import_react5.memo)(kn);
var xn = ["theme", "renderWrapper", "animate", "motionConfig"];
var On = function(e11) {
  return function(r7) {
    var t10, n7;
    function i6() {
      return r7.apply(this, arguments) || this;
    }
    return n7 = r7, (t10 = i6).prototype = Object.create(n7.prototype), t10.prototype.constructor = t10, Sr(t10, n7), i6.prototype.render = function() {
      var r8 = this.props, t11 = r8.theme, n8 = r8.renderWrapper, i7 = r8.animate, o5 = r8.motionConfig, l5 = Br(r8, xn);
      return (0, import_jsx_runtime2.jsx)(St, { theme: t11, renderWrapper: n8, isInteractive: l5.isInteractive, animate: i7, motionConfig: o5, children: (0, import_jsx_runtime2.jsx)(e11, jr({}, l5)) });
    }, i6;
  }(import_react5.Component);
};
var qn = function(e11, r7) {
  var t10, n7 = (0, import_isFunction.default)(e11) ? e11 : function(r8) {
    return (0, import_get.default)(r8, e11);
  };
  return r7 && (t10 = (0, import_isFunction.default)(r7) ? r7 : format(r7)), t10 ? function(e12) {
    return t10(n7(e12));
  } : n7;
};
var Mn = function(e11, r7, t10, n7) {
  var i6 = t10 - e11, o5 = n7 - r7;
  return i6 *= i6, o5 *= o5, Math.sqrt(i6 + o5);
};
var jn = function(e11, r7, t10, n7, i6, o5) {
  return e11 <= i6 && i6 <= e11 + t10 && r7 <= o5 && o5 <= r7 + n7;
};
var Sn = function(e11, r7) {
  var t10, n7 = "touches" in r7 ? r7.touches[0] : r7, i6 = n7.clientX, o5 = n7.clientY, l5 = e11.getBoundingClientRect(), a5 = (t10 = void 0 !== e11.getBBox ? e11.getBBox() : { width: e11.offsetWidth || 0, height: e11.offsetHeight || 0 }).width === l5.width ? 1 : t10.width / l5.width;
  return [(i6 - l5.left) * a5, (o5 - l5.top) * a5];
};
var Bn = Object.keys(Et);
var Gn = Object.keys(un);
var Ln = function(e11, r7, t10) {
  if ("*" === e11) return true;
  if ((0, import_isFunction.default)(e11)) return e11(r7);
  if ((0, import_isPlainObject.default)(e11)) {
    var n7 = t10 ? (0, import_get.default)(r7, t10) : r7;
    return (0, import_isEqual.default)((0, import_pick.default)(n7, Object.keys(e11)), e11);
  }
  return false;
};
var In = function(e11, r7, t10, n7) {
  var i6 = void 0 === n7 ? {} : n7, o5 = i6.dataKey, l5 = i6.colorKey, a5 = void 0 === l5 ? "color" : l5, d3 = i6.targetKey, s5 = void 0 === d3 ? "fill" : d3, u6 = [], c9 = {};
  return e11.length && r7.length && (u6 = [].concat(e11), r7.forEach(function(r8) {
    for (var n8 = function() {
      var n9 = t10[i7], l6 = n9.id, d4 = n9.match;
      if (Ln(d4, r8, o5)) {
        var f3 = e11.find(function(e12) {
          return e12.id === l6;
        });
        if (f3) {
          if (Gn.includes(f3.type)) if ("inherit" === f3.background || "inherit" === f3.color) {
            var p4 = (0, import_get.default)(r8, a5), h2 = f3.background, g4 = f3.color, b5 = l6;
            "inherit" === f3.background && (b5 = b5 + ".bg." + p4, h2 = p4), "inherit" === f3.color && (b5 = b5 + ".fg." + p4, g4 = p4), (0, import_set.default)(r8, s5, "url(#" + b5 + ")"), c9[b5] || (u6.push(jr({}, f3, { id: b5, background: h2, color: g4 })), c9[b5] = 1);
          } else (0, import_set.default)(r8, s5, "url(#" + l6 + ")");
          else if (Bn.includes(f3.type)) {
            if (f3.colors.map(function(e12) {
              return e12.color;
            }).includes("inherit")) {
              var m5 = (0, import_get.default)(r8, a5), _3 = l6, w5 = jr({}, f3, { colors: f3.colors.map(function(e12, r9) {
                return "inherit" !== e12.color ? e12 : (_3 = _3 + "." + r9 + "." + m5, jr({}, e12, { color: "inherit" === e12.color ? m5 : e12.color }));
              }) });
              w5.id = _3, (0, import_set.default)(r8, s5, "url(#" + _3 + ")"), c9[_3] || (u6.push(w5), c9[_3] = 1);
            } else (0, import_set.default)(r8, s5, "url(#" + l6 + ")");
          }
        }
        return "break";
      }
    }, i7 = 0; i7 < t10.length; i7++) {
      if ("break" === n8()) break;
    }
  })), u6;
};

// node_modules/@nivo/colors/dist/nivo-colors.es.js
var import_react6 = __toESM(require_react());
var import_get2 = __toESM(require_get());
var import_isPlainObject2 = __toESM(require_isPlainObject());
var import_prop_types2 = __toESM(require_prop_types());
function qe() {
  return qe = Object.assign ? Object.assign.bind() : function(e11) {
    for (var r7 = 1; r7 < arguments.length; r7++) {
      var n7 = arguments[r7];
      for (var t10 in n7) Object.prototype.hasOwnProperty.call(n7, t10) && (e11[t10] = n7[t10]);
    }
    return e11;
  }, qe.apply(this, arguments);
}
function Ce(e11, r7) {
  (null == r7 || r7 > e11.length) && (r7 = e11.length);
  for (var n7 = 0, t10 = new Array(r7); n7 < r7; n7++) t10[n7] = e11[n7];
  return t10;
}
function Ge(e11, r7) {
  var n7 = "undefined" != typeof Symbol && e11[Symbol.iterator] || e11["@@iterator"];
  if (n7) return (n7 = n7.call(e11)).next.bind(n7);
  if (Array.isArray(e11) || (n7 = function(e12, r8) {
    if (e12) {
      if ("string" == typeof e12) return Ce(e12, r8);
      var n8 = Object.prototype.toString.call(e12).slice(8, -1);
      return "Object" === n8 && e12.constructor && (n8 = e12.constructor.name), "Map" === n8 || "Set" === n8 ? Array.from(e12) : "Arguments" === n8 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n8) ? Ce(e12, r8) : void 0;
    }
  }(e11)) || r7 && e11 && "number" == typeof e11.length) {
    n7 && (e11 = n7);
    var t10 = 0;
    return function() {
      return t10 >= e11.length ? { done: true } : { done: false, value: e11[t10++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var Re = { nivo: ["#e8c1a0", "#f47560", "#f1e15b", "#e8a838", "#61cdbb", "#97e3d5"], category10: category10_default, accent: Accent_default, dark2: Dark2_default, paired: Paired_default, pastel1: Pastel1_default, pastel2: Pastel2_default, set1: Set1_default, set2: Set2_default, set3: Set3_default, tableau10: Tableau10_default };
var Ve = Object.keys(Re);
var Pe = { brown_blueGreen: scheme, purpleRed_green: scheme2, pink_yellowGreen: scheme3, purple_orange: scheme4, red_blue: scheme5, red_grey: scheme6, red_yellow_blue: scheme7, red_yellow_green: scheme8, spectral: scheme9 };
var Te = Object.keys(Pe);
var Ue = { brown_blueGreen: BrBG_default, purpleRed_green: PRGn_default, pink_yellowGreen: PiYG_default, purple_orange: PuOr_default, red_blue: RdBu_default, red_grey: RdGy_default, red_yellow_blue: RdYlBu_default, red_yellow_green: RdYlGn_default, spectral: Spectral_default };
var De = { blues: scheme22, greens: scheme23, greys: scheme24, oranges: scheme27, purples: scheme25, reds: scheme26, blue_green: scheme10, blue_purple: scheme11, green_blue: scheme12, orange_red: scheme13, purple_blue_green: scheme14, purple_blue: scheme15, purple_red: scheme16, red_purple: scheme17, yellow_green_blue: scheme18, yellow_green: scheme19, yellow_orange_brown: scheme20, yellow_orange_red: scheme21 };
var Me = Object.keys(De);
var $e = { blues: Blues_default, greens: Greens_default, greys: Greys_default, oranges: Oranges_default, purples: Purples_default, reds: Reds_default, turbo: turbo_default, viridis: viridis_default, inferno, magma, plasma, cividis: cividis_default, warm, cool, cubehelixDefault: cubehelix_default2, blue_green: BuGn_default, blue_purple: BuPu_default, green_blue: GnBu_default, orange_red: OrRd_default, purple_blue_green: PuBuGn_default, purple_blue: PuBu_default, purple_red: PuRd_default, red_purple: RdPu_default, yellow_green_blue: YlGnBu_default, yellow_green: YlGn_default, yellow_orange_brown: YlOrBr_default, yellow_orange_red: YlOrRd_default };
var Be = qe({}, Re, Pe, De);
var Fe = Object.keys(Be);
var He = function(e11) {
  return Ve.includes(e11);
};
var Je = function(e11) {
  return Te.includes(e11);
};
var Ke = function(e11) {
  return Me.includes(e11);
};
var Le = { rainbow: rainbow_default, sinebow: sinebow_default };
var Ne = qe({}, Ue, $e, Le);
var Qe2 = Object.keys(Ne);
var We = function(e11, r7) {
  if ("function" == typeof e11) return e11;
  if ((0, import_isPlainObject2.default)(e11)) {
    if (function(e12) {
      return void 0 !== e12.theme;
    }(e11)) {
      if (void 0 === r7) throw new Error("Unable to use color from theme as no theme was provided");
      var n7 = (0, import_get2.default)(r7, e11.theme);
      if (void 0 === n7) throw new Error("Color from theme is undefined at path: '" + e11.theme + "'");
      return function() {
        return n7;
      };
    }
    if (function(e12) {
      return void 0 !== e12.from;
    }(e11)) {
      var t10 = function(r8) {
        return (0, import_get2.default)(r8, e11.from);
      };
      if (Array.isArray(e11.modifiers)) {
        for (var o5, i6 = [], u6 = function() {
          var e12 = o5.value, r8 = e12[0], n8 = e12[1];
          if ("brighter" === r8) i6.push(function(e13) {
            return e13.brighter(n8);
          });
          else if ("darker" === r8) i6.push(function(e13) {
            return e13.darker(n8);
          });
          else {
            if ("opacity" !== r8) throw new Error("Invalid color modifier: '" + r8 + "', must be one of: 'brighter', 'darker', 'opacity'");
            i6.push(function(e13) {
              return e13.opacity = n8, e13;
            });
          }
        }, a5 = Ge(e11.modifiers); !(o5 = a5()).done; ) u6();
        return 0 === i6.length ? t10 : function(e12) {
          return i6.reduce(function(e13, r8) {
            return r8(e13);
          }, rgb2(t10(e12))).toString();
        };
      }
      return t10;
    }
    throw new Error("Invalid color spec, you should either specify 'theme' or 'from' when using a config object");
  }
  return function() {
    return e11;
  };
};
var Xe = function(e11, r7) {
  return (0, import_react6.useMemo)(function() {
    return We(e11, r7);
  }, [e11, r7]);
};
var Ye = import_prop_types2.default.oneOfType([import_prop_types2.default.string, import_prop_types2.default.func, import_prop_types2.default.shape({ theme: import_prop_types2.default.string.isRequired }), import_prop_types2.default.shape({ from: import_prop_types2.default.string.isRequired, modifiers: import_prop_types2.default.arrayOf(import_prop_types2.default.array) })]);
var fr = function(e11, r7) {
  if ("function" == typeof e11) return e11;
  var n7 = "function" == typeof r7 ? r7 : function(e12) {
    return (0, import_get2.default)(e12, r7);
  };
  if (Array.isArray(e11)) {
    var t10 = ordinal(e11), o5 = function(e12) {
      return t10(n7(e12));
    };
    return o5.scale = t10, o5;
  }
  if ((0, import_isPlainObject2.default)(e11)) {
    if (function(e12) {
      return void 0 !== e12.datum;
    }(e11)) return function(r8) {
      return (0, import_get2.default)(r8, e11.datum);
    };
    if (function(e12) {
      return void 0 !== e12.scheme;
    }(e11)) {
      if (He(e11.scheme)) {
        var i6 = ordinal(Be[e11.scheme]), u6 = function(e12) {
          return i6(n7(e12));
        };
        return u6.scale = i6, u6;
      }
      if (Je(e11.scheme)) {
        if (void 0 !== e11.size && (e11.size < 3 || e11.size > 11)) throw new Error("Invalid size '" + e11.size + "' for diverging color scheme '" + e11.scheme + "', must be between 3~11");
        var a5 = ordinal(Be[e11.scheme][e11.size || 11]), l5 = function(e12) {
          return a5(n7(e12));
        };
        return l5.scale = a5, l5;
      }
      if (Ke(e11.scheme)) {
        if (void 0 !== e11.size && (e11.size < 3 || e11.size > 9)) throw new Error("Invalid size '" + e11.size + "' for sequential color scheme '" + e11.scheme + "', must be between 3~9");
        var c9 = ordinal(Be[e11.scheme][e11.size || 9]), s5 = function(e12) {
          return c9(n7(e12));
        };
        return s5.scale = c9, s5;
      }
    }
    throw new Error("Invalid colors, when using an object, you should either pass a 'datum' or a 'scheme' property");
  }
  return function() {
    return e11;
  };
};
var pr = function(e11, r7) {
  return (0, import_react6.useMemo)(function() {
    return fr(e11, r7);
  }, [e11, r7]);
};

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var t6 = __toESM(require_react());
var import_react7 = __toESM(require_react());

// node_modules/@nivo/scales/dist/nivo-scales.es.js
var import_uniq = __toESM(require_uniq());
var import_uniqBy = __toESM(require_uniqBy());
var import_sortBy = __toESM(require_sortBy());
var import_last2 = __toESM(require_last());
var import_isDate = __toESM(require_isDate());
function $() {
  return $ = Object.assign ? Object.assign.bind() : function(n7) {
    for (var t10 = 1; t10 < arguments.length; t10++) {
      var r7 = arguments[t10];
      for (var e11 in r7) Object.prototype.hasOwnProperty.call(r7, e11) && (n7[e11] = r7[e11]);
    }
    return n7;
  }, $.apply(this, arguments);
}
var J = [function(n7) {
  return n7.setMilliseconds(0);
}, function(n7) {
  return n7.setSeconds(0);
}, function(n7) {
  return n7.setMinutes(0);
}, function(n7) {
  return n7.setHours(0);
}, function(n7) {
  return n7.setDate(1);
}, function(n7) {
  return n7.setMonth(0);
}];
var K2 = { millisecond: [], second: J.slice(0, 1), minute: J.slice(0, 2), hour: J.slice(0, 3), day: J.slice(0, 4), month: J.slice(0, 5), year: J.slice(0, 6) };
var L = function(n7) {
  return function(t10) {
    return K2[n7].forEach(function(n8) {
      n8(t10);
    }), t10;
  };
};
var Q = function(n7) {
  var t10 = n7.format, r7 = void 0 === t10 ? "native" : t10, e11 = n7.precision, a5 = void 0 === e11 ? "millisecond" : e11, u6 = n7.useUTC, c9 = void 0 === u6 || u6, s5 = L(a5);
  return function(n8) {
    if (void 0 === n8) return n8;
    if ("native" === r7 || n8 instanceof Date) return s5(n8);
    var t11 = c9 ? utcParse(r7) : timeParse(r7);
    return s5(t11(n8));
  };
};
var W2 = function(n7, t10, r7, e11) {
  var a5, i6, o5, c9, s5 = n7.min, d3 = void 0 === s5 ? 0 : s5, f3 = n7.max, l5 = void 0 === f3 ? "auto" : f3, m5 = n7.stacked, v6 = void 0 !== m5 && m5, y4 = n7.reverse, p4 = void 0 !== y4 && y4, h2 = n7.clamp, g4 = void 0 !== h2 && h2, x4 = n7.nice, k5 = void 0 !== x4 && x4;
  "auto" === d3 ? a5 = true === v6 ? null != (i6 = t10.minStacked) ? i6 : 0 : t10.min : a5 = d3;
  "auto" === l5 ? o5 = true === v6 ? null != (c9 = t10.maxStacked) ? c9 : 0 : t10.max : o5 = l5;
  var T4 = linear2().rangeRound("x" === e11 ? [0, r7] : [r7, 0]).domain(p4 ? [o5, a5] : [a5, o5]).clamp(g4);
  return true === k5 ? T4.nice() : "number" == typeof k5 && T4.nice(k5), X(T4, v6);
};
var X = function(n7, t10) {
  void 0 === t10 && (t10 = false);
  var r7 = n7;
  return r7.type = "linear", r7.stacked = t10, r7;
};
var Y = function(n7, t10, r7) {
  var e11 = point().range([0, r7]).domain(t10.all);
  return e11.type = "point", e11;
};
var _ = function(n7, t10, r7, e11) {
  var a5 = n7.round, i6 = void 0 === a5 || a5, o5 = band().range("x" === e11 ? [0, r7] : [r7, 0]).domain(t10.all).round(i6);
  return nn2(o5);
};
var nn2 = function(n7) {
  var t10 = n7;
  return t10.type = "band", t10;
};
var tn = function(n7, t10, r7) {
  var e11, a5, i6 = n7.format, o5 = void 0 === i6 ? "native" : i6, u6 = n7.precision, c9 = void 0 === u6 ? "millisecond" : u6, s5 = n7.min, l5 = void 0 === s5 ? "auto" : s5, m5 = n7.max, v6 = void 0 === m5 ? "auto" : m5, y4 = n7.useUTC, p4 = void 0 === y4 || y4, h2 = n7.nice, g4 = void 0 !== h2 && h2, x4 = Q({ format: o5, precision: c9, useUTC: p4 });
  e11 = "auto" === l5 ? x4(t10.min) : "native" !== o5 ? x4(l5) : l5, a5 = "auto" === v6 ? x4(t10.max) : "native" !== o5 ? x4(v6) : v6;
  var k5 = p4 ? utcTime() : time();
  k5.range([0, r7]), e11 && a5 && k5.domain([e11, a5]), true === g4 ? k5.nice() : "object" != typeof g4 && "number" != typeof g4 || k5.nice(g4);
  var T4 = k5;
  return T4.type = "time", T4.useUTC = p4, T4;
};
var rn2 = function(n7, t10, r7, e11) {
  var a5, i6 = n7.base, o5 = void 0 === i6 ? 10 : i6, u6 = n7.min, c9 = void 0 === u6 ? "auto" : u6, s5 = n7.max, d3 = void 0 === s5 ? "auto" : s5;
  if (t10.all.some(function(n8) {
    return 0 === n8;
  })) throw new Error("a log scale domain must not include or cross zero");
  var f3, m5, v6 = false;
  if (t10.all.filter(function(n8) {
    return null != n8;
  }).forEach(function(n8) {
    v6 || (void 0 === a5 ? a5 = Math.sign(n8) : Math.sign(n8) !== a5 && (v6 = true));
  }), v6) throw new Error("a log scale domain must be strictly-positive or strictly-negative");
  f3 = "auto" === c9 ? t10.min : c9, m5 = "auto" === d3 ? t10.max : d3;
  var y4 = log().domain([f3, m5]).rangeRound("x" === e11 ? [0, r7] : [r7, 0]).base(o5).nice();
  return y4.type = "log", y4;
};
var en = function(n7, t10, r7, e11) {
  var a5, i6, o5 = n7.constant, u6 = void 0 === o5 ? 1 : o5, c9 = n7.min, s5 = void 0 === c9 ? "auto" : c9, d3 = n7.max, f3 = void 0 === d3 ? "auto" : d3, l5 = n7.reverse, v6 = void 0 !== l5 && l5;
  a5 = "auto" === s5 ? t10.min : s5, i6 = "auto" === f3 ? t10.max : f3;
  var y4 = symlog().constant(u6).rangeRound("x" === e11 ? [0, r7] : [r7, 0]).nice();
  true === v6 ? y4.domain([i6, a5]) : y4.domain([a5, i6]);
  var p4 = y4;
  return p4.type = "symlog", p4;
};
var an2 = function(n7) {
  return "x" === n7 ? "y" : "x";
};
var on2 = function(n7, t10) {
  return n7 === t10;
};
var un2 = function(n7, t10) {
  return n7.getTime() === t10.getTime();
};
function cn2(n7, t10, r7, e11) {
  switch (n7.type) {
    case "linear":
      return W2(n7, t10, r7, e11);
    case "point":
      return Y(n7, t10, r7);
    case "band":
      return _(n7, t10, r7, e11);
    case "time":
      return tn(n7, t10, r7);
    case "log":
      return rn2(n7, t10, r7, e11);
    case "symlog":
      return en(n7, t10, r7, e11);
    default:
      throw new Error("invalid scale spec");
  }
}
var sn = function(n7, t10, r7) {
  var e11;
  if ("stacked" in r7 && r7.stacked) {
    var a5 = n7.data["x" === t10 ? "xStacked" : "yStacked"];
    return null == a5 ? null : r7(a5);
  }
  return null != (e11 = r7(n7.data[t10])) ? e11 : null;
};
var dn2 = function(n7, t10, r7, e11, a5) {
  var i6 = n7.map(function(n8) {
    return function(n9) {
      return $({}, n9, { data: n9.data.map(function(n10) {
        return { data: $({}, n10) };
      }) });
    }(n8);
  }), o5 = fn2(i6, t10, r7);
  "stacked" in t10 && true === t10.stacked && vn2(o5, i6), "stacked" in r7 && true === r7.stacked && yn2(o5, i6);
  var u6 = cn2(t10, o5.x, e11, "x"), c9 = cn2(r7, o5.y, a5, "y"), s5 = i6.map(function(n8) {
    return $({}, n8, { data: n8.data.map(function(n9) {
      return $({}, n9, { position: { x: sn(n9, "x", u6), y: sn(n9, "y", c9) } });
    }) });
  });
  return $({}, o5, { series: s5, xScale: u6, yScale: c9 });
};
var fn2 = function(n7, t10, r7) {
  return { x: ln(n7, "x", t10), y: ln(n7, "y", r7) };
};
var ln = function(a5, i6, o5, u6) {
  var c9 = void 0 === u6 ? {} : u6, s5 = c9.getValue, d3 = void 0 === s5 ? function(n7) {
    return n7.data[i6];
  } : s5, f3 = c9.setValue, l5 = void 0 === f3 ? function(n7, t10) {
    n7.data[i6] = t10;
  } : f3;
  if ("linear" === o5.type) a5.forEach(function(n7) {
    n7.data.forEach(function(n8) {
      var t10 = d3(n8);
      t10 && l5(n8, parseFloat(String(t10)));
    });
  });
  else if ("time" === o5.type && "native" !== o5.format) {
    var m5 = Q(o5);
    a5.forEach(function(n7) {
      n7.data.forEach(function(n8) {
        var t10 = d3(n8);
        t10 && l5(n8, m5(t10));
      });
    });
  }
  var v6 = [];
  switch (a5.forEach(function(n7) {
    n7.data.forEach(function(n8) {
      v6.push(d3(n8));
    });
  }), o5.type) {
    case "linear":
      var y4 = (0, import_sortBy.default)((0, import_uniq.default)(v6).filter(function(n7) {
        return null !== n7;
      }), function(n7) {
        return n7;
      });
      return { all: y4, min: Math.min.apply(Math, y4), max: Math.max.apply(Math, y4) };
    case "time":
      var p4 = (0, import_uniqBy.default)(v6, function(n7) {
        return n7.getTime();
      }).slice(0).sort(function(n7, t10) {
        return t10.getTime() - n7.getTime();
      }).reverse();
      return { all: p4, min: p4[0], max: (0, import_last2.default)(p4) };
    default:
      var h2 = (0, import_uniq.default)(v6);
      return { all: h2, min: h2[0], max: (0, import_last2.default)(h2) };
  }
};
var mn2 = function(n7, t10, r7) {
  var i6 = an2(n7), o5 = [];
  t10[i6].all.forEach(function(t11) {
    var u6 = (0, import_isDate.default)(t11) ? un2 : on2, c9 = [];
    r7.forEach(function(r8) {
      var a5 = r8.data.find(function(n8) {
        return u6(n8.data[i6], t11);
      }), s5 = null, d3 = null;
      if (void 0 !== a5) {
        if (null !== (s5 = a5.data[n7])) {
          var f3 = (0, import_last2.default)(c9);
          void 0 === f3 ? d3 = s5 : null !== f3 && (d3 = f3 + s5);
        }
        a5.data["x" === n7 ? "xStacked" : "yStacked"] = d3;
      }
      c9.push(d3), null !== d3 && o5.push(d3);
    });
  }), t10[n7].minStacked = Math.min.apply(Math, o5), t10[n7].maxStacked = Math.max.apply(Math, o5);
};
var vn2 = function(n7, t10) {
  return mn2("x", n7, t10);
};
var yn2 = function(n7, t10) {
  return mn2("y", n7, t10);
};
var pn2 = function(n7) {
  var t10 = n7.bandwidth();
  if (0 === t10) return n7;
  var r7 = t10 / 2;
  return n7.round() && (r7 = Math.round(r7)), function(t11) {
    var e11;
    return (null != (e11 = n7(t11)) ? e11 : 0) + r7;
  };
};
var hn2 = { millisecond: [millisecond_default, millisecond_default], second: [second_default, second_default], minute: [minute_default, utcMinute_default], hour: [hour_default, utcHour_default], day: [newInterval(function(n7) {
  return n7.setHours(0, 0, 0, 0);
}, function(n7, t10) {
  return n7.setDate(n7.getDate() + t10);
}, function(n7, t10) {
  return (t10.getTime() - n7.getTime()) / 864e5;
}, function(n7) {
  return Math.floor(n7.getTime() / 864e5);
}), newInterval(function(n7) {
  return n7.setUTCHours(0, 0, 0, 0);
}, function(n7, t10) {
  return n7.setUTCDate(n7.getUTCDate() + t10);
}, function(n7, t10) {
  return (t10.getTime() - n7.getTime()) / 864e5;
}, function(n7) {
  return Math.floor(n7.getTime() / 864e5);
})], week: [sunday, utcSunday2], sunday: [sunday, utcSunday2], monday: [monday, utcMonday2], tuesday: [tuesday, utcTuesday2], wednesday: [wednesday, utcWednesday2], thursday: [thursday, utcThursday2], friday: [friday, utcFriday2], saturday: [saturday, utcSaturday2], month: [month_default, utcMonth_default], year: [year_default, utcYear_default] };
var gn2 = Object.keys(hn2);
var xn2 = new RegExp("^every\\s*(\\d+)?\\s*(" + gn2.join("|") + ")s?$", "i");
var kn2 = function(n7, t10) {
  if (Array.isArray(t10)) return t10;
  if ("string" == typeof t10 && "useUTC" in n7) {
    var r7 = t10.match(xn2);
    if (r7) {
      var e11 = r7[1], a5 = r7[2], i6 = hn2[a5][n7.useUTC ? 1 : 0];
      if ("day" === a5) {
        var o5, u6, c9 = n7.domain(), s5 = c9[0], d3 = c9[1], f3 = new Date(d3);
        return f3.setDate(f3.getDate() + 1), null != (o5 = null == (u6 = i6.every(Number(null != e11 ? e11 : 1))) ? void 0 : u6.range(s5, f3)) ? o5 : [];
      }
      if (void 0 === e11) return n7.ticks(i6);
      var l5 = i6.every(Number(e11));
      if (l5) return n7.ticks(l5);
    }
    throw new Error("Invalid tickValues: " + t10);
  }
  if ("ticks" in n7) {
    if (void 0 === t10) return n7.ticks();
    if ("number" == typeof (m5 = t10) && isFinite(m5) && Math.floor(m5) === m5) return n7.ticks(t10);
  }
  var m5;
  return n7.domain();
};

// node_modules/@nivo/axes/dist/nivo-axes.es.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
function p2() {
  return p2 = Object.assign ? Object.assign.bind() : function(t10) {
    for (var e11 = 1; e11 < arguments.length; e11++) {
      var i6 = arguments[e11];
      for (var n7 in i6) Object.prototype.hasOwnProperty.call(i6, n7) && (t10[n7] = i6[n7]);
    }
    return t10;
  }, p2.apply(this, arguments);
}
var b2 = function(t10) {
  var e11, i6 = t10.axis, n7 = t10.scale, r7 = t10.ticksPosition, o5 = t10.tickValues, l5 = t10.tickSize, s5 = t10.tickPadding, c9 = t10.tickRotation, f3 = t10.truncateTickAt, u6 = t10.engine, d3 = void 0 === u6 ? "svg" : u6, x4 = kn2(n7, o5), m5 = rn[d3], k5 = "bandwidth" in n7 ? pn2(n7) : n7, g4 = { lineX: 0, lineY: 0 }, v6 = { textX: 0, textY: 0 }, b5 = "object" == typeof document && "rtl" === document.dir, P4 = m5.align.center, T4 = m5.baseline.center;
  "x" === i6 ? (e11 = function(t11) {
    var e12;
    return { x: null != (e12 = k5(t11)) ? e12 : 0, y: 0 };
  }, g4.lineY = l5 * ("after" === r7 ? 1 : -1), v6.textY = (l5 + s5) * ("after" === r7 ? 1 : -1), T4 = "after" === r7 ? m5.baseline.top : m5.baseline.bottom, 0 === c9 ? P4 = m5.align.center : "after" === r7 && c9 < 0 || "before" === r7 && c9 > 0 ? (P4 = m5.align[b5 ? "left" : "right"], T4 = m5.baseline.center) : ("after" === r7 && c9 > 0 || "before" === r7 && c9 < 0) && (P4 = m5.align[b5 ? "right" : "left"], T4 = m5.baseline.center)) : (e11 = function(t11) {
    var e12;
    return { x: 0, y: null != (e12 = k5(t11)) ? e12 : 0 };
  }, g4.lineX = l5 * ("after" === r7 ? 1 : -1), v6.textX = (l5 + s5) * ("after" === r7 ? 1 : -1), P4 = "after" === r7 ? m5.align.left : m5.align.right);
  return { ticks: x4.map(function(t11) {
    var i7 = "string" == typeof t11 ? function(t14) {
      var e12 = String(t14).length;
      return f3 && f3 > 0 && e12 > f3 ? "" + String(t14).slice(0, f3).concat("...") : "" + t14;
    }(t11) : t11;
    return p2({ key: t11 instanceof Date ? "" + t11.valueOf() : "" + t11, value: i7 }, e11(t11), g4, v6);
  }), textAlign: P4, textBaseline: T4 };
};
var P2 = function(t10, e11) {
  if (void 0 === t10 || "function" == typeof t10) return t10;
  if ("time" === e11.type) {
    var i6 = timeFormat(t10);
    return function(t11) {
      return i6(t11 instanceof Date ? t11 : new Date(t11));
    };
  }
  return format(t10);
};
var T2 = function(t10) {
  var e11, i6 = t10.width, n7 = t10.height, r7 = t10.scale, a5 = t10.axis, o5 = t10.values, l5 = (e11 = o5, Array.isArray(e11) ? o5 : void 0) || kn2(r7, o5), s5 = "bandwidth" in r7 ? pn2(r7) : r7, c9 = "x" === a5 ? l5.map(function(t11) {
    var e12, i7;
    return { key: t11 instanceof Date ? "" + t11.valueOf() : "" + t11, x1: null != (e12 = s5(t11)) ? e12 : 0, x2: null != (i7 = s5(t11)) ? i7 : 0, y1: 0, y2: n7 };
  }) : l5.map(function(t11) {
    var e12, n8;
    return { key: t11 instanceof Date ? "" + t11.valueOf() : "" + t11, x1: 0, x2: i6, y1: null != (e12 = s5(t11)) ? e12 : 0, y2: null != (n8 = s5(t11)) ? n8 : 0 };
  });
  return c9;
};
var A3 = (0, import_react7.memo)(function(t10) {
  var e11, n7 = t10.value, r7 = t10.format, a5 = t10.lineX, s5 = t10.lineY, c9 = t10.onClick, u6 = t10.textBaseline, d3 = t10.textAnchor, x4 = t10.animatedProps, m5 = zt(), y4 = m5.axis.ticks.line, h2 = m5.axis.ticks.text, v6 = null != (e11 = null == r7 ? void 0 : r7(n7)) ? e11 : n7, b5 = (0, import_react7.useMemo)(function() {
    var t11 = { opacity: x4.opacity };
    return c9 ? { style: p2({}, t11, { cursor: "pointer" }), onClick: function(t14) {
      return c9(t14, v6);
    } } : { style: t11 };
  }, [x4.opacity, c9, v6]);
  return (0, import_jsx_runtime3.jsxs)(animated.g, p2({ transform: x4.transform }, b5, { children: [(0, import_jsx_runtime3.jsx)("line", { x1: 0, x2: a5, y1: 0, y2: s5, style: y4 }), h2.outlineWidth > 0 && (0, import_jsx_runtime3.jsx)(animated.text, { dominantBaseline: u6, textAnchor: d3, transform: x4.textTransform, style: h2, strokeWidth: 2 * h2.outlineWidth, stroke: h2.outlineColor, strokeLinejoin: "round", children: "" + v6 }), (0, import_jsx_runtime3.jsx)(animated.text, { dominantBaseline: u6, textAnchor: d3, transform: x4.textTransform, style: Mt(h2), children: "" + v6 })] }));
});
var S = function(e11) {
  var r7 = e11.axis, a5 = e11.scale, l5 = e11.x, c9 = void 0 === l5 ? 0 : l5, x4 = e11.y, m5 = void 0 === x4 ? 0 : x4, y4 = e11.length, h2 = e11.ticksPosition, T4 = e11.tickValues, S3 = e11.tickSize, W5 = void 0 === S3 ? 5 : S3, w5 = e11.tickPadding, B5 = void 0 === w5 ? 5 : w5, X5 = e11.tickRotation, Y4 = void 0 === X5 ? 0 : X5, C6 = e11.format, O5 = e11.renderTick, j3 = void 0 === O5 ? A3 : O5, z6 = e11.truncateTickAt, V2 = e11.legend, D4 = e11.legendPosition, R = void 0 === D4 ? "end" : D4, E4 = e11.legendOffset, q2 = void 0 === E4 ? 0 : E4, F2 = e11.onClick, L3 = e11.ariaHidden, N2 = zt(), H4 = N2.axis.legend.text, I2 = (0, import_react7.useMemo)(function() {
    return P2(C6, a5);
  }, [C6, a5]), J2 = b2({ axis: r7, scale: a5, ticksPosition: h2, tickValues: T4, tickSize: W5, tickPadding: B5, tickRotation: Y4, truncateTickAt: z6 }), G = J2.ticks, K3 = J2.textAlign, M3 = J2.textBaseline, Q3 = null;
  if (void 0 !== V2) {
    var U2, Z2 = 0, $3 = 0, _3 = 0;
    "y" === r7 ? (_3 = -90, Z2 = q2, "start" === R ? (U2 = "start", $3 = y4) : "middle" === R ? (U2 = "middle", $3 = y4 / 2) : "end" === R && (U2 = "end")) : ($3 = q2, "start" === R ? U2 = "start" : "middle" === R ? (U2 = "middle", Z2 = y4 / 2) : "end" === R && (U2 = "end", Z2 = y4)), Q3 = (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [H4.outlineWidth > 0 && (0, import_jsx_runtime3.jsx)("text", { transform: "translate(" + Z2 + ", " + $3 + ") rotate(" + _3 + ")", textAnchor: U2, style: p2({ dominantBaseline: "central" }, H4), strokeWidth: 2 * H4.outlineWidth, stroke: H4.outlineColor, strokeLinejoin: "round", children: V2 }), (0, import_jsx_runtime3.jsx)("text", { transform: "translate(" + Z2 + ", " + $3 + ") rotate(" + _3 + ")", textAnchor: U2, style: p2({ dominantBaseline: "central" }, H4), children: V2 })] });
  }
  var tt2 = Ur(), et2 = tt2.animate, it2 = tt2.config, nt2 = useSpring({ transform: "translate(" + c9 + "," + m5 + ")", lineX2: "x" === r7 ? y4 : 0, lineY2: "x" === r7 ? 0 : y4, config: it2, immediate: !et2 }), rt2 = (0, import_react7.useCallback)(function(t10) {
    return { opacity: 1, transform: "translate(" + t10.x + "," + t10.y + ")", textTransform: "translate(" + t10.textX + "," + t10.textY + ") rotate(" + Y4 + ")" };
  }, [Y4]), at2 = (0, import_react7.useCallback)(function(t10) {
    return { opacity: 0, transform: "translate(" + t10.x + "," + t10.y + ")", textTransform: "translate(" + t10.textX + "," + t10.textY + ") rotate(" + Y4 + ")" };
  }, [Y4]), ot2 = useTransition(G, { keys: function(t10) {
    return t10.key;
  }, initial: rt2, from: at2, enter: rt2, update: rt2, leave: { opacity: 0 }, config: it2, immediate: !et2 });
  return (0, import_jsx_runtime3.jsxs)(animated.g, { transform: nt2.transform, "aria-hidden": L3, children: [ot2(function(e12, i6, n7, r8) {
    return t6.createElement(j3, p2({ tickIndex: r8, format: I2, rotate: Y4, textBaseline: M3, textAnchor: K3, truncateTickAt: z6, animatedProps: e12 }, i6, F2 ? { onClick: F2 } : {}));
  }), (0, import_jsx_runtime3.jsx)(animated.line, { style: N2.axis.domain.line, x1: 0, x2: nt2.lineX2, y1: 0, y2: nt2.lineY2 }), Q3] });
};
var W3 = (0, import_react7.memo)(S);
var w2 = ["top", "right", "bottom", "left"];
var B2 = (0, import_react7.memo)(function(t10) {
  var e11 = t10.xScale, i6 = t10.yScale, n7 = t10.width, r7 = t10.height, a5 = { top: t10.top, right: t10.right, bottom: t10.bottom, left: t10.left };
  return (0, import_jsx_runtime3.jsx)(import_jsx_runtime3.Fragment, { children: w2.map(function(t11) {
    var o5 = a5[t11];
    if (!o5) return null;
    var l5 = "top" === t11 || "bottom" === t11;
    return (0, import_jsx_runtime3.jsx)(W3, p2({}, o5, { axis: l5 ? "x" : "y", x: "right" === t11 ? n7 : 0, y: "bottom" === t11 ? r7 : 0, scale: l5 ? e11 : i6, length: l5 ? n7 : r7, ticksPosition: "top" === t11 || "left" === t11 ? "before" : "after", truncateTickAt: o5.truncateTickAt }), t11);
  }) });
});
var X2 = (0, import_react7.memo)(function(t10) {
  var e11 = t10.animatedProps, i6 = zt();
  return (0, import_jsx_runtime3.jsx)(animated.line, p2({}, e11, i6.grid.line));
});
var Y2 = (0, import_react7.memo)(function(t10) {
  var e11 = t10.lines, i6 = Ur(), n7 = i6.animate, a5 = i6.config, o5 = useTransition(e11, { keys: function(t11) {
    return t11.key;
  }, initial: function(t11) {
    return { opacity: 1, x1: t11.x1, x2: t11.x2, y1: t11.y1, y2: t11.y2 };
  }, from: function(t11) {
    return { opacity: 0, x1: t11.x1, x2: t11.x2, y1: t11.y1, y2: t11.y2 };
  }, enter: function(t11) {
    return { opacity: 1, x1: t11.x1, x2: t11.x2, y1: t11.y1, y2: t11.y2 };
  }, update: function(t11) {
    return { opacity: 1, x1: t11.x1, x2: t11.x2, y1: t11.y1, y2: t11.y2 };
  }, leave: { opacity: 0 }, config: a5, immediate: !n7 });
  return (0, import_jsx_runtime3.jsx)("g", { children: o5(function(t11, e12) {
    return (0, import_react7.createElement)(X2, p2({}, e12, { key: e12.key, animatedProps: t11 }));
  }) });
});
var C4 = (0, import_react7.memo)(function(t10) {
  var e11 = t10.width, n7 = t10.height, r7 = t10.xScale, a5 = t10.yScale, o5 = t10.xValues, l5 = t10.yValues, s5 = (0, import_react7.useMemo)(function() {
    return !!r7 && T2({ width: e11, height: n7, scale: r7, axis: "x", values: o5 });
  }, [r7, o5, e11, n7]), c9 = (0, import_react7.useMemo)(function() {
    return !!a5 && T2({ width: e11, height: n7, scale: a5, axis: "y", values: l5 });
  }, [n7, e11, a5, l5]);
  return (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [s5 && (0, import_jsx_runtime3.jsx)(Y2, { lines: s5 }), c9 && (0, import_jsx_runtime3.jsx)(Y2, { lines: c9 })] });
});
var O3 = function(t10, e11) {
  var i6, n7 = e11.axis, r7 = e11.scale, a5 = e11.x, o5 = void 0 === a5 ? 0 : a5, l5 = e11.y, s5 = void 0 === l5 ? 0 : l5, f3 = e11.length, u6 = e11.ticksPosition, d3 = e11.tickValues, x4 = e11.tickSize, m5 = void 0 === x4 ? 5 : x4, y4 = e11.tickPadding, h2 = void 0 === y4 ? 5 : y4, k5 = e11.tickRotation, g4 = void 0 === k5 ? 0 : k5, v6 = e11.format, p4 = e11.legend, P4 = e11.legendPosition, T4 = void 0 === P4 ? "end" : P4, A4 = e11.legendOffset, S3 = void 0 === A4 ? 0 : A4, W5 = e11.theme, w5 = b2({ axis: n7, scale: r7, ticksPosition: u6, tickValues: d3, tickSize: m5, tickPadding: h2, tickRotation: g4, engine: "canvas" }), B5 = w5.ticks, X5 = w5.textAlign, Y4 = w5.textBaseline;
  t10.save(), t10.translate(o5, s5), t10.textAlign = X5, t10.textBaseline = Y4;
  var C6 = W5.axis.ticks.text;
  t10.font = (C6.fontWeight ? C6.fontWeight + " " : "") + C6.fontSize + "px " + C6.fontFamily, (null != (i6 = W5.axis.domain.line.strokeWidth) ? i6 : 0) > 0 && (t10.lineWidth = Number(W5.axis.domain.line.strokeWidth), t10.lineCap = "square", W5.axis.domain.line.stroke && (t10.strokeStyle = W5.axis.domain.line.stroke), t10.beginPath(), t10.moveTo(0, 0), t10.lineTo("x" === n7 ? f3 : 0, "x" === n7 ? 0 : f3), t10.stroke());
  var O5 = "function" == typeof v6 ? v6 : function(t11) {
    return "" + t11;
  };
  if (B5.forEach(function(e12) {
    var i7;
    (null != (i7 = W5.axis.ticks.line.strokeWidth) ? i7 : 0) > 0 && (t10.lineWidth = Number(W5.axis.ticks.line.strokeWidth), t10.lineCap = "square", W5.axis.ticks.line.stroke && (t10.strokeStyle = W5.axis.ticks.line.stroke), t10.beginPath(), t10.moveTo(e12.x, e12.y), t10.lineTo(e12.x + e12.lineX, e12.y + e12.lineY), t10.stroke());
    var n8 = O5(e12.value);
    t10.save(), t10.translate(e12.x + e12.textX, e12.y + e12.textY), t10.rotate(Kt(g4)), C6.outlineWidth > 0 && (t10.strokeStyle = C6.outlineColor, t10.lineWidth = 2 * C6.outlineWidth, t10.lineJoin = "round", t10.strokeText("" + n8, 0, 0)), W5.axis.ticks.text.fill && (t10.fillStyle = C6.fill), t10.fillText("" + n8, 0, 0), t10.restore();
  }), void 0 !== p4) {
    var j3 = 0, z6 = 0, V2 = 0, D4 = "center";
    "y" === n7 ? (V2 = -90, j3 = S3, "start" === T4 ? (D4 = "start", z6 = f3) : "middle" === T4 ? (D4 = "center", z6 = f3 / 2) : "end" === T4 && (D4 = "end")) : (z6 = S3, "start" === T4 ? D4 = "start" : "middle" === T4 ? (D4 = "center", j3 = f3 / 2) : "end" === T4 && (D4 = "end", j3 = f3)), t10.translate(j3, z6), t10.rotate(Kt(V2)), t10.font = (W5.axis.legend.text.fontWeight ? W5.axis.legend.text.fontWeight + " " : "") + W5.axis.legend.text.fontSize + "px " + W5.axis.legend.text.fontFamily, W5.axis.legend.text.fill && (t10.fillStyle = W5.axis.legend.text.fill), t10.textAlign = D4, t10.textBaseline = "middle", t10.fillText(p4, 0, 0);
  }
  t10.restore();
};
var j2 = function(t10, e11) {
  var i6 = e11.xScale, n7 = e11.yScale, r7 = e11.width, a5 = e11.height, o5 = e11.top, l5 = e11.right, s5 = e11.bottom, c9 = e11.left, f3 = e11.theme, u6 = { top: o5, right: l5, bottom: s5, left: c9 };
  w2.forEach(function(e12) {
    var o6 = u6[e12];
    if (!o6) return null;
    var l6 = "top" === e12 || "bottom" === e12, s6 = "top" === e12 || "left" === e12 ? "before" : "after", c10 = l6 ? i6 : n7, d3 = P2(o6.format, c10);
    O3(t10, p2({}, o6, { axis: l6 ? "x" : "y", x: "right" === e12 ? r7 : 0, y: "bottom" === e12 ? a5 : 0, scale: c10, format: d3, length: l6 ? r7 : a5, ticksPosition: s6, theme: f3 }));
  });
};
var z3 = function(t10, e11) {
  var i6 = e11.width, n7 = e11.height, r7 = e11.scale, a5 = e11.axis, o5 = e11.values;
  T2({ width: i6, height: n7, scale: r7, axis: a5, values: o5 }).forEach(function(e12) {
    t10.beginPath(), t10.moveTo(e12.x1, e12.y1), t10.lineTo(e12.x2, e12.y2), t10.stroke();
  });
};

// node_modules/@nivo/legends/dist/nivo-legends.es.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var c8 = __toESM(require_react());
var import_react8 = __toESM(require_react());
var f2 = function(e11) {
  var i6 = e11.x, n7 = e11.y, o5 = e11.size, r7 = e11.fill, l5 = e11.opacity, a5 = void 0 === l5 ? 1 : l5, c9 = e11.borderWidth, d3 = void 0 === c9 ? 0 : c9, s5 = e11.borderColor;
  return (0, import_jsx_runtime4.jsx)("circle", { r: o5 / 2, cx: i6 + o5 / 2, cy: n7 + o5 / 2, fill: r7, opacity: a5, strokeWidth: d3, stroke: void 0 === s5 ? "transparent" : s5, style: { pointerEvents: "none" } });
};
var m3 = function(e11) {
  var i6 = e11.x, n7 = e11.y, o5 = e11.size, r7 = e11.fill, l5 = e11.opacity, a5 = void 0 === l5 ? 1 : l5, c9 = e11.borderWidth, d3 = void 0 === c9 ? 0 : c9, s5 = e11.borderColor;
  return (0, import_jsx_runtime4.jsx)("g", { transform: "translate(" + i6 + "," + n7 + ")", children: (0, import_jsx_runtime4.jsx)("path", { d: "\n                    M" + o5 / 2 + " 0\n                    L" + 0.8 * o5 + " " + o5 / 2 + "\n                    L" + o5 / 2 + " " + o5 + "\n                    L" + 0.2 * o5 + " " + o5 / 2 + "\n                    L" + o5 / 2 + " 0\n                ", fill: r7, opacity: a5, strokeWidth: d3, stroke: void 0 === s5 ? "transparent" : s5, style: { pointerEvents: "none" } }) });
};
var v4 = function(e11) {
  var i6 = e11.x, n7 = e11.y, o5 = e11.size, r7 = e11.fill, l5 = e11.opacity, a5 = void 0 === l5 ? 1 : l5, c9 = e11.borderWidth, d3 = void 0 === c9 ? 0 : c9, s5 = e11.borderColor;
  return (0, import_jsx_runtime4.jsx)("rect", { x: i6, y: n7, fill: r7, opacity: a5, strokeWidth: d3, stroke: void 0 === s5 ? "transparent" : s5, width: o5, height: o5, style: { pointerEvents: "none" } });
};
var u2 = function(e11) {
  var i6 = e11.x, n7 = e11.y, o5 = e11.size, r7 = e11.fill, l5 = e11.opacity, a5 = void 0 === l5 ? 1 : l5, c9 = e11.borderWidth, d3 = void 0 === c9 ? 0 : c9, s5 = e11.borderColor;
  return (0, import_jsx_runtime4.jsx)("g", { transform: "translate(" + i6 + "," + n7 + ")", children: (0, import_jsx_runtime4.jsx)("path", { d: "\n                M" + o5 / 2 + " 0\n                L" + o5 + " " + o5 + "\n                L0 " + o5 + "\n                L" + o5 / 2 + " 0\n            ", fill: r7, opacity: a5, strokeWidth: d3, stroke: void 0 === s5 ? "transparent" : s5, style: { pointerEvents: "none" } }) });
};
function p3() {
  return p3 = Object.assign ? Object.assign.bind() : function(t10) {
    for (var e11 = 1; e11 < arguments.length; e11++) {
      var i6 = arguments[e11];
      for (var n7 in i6) Object.prototype.hasOwnProperty.call(i6, n7) && (t10[n7] = i6[n7]);
    }
    return t10;
  }, p3.apply(this, arguments);
}
var k4 = { top: 0, right: 0, bottom: 0, left: 0 };
var x3 = function(t10) {
  var e11, i6 = t10.direction, n7 = t10.itemsSpacing, o5 = t10.padding, r7 = t10.itemCount, l5 = t10.itemWidth, a5 = t10.itemHeight;
  if ("number" != typeof o5 && ("object" != typeof (e11 = o5) || Array.isArray(e11) || null === e11)) throw new Error("Invalid property padding, must be one of: number, object");
  var c9 = "number" == typeof o5 ? { top: o5, right: o5, bottom: o5, left: o5 } : p3({}, k4, o5), d3 = c9.left + c9.right, s5 = c9.top + c9.bottom, h2 = l5 + d3, g4 = a5 + s5, f3 = (r7 - 1) * n7;
  return "row" === i6 ? h2 = l5 * r7 + f3 + d3 : "column" === i6 && (g4 = a5 * r7 + f3 + s5), { width: h2, height: g4, padding: c9 };
};
var b3 = function(t10) {
  var e11 = t10.anchor, i6 = t10.translateX, n7 = t10.translateY, o5 = t10.containerWidth, r7 = t10.containerHeight, l5 = t10.width, a5 = t10.height, c9 = i6, d3 = n7;
  switch (e11) {
    case "top":
      c9 += (o5 - l5) / 2;
      break;
    case "top-right":
      c9 += o5 - l5;
      break;
    case "right":
      c9 += o5 - l5, d3 += (r7 - a5) / 2;
      break;
    case "bottom-right":
      c9 += o5 - l5, d3 += r7 - a5;
      break;
    case "bottom":
      c9 += (o5 - l5) / 2, d3 += r7 - a5;
      break;
    case "bottom-left":
      d3 += r7 - a5;
      break;
    case "left":
      d3 += (r7 - a5) / 2;
      break;
    case "center":
      c9 += (o5 - l5) / 2, d3 += (r7 - a5) / 2;
  }
  return { x: c9, y: d3 };
};
var S2 = function(t10) {
  var e11, i6, n7, o5, r7, l5, a5 = t10.direction, c9 = t10.justify, d3 = t10.symbolSize, s5 = t10.symbolSpacing, h2 = t10.width, g4 = t10.height;
  switch (a5) {
    case "left-to-right":
      e11 = 0, i6 = (g4 - d3) / 2, o5 = g4 / 2, l5 = "central", c9 ? (n7 = h2, r7 = "end") : (n7 = d3 + s5, r7 = "start");
      break;
    case "right-to-left":
      e11 = h2 - d3, i6 = (g4 - d3) / 2, o5 = g4 / 2, l5 = "central", c9 ? (n7 = 0, r7 = "start") : (n7 = h2 - d3 - s5, r7 = "end");
      break;
    case "top-to-bottom":
      e11 = (h2 - d3) / 2, i6 = 0, n7 = h2 / 2, r7 = "middle", c9 ? (o5 = g4, l5 = "alphabetic") : (o5 = d3 + s5, l5 = "text-before-edge");
      break;
    case "bottom-to-top":
      e11 = (h2 - d3) / 2, i6 = g4 - d3, n7 = h2 / 2, r7 = "middle", c9 ? (o5 = 0, l5 = "text-before-edge") : (o5 = g4 - d3 - s5, l5 = "alphabetic");
  }
  return { symbolX: e11, symbolY: i6, labelX: n7, labelY: o5, labelAnchor: r7, labelAlignment: l5 };
};
var w3 = { circle: f2, diamond: m3, square: v4, triangle: u2 };
var X3 = function(i6) {
  var n7, l5, a5, d3, g4, f3, m5, v6, u6, y4, k5, x4 = i6.x, b5 = i6.y, A4 = i6.width, W5 = i6.height, z6 = i6.data, C6 = i6.direction, X5 = void 0 === C6 ? "left-to-right" : C6, Y4 = i6.justify, O5 = void 0 !== Y4 && Y4, B5 = i6.textColor, H4 = i6.background, E4 = void 0 === H4 ? "transparent" : H4, j3 = i6.opacity, L3 = void 0 === j3 ? 1 : j3, M3 = i6.symbolShape, F2 = void 0 === M3 ? "square" : M3, T4 = i6.symbolSize, P4 = void 0 === T4 ? 16 : T4, V2 = i6.symbolSpacing, R = void 0 === V2 ? 8 : V2, D4 = i6.symbolBorderWidth, q2 = void 0 === D4 ? 0 : D4, G = i6.symbolBorderColor, I2 = void 0 === G ? "transparent" : G, N2 = i6.onClick, _3 = i6.onMouseEnter, J2 = i6.onMouseLeave, K3 = i6.toggleSerie, Q3 = i6.effects, U2 = (0, import_react8.useState)({}), Z2 = U2[0], $3 = U2[1], tt2 = zt(), et2 = (0, import_react8.useCallback)(function(t10) {
    if (Q3) {
      var e11 = Q3.filter(function(t11) {
        return "hover" === t11.on;
      }).reduce(function(t11, e12) {
        return p3({}, t11, e12.style);
      }, {});
      $3(e11);
    }
    null == _3 || _3(z6, t10);
  }, [_3, z6, Q3]), it2 = (0, import_react8.useCallback)(function(t10) {
    if (Q3) {
      var e11 = Q3.filter(function(t11) {
        return "hover" !== t11.on;
      }).reduce(function(t11, e12) {
        return p3({}, t11, e12.style);
      }, {});
      $3(e11);
    }
    null == J2 || J2(z6, t10);
  }, [J2, z6, Q3]), nt2 = S2({ direction: X5, justify: O5, symbolSize: null != (n7 = Z2.symbolSize) ? n7 : P4, symbolSpacing: R, width: A4, height: W5 }), ot2 = nt2.symbolX, rt2 = nt2.symbolY, lt2 = nt2.labelX, at2 = nt2.labelY, ct2 = nt2.labelAnchor, dt2 = nt2.labelAlignment, st = [N2, _3, J2, K3].some(function(t10) {
    return void 0 !== t10;
  }), ht2 = "function" == typeof F2 ? F2 : w3[F2];
  return (0, import_jsx_runtime4.jsxs)("g", { transform: "translate(" + x4 + "," + b5 + ")", style: { opacity: null != (l5 = Z2.itemOpacity) ? l5 : L3 }, children: [(0, import_jsx_runtime4.jsx)("rect", { width: A4, height: W5, fill: null != (a5 = Z2.itemBackground) ? a5 : E4, style: { cursor: st ? "pointer" : "auto" }, onClick: function(t10) {
    null == N2 || N2(z6, t10), null == K3 || K3(z6.id);
  }, onMouseEnter: et2, onMouseLeave: it2 }), c8.createElement(ht2, p3({ id: z6.id, x: ot2, y: rt2, size: null != (d3 = Z2.symbolSize) ? d3 : P4, fill: null != (g4 = null != (f3 = z6.fill) ? f3 : z6.color) ? g4 : "black", borderWidth: null != (m5 = Z2.symbolBorderWidth) ? m5 : q2, borderColor: null != (v6 = Z2.symbolBorderColor) ? v6 : I2 }, z6.hidden ? tt2.legends.hidden.symbol : void 0)), (0, import_jsx_runtime4.jsx)("text", { textAnchor: ct2, style: p3({}, Mt(tt2.legends.text), { fill: null != (u6 = null != (y4 = null != (k5 = Z2.itemTextColor) ? k5 : B5) ? y4 : tt2.legends.text.fill) ? u6 : "black", dominantBaseline: dt2, pointerEvents: "none", userSelect: "none" }, z6.hidden ? tt2.legends.hidden.text : void 0), x: lt2, y: at2, children: z6.label })] });
};
var Y3 = function(e11) {
  var i6 = e11.data, n7 = e11.x, o5 = e11.y, r7 = e11.direction, l5 = e11.padding, a5 = void 0 === l5 ? 0 : l5, c9 = e11.justify, d3 = e11.effects, s5 = e11.itemWidth, h2 = e11.itemHeight, g4 = e11.itemDirection, f3 = void 0 === g4 ? "left-to-right" : g4, m5 = e11.itemsSpacing, v6 = void 0 === m5 ? 0 : m5, u6 = e11.itemTextColor, p4 = e11.itemBackground, y4 = void 0 === p4 ? "transparent" : p4, k5 = e11.itemOpacity, b5 = void 0 === k5 ? 1 : k5, S3 = e11.symbolShape, A4 = e11.symbolSize, W5 = e11.symbolSpacing, z6 = e11.symbolBorderWidth, C6 = e11.symbolBorderColor, w5 = e11.onClick, Y4 = e11.onMouseEnter, O5 = e11.onMouseLeave, B5 = e11.toggleSerie, H4 = x3({ itemCount: i6.length, itemWidth: s5, itemHeight: h2, itemsSpacing: v6, direction: r7, padding: a5 }).padding, E4 = "row" === r7 ? s5 + v6 : 0, j3 = "column" === r7 ? h2 + v6 : 0;
  return (0, import_jsx_runtime4.jsx)("g", { transform: "translate(" + n7 + "," + o5 + ")", children: i6.map(function(e12, i7) {
    return (0, import_jsx_runtime4.jsx)(X3, { data: e12, x: i7 * E4 + H4.left, y: i7 * j3 + H4.top, width: s5, height: h2, direction: f3, justify: c9, effects: d3, textColor: u6, background: y4, opacity: b5, symbolShape: S3, symbolSize: A4, symbolSpacing: W5, symbolBorderWidth: z6, symbolBorderColor: C6, onClick: w5, onMouseEnter: Y4, onMouseLeave: O5, toggleSerie: B5 }, i7);
  }) });
};
var O4 = function(e11) {
  var i6 = e11.data, n7 = e11.containerWidth, o5 = e11.containerHeight, r7 = e11.translateX, l5 = void 0 === r7 ? 0 : r7, a5 = e11.translateY, c9 = void 0 === a5 ? 0 : a5, d3 = e11.anchor, s5 = e11.direction, h2 = e11.padding, g4 = void 0 === h2 ? 0 : h2, f3 = e11.justify, m5 = e11.itemsSpacing, v6 = void 0 === m5 ? 0 : m5, u6 = e11.itemWidth, p4 = e11.itemHeight, y4 = e11.itemDirection, k5 = e11.itemTextColor, S3 = e11.itemBackground, A4 = e11.itemOpacity, W5 = e11.symbolShape, z6 = e11.symbolSize, C6 = e11.symbolSpacing, w5 = e11.symbolBorderWidth, X5 = e11.symbolBorderColor, O5 = e11.onClick, B5 = e11.onMouseEnter, H4 = e11.onMouseLeave, E4 = e11.toggleSerie, j3 = e11.effects, L3 = x3({ itemCount: i6.length, itemsSpacing: v6, itemWidth: u6, itemHeight: p4, direction: s5, padding: g4 }), M3 = L3.width, F2 = L3.height, T4 = b3({ anchor: d3, translateX: l5, translateY: c9, containerWidth: n7, containerHeight: o5, width: M3, height: F2 }), P4 = T4.x, V2 = T4.y;
  return (0, import_jsx_runtime4.jsx)(Y3, { data: i6, x: P4, y: V2, direction: s5, padding: g4, justify: f3, effects: j3, itemsSpacing: v6, itemWidth: u6, itemHeight: p4, itemDirection: y4, itemTextColor: k5, itemBackground: S3, itemOpacity: A4, symbolShape: W5, symbolSize: z6, symbolSpacing: C6, symbolBorderWidth: w5, symbolBorderColor: X5, onClick: O5, onMouseEnter: B5, onMouseLeave: H4, toggleSerie: "boolean" == typeof E4 ? void 0 : E4 });
};
var B3 = { start: "left", middle: "center", end: "right" };
var H = function(t10, e11) {
  var i6 = e11.data, n7 = e11.containerWidth, o5 = e11.containerHeight, r7 = e11.translateX, l5 = void 0 === r7 ? 0 : r7, a5 = e11.translateY, c9 = void 0 === a5 ? 0 : a5, d3 = e11.anchor, s5 = e11.direction, h2 = e11.padding, g4 = void 0 === h2 ? 0 : h2, f3 = e11.justify, m5 = void 0 !== f3 && f3, v6 = e11.itemsSpacing, u6 = void 0 === v6 ? 0 : v6, p4 = e11.itemWidth, y4 = e11.itemHeight, k5 = e11.itemDirection, A4 = void 0 === k5 ? "left-to-right" : k5, W5 = e11.itemTextColor, z6 = e11.symbolSize, C6 = void 0 === z6 ? 16 : z6, w5 = e11.symbolSpacing, X5 = void 0 === w5 ? 8 : w5, Y4 = e11.theme, O5 = x3({ itemCount: i6.length, itemWidth: p4, itemHeight: y4, itemsSpacing: u6, direction: s5, padding: g4 }), H4 = O5.width, E4 = O5.height, j3 = O5.padding, L3 = b3({ anchor: d3, translateX: l5, translateY: c9, containerWidth: n7, containerHeight: o5, width: H4, height: E4 }), M3 = L3.x, F2 = L3.y, T4 = "row" === s5 ? p4 + u6 : 0, P4 = "column" === s5 ? y4 + u6 : 0;
  t10.save(), t10.translate(M3, F2), t10.font = Y4.legends.text.fontSize + "px " + (Y4.legends.text.fontFamily || "sans-serif"), i6.forEach(function(e12, i7) {
    var n8, o6, r8 = i7 * T4 + j3.left, l6 = i7 * P4 + j3.top, a6 = S2({ direction: A4, justify: m5, symbolSize: C6, symbolSpacing: X5, width: p4, height: y4 }), c10 = a6.symbolX, d4 = a6.symbolY, s6 = a6.labelX, h3 = a6.labelY, g5 = a6.labelAnchor, f4 = a6.labelAlignment;
    t10.fillStyle = null != (n8 = e12.color) ? n8 : "black", t10.fillRect(r8 + c10, l6 + d4, C6, C6), t10.textAlign = B3[g5], "central" === f4 && (t10.textBaseline = "middle"), t10.fillStyle = null != (o6 = null != W5 ? W5 : Y4.legends.text.fill) ? o6 : "black", t10.fillText(String(e12.label), r8 + s6, l6 + h3);
  }), t10.restore();
};

// node_modules/@nivo/line/dist/nivo-line.es.js
var import_uniqueId = __toESM(require_uniqueId());
var import_jsx_runtime6 = __toESM(require_jsx_runtime());

// node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_react9 = __toESM(require_react());

// node_modules/robust-predicates/esm/util.js
var epsilon4 = 11102230246251565e-32;
var splitter = 134217729;
var resulterrbound = (3 + 8 * epsilon4) * epsilon4;
function sum3(elen, e11, flen, f3, h2) {
  let Q3, Qnew, hh, bvirt;
  let enow = e11[0];
  let fnow = f3[0];
  let eindex = 0;
  let findex = 0;
  if (fnow > enow === fnow > -enow) {
    Q3 = enow;
    enow = e11[++eindex];
  } else {
    Q3 = fnow;
    fnow = f3[++findex];
  }
  let hindex = 0;
  if (eindex < elen && findex < flen) {
    if (fnow > enow === fnow > -enow) {
      Qnew = enow + Q3;
      hh = Q3 - (Qnew - enow);
      enow = e11[++eindex];
    } else {
      Qnew = fnow + Q3;
      hh = Q3 - (Qnew - fnow);
      fnow = f3[++findex];
    }
    Q3 = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
    while (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = Q3 + enow;
        bvirt = Qnew - Q3;
        hh = Q3 - (Qnew - bvirt) + (enow - bvirt);
        enow = e11[++eindex];
      } else {
        Qnew = Q3 + fnow;
        bvirt = Qnew - Q3;
        hh = Q3 - (Qnew - bvirt) + (fnow - bvirt);
        fnow = f3[++findex];
      }
      Q3 = Qnew;
      if (hh !== 0) {
        h2[hindex++] = hh;
      }
    }
  }
  while (eindex < elen) {
    Qnew = Q3 + enow;
    bvirt = Qnew - Q3;
    hh = Q3 - (Qnew - bvirt) + (enow - bvirt);
    enow = e11[++eindex];
    Q3 = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  while (findex < flen) {
    Qnew = Q3 + fnow;
    bvirt = Qnew - Q3;
    hh = Q3 - (Qnew - bvirt) + (fnow - bvirt);
    fnow = f3[++findex];
    Q3 = Qnew;
    if (hh !== 0) {
      h2[hindex++] = hh;
    }
  }
  if (Q3 !== 0 || hindex === 0) {
    h2[hindex++] = Q3;
  }
  return hindex;
}
function estimate(elen, e11) {
  let Q3 = e11[0];
  for (let i6 = 1; i6 < elen; i6++) Q3 += e11[i6];
  return Q3;
}
function vec(n7) {
  return new Float64Array(n7);
}

// node_modules/robust-predicates/esm/orient2d.js
var ccwerrboundA = (3 + 16 * epsilon4) * epsilon4;
var ccwerrboundB = (2 + 12 * epsilon4) * epsilon4;
var ccwerrboundC = (9 + 64 * epsilon4) * epsilon4 * epsilon4;
var B4 = vec(4);
var C1 = vec(8);
var C22 = vec(12);
var D2 = vec(16);
var u3 = vec(4);
function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
  let acxtail, acytail, bcxtail, bcytail;
  let bvirt, c9, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t14, t04, u32;
  const acx = ax - cx;
  const bcx = bx - cx;
  const acy = ay - cy;
  const bcy = by - cy;
  s1 = acx * bcy;
  c9 = splitter * acx;
  ahi = c9 - (c9 - acx);
  alo = acx - ahi;
  c9 = splitter * bcy;
  bhi = c9 - (c9 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t14 = acy * bcx;
  c9 = splitter * acy;
  ahi = c9 - (c9 - acy);
  alo = acy - ahi;
  c9 = splitter * bcx;
  bhi = c9 - (c9 - bcx);
  blo = bcx - bhi;
  t04 = alo * blo - (t14 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  B4[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t14;
  bvirt = _0 - _i;
  B4[1] = _0 - (_i + bvirt) + (bvirt - t14);
  u32 = _j + _i;
  bvirt = u32 - _j;
  B4[2] = _j - (u32 - bvirt) + (_i - bvirt);
  B4[3] = u32;
  let det = estimate(4, B4);
  let errbound = ccwerrboundB * detsum;
  if (det >= errbound || -det >= errbound) {
    return det;
  }
  bvirt = ax - acx;
  acxtail = ax - (acx + bvirt) + (bvirt - cx);
  bvirt = bx - bcx;
  bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
  bvirt = ay - acy;
  acytail = ay - (acy + bvirt) + (bvirt - cy);
  bvirt = by - bcy;
  bcytail = by - (bcy + bvirt) + (bvirt - cy);
  if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
    return det;
  }
  errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
  det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);
  if (det >= errbound || -det >= errbound) return det;
  s1 = acxtail * bcy;
  c9 = splitter * acxtail;
  ahi = c9 - (c9 - acxtail);
  alo = acxtail - ahi;
  c9 = splitter * bcy;
  bhi = c9 - (c9 - bcy);
  blo = bcy - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t14 = acytail * bcx;
  c9 = splitter * acytail;
  ahi = c9 - (c9 - acytail);
  alo = acytail - ahi;
  c9 = splitter * bcx;
  bhi = c9 - (c9 - bcx);
  blo = bcx - bhi;
  t04 = alo * blo - (t14 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  u3[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t14;
  bvirt = _0 - _i;
  u3[1] = _0 - (_i + bvirt) + (bvirt - t14);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u3[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u3[3] = u32;
  const C1len = sum3(4, B4, 4, u3, C1);
  s1 = acx * bcytail;
  c9 = splitter * acx;
  ahi = c9 - (c9 - acx);
  alo = acx - ahi;
  c9 = splitter * bcytail;
  bhi = c9 - (c9 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t14 = acy * bcxtail;
  c9 = splitter * acy;
  ahi = c9 - (c9 - acy);
  alo = acy - ahi;
  c9 = splitter * bcxtail;
  bhi = c9 - (c9 - bcxtail);
  blo = bcxtail - bhi;
  t04 = alo * blo - (t14 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  u3[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t14;
  bvirt = _0 - _i;
  u3[1] = _0 - (_i + bvirt) + (bvirt - t14);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u3[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u3[3] = u32;
  const C2len = sum3(C1len, C1, 4, u3, C22);
  s1 = acxtail * bcytail;
  c9 = splitter * acxtail;
  ahi = c9 - (c9 - acxtail);
  alo = acxtail - ahi;
  c9 = splitter * bcytail;
  bhi = c9 - (c9 - bcytail);
  blo = bcytail - bhi;
  s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
  t14 = acytail * bcxtail;
  c9 = splitter * acytail;
  ahi = c9 - (c9 - acytail);
  alo = acytail - ahi;
  c9 = splitter * bcxtail;
  bhi = c9 - (c9 - bcxtail);
  blo = bcxtail - bhi;
  t04 = alo * blo - (t14 - ahi * bhi - alo * bhi - ahi * blo);
  _i = s0 - t04;
  bvirt = s0 - _i;
  u3[0] = s0 - (_i + bvirt) + (bvirt - t04);
  _j = s1 + _i;
  bvirt = _j - s1;
  _0 = s1 - (_j - bvirt) + (_i - bvirt);
  _i = _0 - t14;
  bvirt = _0 - _i;
  u3[1] = _0 - (_i + bvirt) + (bvirt - t14);
  u32 = _j + _i;
  bvirt = u32 - _j;
  u3[2] = _j - (u32 - bvirt) + (_i - bvirt);
  u3[3] = u32;
  const Dlen = sum3(C2len, C22, 4, u3, D2);
  return D2[Dlen - 1];
}
function orient2d(ax, ay, bx, by, cx, cy) {
  const detleft = (ay - cy) * (bx - cx);
  const detright = (ax - cx) * (by - cy);
  const det = detleft - detright;
  const detsum = Math.abs(detleft + detright);
  if (Math.abs(det) >= ccwerrboundA * detsum) return det;
  return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
}

// node_modules/robust-predicates/esm/orient3d.js
var o3derrboundA = (7 + 56 * epsilon4) * epsilon4;
var o3derrboundB = (3 + 28 * epsilon4) * epsilon4;
var o3derrboundC = (26 + 288 * epsilon4) * epsilon4 * epsilon4;
var bc = vec(4);
var ca = vec(4);
var ab = vec(4);
var at_b = vec(4);
var at_c = vec(4);
var bt_c = vec(4);
var bt_a = vec(4);
var ct_a = vec(4);
var ct_b = vec(4);
var bct = vec(8);
var cat = vec(8);
var abt = vec(8);
var u4 = vec(4);
var _8 = vec(8);
var _8b = vec(8);
var _16 = vec(8);
var _12 = vec(12);
var fin = vec(192);
var fin2 = vec(192);

// node_modules/robust-predicates/esm/incircle.js
var iccerrboundA = (10 + 96 * epsilon4) * epsilon4;
var iccerrboundB = (4 + 48 * epsilon4) * epsilon4;
var iccerrboundC = (44 + 576 * epsilon4) * epsilon4 * epsilon4;
var bc2 = vec(4);
var ca2 = vec(4);
var ab2 = vec(4);
var aa = vec(4);
var bb = vec(4);
var cc = vec(4);
var u5 = vec(4);
var v5 = vec(4);
var axtbc = vec(8);
var aytbc = vec(8);
var bxtca = vec(8);
var bytca = vec(8);
var cxtab = vec(8);
var cytab = vec(8);
var abt2 = vec(8);
var bct2 = vec(8);
var cat2 = vec(8);
var abtt = vec(4);
var bctt = vec(4);
var catt = vec(4);
var _82 = vec(8);
var _162 = vec(16);
var _16b = vec(16);
var _16c = vec(16);
var _32 = vec(32);
var _32b = vec(32);
var _48 = vec(48);
var _64 = vec(64);
var fin3 = vec(1152);
var fin22 = vec(1152);

// node_modules/robust-predicates/esm/insphere.js
var isperrboundA = (16 + 224 * epsilon4) * epsilon4;
var isperrboundB = (5 + 72 * epsilon4) * epsilon4;
var isperrboundC = (71 + 1408 * epsilon4) * epsilon4 * epsilon4;
var ab3 = vec(4);
var bc3 = vec(4);
var cd = vec(4);
var de = vec(4);
var ea = vec(4);
var ac = vec(4);
var bd = vec(4);
var ce = vec(4);
var da = vec(4);
var eb = vec(4);
var abc = vec(24);
var bcd = vec(24);
var cde = vec(24);
var dea = vec(24);
var eab = vec(24);
var abd = vec(24);
var bce = vec(24);
var cda = vec(24);
var deb = vec(24);
var eac = vec(24);
var adet = vec(1152);
var bdet = vec(1152);
var cdet = vec(1152);
var ddet = vec(1152);
var edet = vec(1152);
var abdet = vec(2304);
var cddet = vec(2304);
var cdedet = vec(3456);
var deter = vec(5760);
var _83 = vec(8);
var _8b2 = vec(8);
var _8c = vec(8);
var _163 = vec(16);
var _24 = vec(24);
var _482 = vec(48);
var _48b = vec(48);
var _96 = vec(96);
var _192 = vec(192);
var _384x = vec(384);
var _384y = vec(384);
var _384z = vec(384);
var _768 = vec(768);
var xdet = vec(96);
var ydet = vec(96);
var zdet = vec(96);
var fin4 = vec(1152);

// node_modules/delaunator/index.js
var EPSILON = Math.pow(2, -52);
var EDGE_STACK = new Uint32Array(512);
var Delaunator = class _Delaunator {
  static from(points, getX = defaultGetX, getY = defaultGetY) {
    const n7 = points.length;
    const coords = new Float64Array(n7 * 2);
    for (let i6 = 0; i6 < n7; i6++) {
      const p4 = points[i6];
      coords[2 * i6] = getX(p4);
      coords[2 * i6 + 1] = getY(p4);
    }
    return new _Delaunator(coords);
  }
  constructor(coords) {
    const n7 = coords.length >> 1;
    if (n7 > 0 && typeof coords[0] !== "number") throw new Error("Expected coords to contain numbers.");
    this.coords = coords;
    const maxTriangles = Math.max(2 * n7 - 5, 0);
    this._triangles = new Uint32Array(maxTriangles * 3);
    this._halfedges = new Int32Array(maxTriangles * 3);
    this._hashSize = Math.ceil(Math.sqrt(n7));
    this._hullPrev = new Uint32Array(n7);
    this._hullNext = new Uint32Array(n7);
    this._hullTri = new Uint32Array(n7);
    this._hullHash = new Int32Array(this._hashSize);
    this._ids = new Uint32Array(n7);
    this._dists = new Float64Array(n7);
    this.update();
  }
  update() {
    const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this;
    const n7 = coords.length >> 1;
    let minX = Infinity;
    let minY = Infinity;
    let maxX = -Infinity;
    let maxY = -Infinity;
    for (let i6 = 0; i6 < n7; i6++) {
      const x4 = coords[2 * i6];
      const y4 = coords[2 * i6 + 1];
      if (x4 < minX) minX = x4;
      if (y4 < minY) minY = y4;
      if (x4 > maxX) maxX = x4;
      if (y4 > maxY) maxY = y4;
      this._ids[i6] = i6;
    }
    const cx = (minX + maxX) / 2;
    const cy = (minY + maxY) / 2;
    let i0, i1, i22;
    for (let i6 = 0, minDist = Infinity; i6 < n7; i6++) {
      const d3 = dist(cx, cy, coords[2 * i6], coords[2 * i6 + 1]);
      if (d3 < minDist) {
        i0 = i6;
        minDist = d3;
      }
    }
    const i0x = coords[2 * i0];
    const i0y = coords[2 * i0 + 1];
    for (let i6 = 0, minDist = Infinity; i6 < n7; i6++) {
      if (i6 === i0) continue;
      const d3 = dist(i0x, i0y, coords[2 * i6], coords[2 * i6 + 1]);
      if (d3 < minDist && d3 > 0) {
        i1 = i6;
        minDist = d3;
      }
    }
    let i1x = coords[2 * i1];
    let i1y = coords[2 * i1 + 1];
    let minRadius = Infinity;
    for (let i6 = 0; i6 < n7; i6++) {
      if (i6 === i0 || i6 === i1) continue;
      const r7 = circumradius(i0x, i0y, i1x, i1y, coords[2 * i6], coords[2 * i6 + 1]);
      if (r7 < minRadius) {
        i22 = i6;
        minRadius = r7;
      }
    }
    let i2x = coords[2 * i22];
    let i2y = coords[2 * i22 + 1];
    if (minRadius === Infinity) {
      for (let i6 = 0; i6 < n7; i6++) {
        this._dists[i6] = coords[2 * i6] - coords[0] || coords[2 * i6 + 1] - coords[1];
      }
      quicksort(this._ids, this._dists, 0, n7 - 1);
      const hull = new Uint32Array(n7);
      let j3 = 0;
      for (let i6 = 0, d0 = -Infinity; i6 < n7; i6++) {
        const id = this._ids[i6];
        const d3 = this._dists[id];
        if (d3 > d0) {
          hull[j3++] = id;
          d0 = d3;
        }
      }
      this.hull = hull.subarray(0, j3);
      this.triangles = new Uint32Array(0);
      this.halfedges = new Uint32Array(0);
      return;
    }
    if (orient2d(i0x, i0y, i1x, i1y, i2x, i2y) < 0) {
      const i6 = i1;
      const x4 = i1x;
      const y4 = i1y;
      i1 = i22;
      i1x = i2x;
      i1y = i2y;
      i22 = i6;
      i2x = x4;
      i2y = y4;
    }
    const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);
    this._cx = center.x;
    this._cy = center.y;
    for (let i6 = 0; i6 < n7; i6++) {
      this._dists[i6] = dist(coords[2 * i6], coords[2 * i6 + 1], center.x, center.y);
    }
    quicksort(this._ids, this._dists, 0, n7 - 1);
    this._hullStart = i0;
    let hullSize = 3;
    hullNext[i0] = hullPrev[i22] = i1;
    hullNext[i1] = hullPrev[i0] = i22;
    hullNext[i22] = hullPrev[i1] = i0;
    hullTri[i0] = 0;
    hullTri[i1] = 1;
    hullTri[i22] = 2;
    hullHash.fill(-1);
    hullHash[this._hashKey(i0x, i0y)] = i0;
    hullHash[this._hashKey(i1x, i1y)] = i1;
    hullHash[this._hashKey(i2x, i2y)] = i22;
    this.trianglesLen = 0;
    this._addTriangle(i0, i1, i22, -1, -1, -1);
    for (let k5 = 0, xp, yp; k5 < this._ids.length; k5++) {
      const i6 = this._ids[k5];
      const x4 = coords[2 * i6];
      const y4 = coords[2 * i6 + 1];
      if (k5 > 0 && Math.abs(x4 - xp) <= EPSILON && Math.abs(y4 - yp) <= EPSILON) continue;
      xp = x4;
      yp = y4;
      if (i6 === i0 || i6 === i1 || i6 === i22) continue;
      let start2 = 0;
      for (let j3 = 0, key = this._hashKey(x4, y4); j3 < this._hashSize; j3++) {
        start2 = hullHash[(key + j3) % this._hashSize];
        if (start2 !== -1 && start2 !== hullNext[start2]) break;
      }
      start2 = hullPrev[start2];
      let e11 = start2, q2;
      while (q2 = hullNext[e11], orient2d(x4, y4, coords[2 * e11], coords[2 * e11 + 1], coords[2 * q2], coords[2 * q2 + 1]) >= 0) {
        e11 = q2;
        if (e11 === start2) {
          e11 = -1;
          break;
        }
      }
      if (e11 === -1) continue;
      let t10 = this._addTriangle(e11, i6, hullNext[e11], -1, -1, hullTri[e11]);
      hullTri[i6] = this._legalize(t10 + 2);
      hullTri[e11] = t10;
      hullSize++;
      let n8 = hullNext[e11];
      while (q2 = hullNext[n8], orient2d(x4, y4, coords[2 * n8], coords[2 * n8 + 1], coords[2 * q2], coords[2 * q2 + 1]) < 0) {
        t10 = this._addTriangle(n8, i6, q2, hullTri[i6], -1, hullTri[n8]);
        hullTri[i6] = this._legalize(t10 + 2);
        hullNext[n8] = n8;
        hullSize--;
        n8 = q2;
      }
      if (e11 === start2) {
        while (q2 = hullPrev[e11], orient2d(x4, y4, coords[2 * q2], coords[2 * q2 + 1], coords[2 * e11], coords[2 * e11 + 1]) < 0) {
          t10 = this._addTriangle(q2, i6, e11, -1, hullTri[e11], hullTri[q2]);
          this._legalize(t10 + 2);
          hullTri[q2] = t10;
          hullNext[e11] = e11;
          hullSize--;
          e11 = q2;
        }
      }
      this._hullStart = hullPrev[i6] = e11;
      hullNext[e11] = hullPrev[n8] = i6;
      hullNext[i6] = n8;
      hullHash[this._hashKey(x4, y4)] = i6;
      hullHash[this._hashKey(coords[2 * e11], coords[2 * e11 + 1])] = e11;
    }
    this.hull = new Uint32Array(hullSize);
    for (let i6 = 0, e11 = this._hullStart; i6 < hullSize; i6++) {
      this.hull[i6] = e11;
      e11 = hullNext[e11];
    }
    this.triangles = this._triangles.subarray(0, this.trianglesLen);
    this.halfedges = this._halfedges.subarray(0, this.trianglesLen);
  }
  _hashKey(x4, y4) {
    return Math.floor(pseudoAngle(x4 - this._cx, y4 - this._cy) * this._hashSize) % this._hashSize;
  }
  _legalize(a5) {
    const { _triangles: triangles, _halfedges: halfedges, coords } = this;
    let i6 = 0;
    let ar = 0;
    while (true) {
      const b5 = halfedges[a5];
      const a0 = a5 - a5 % 3;
      ar = a0 + (a5 + 2) % 3;
      if (b5 === -1) {
        if (i6 === 0) break;
        a5 = EDGE_STACK[--i6];
        continue;
      }
      const b0 = b5 - b5 % 3;
      const al = a0 + (a5 + 1) % 3;
      const bl = b0 + (b5 + 2) % 3;
      const p0 = triangles[ar];
      const pr2 = triangles[a5];
      const pl = triangles[al];
      const p1 = triangles[bl];
      const illegal = inCircle(
        coords[2 * p0],
        coords[2 * p0 + 1],
        coords[2 * pr2],
        coords[2 * pr2 + 1],
        coords[2 * pl],
        coords[2 * pl + 1],
        coords[2 * p1],
        coords[2 * p1 + 1]
      );
      if (illegal) {
        triangles[a5] = p1;
        triangles[b5] = p0;
        const hbl = halfedges[bl];
        if (hbl === -1) {
          let e11 = this._hullStart;
          do {
            if (this._hullTri[e11] === bl) {
              this._hullTri[e11] = a5;
              break;
            }
            e11 = this._hullPrev[e11];
          } while (e11 !== this._hullStart);
        }
        this._link(a5, hbl);
        this._link(b5, halfedges[ar]);
        this._link(ar, bl);
        const br = b0 + (b5 + 1) % 3;
        if (i6 < EDGE_STACK.length) {
          EDGE_STACK[i6++] = br;
        }
      } else {
        if (i6 === 0) break;
        a5 = EDGE_STACK[--i6];
      }
    }
    return ar;
  }
  _link(a5, b5) {
    this._halfedges[a5] = b5;
    if (b5 !== -1) this._halfedges[b5] = a5;
  }
  // add a new triangle given vertex indices and adjacent half-edge ids
  _addTriangle(i0, i1, i22, a5, b5, c9) {
    const t10 = this.trianglesLen;
    this._triangles[t10] = i0;
    this._triangles[t10 + 1] = i1;
    this._triangles[t10 + 2] = i22;
    this._link(t10, a5);
    this._link(t10 + 1, b5);
    this._link(t10 + 2, c9);
    this.trianglesLen += 3;
    return t10;
  }
};
function pseudoAngle(dx, dy) {
  const p4 = dx / (Math.abs(dx) + Math.abs(dy));
  return (dy > 0 ? 3 - p4 : 1 + p4) / 4;
}
function dist(ax, ay, bx, by) {
  const dx = ax - bx;
  const dy = ay - by;
  return dx * dx + dy * dy;
}
function inCircle(ax, ay, bx, by, cx, cy, px, py) {
  const dx = ax - px;
  const dy = ay - py;
  const ex = bx - px;
  const ey = by - py;
  const fx = cx - px;
  const fy = cy - py;
  const ap = dx * dx + dy * dy;
  const bp = ex * ex + ey * ey;
  const cp = fx * fx + fy * fy;
  return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0;
}
function circumradius(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d3 = 0.5 / (dx * ey - dy * ex);
  const x4 = (ey * bl - dy * cl) * d3;
  const y4 = (dx * cl - ex * bl) * d3;
  return x4 * x4 + y4 * y4;
}
function circumcenter(ax, ay, bx, by, cx, cy) {
  const dx = bx - ax;
  const dy = by - ay;
  const ex = cx - ax;
  const ey = cy - ay;
  const bl = dx * dx + dy * dy;
  const cl = ex * ex + ey * ey;
  const d3 = 0.5 / (dx * ey - dy * ex);
  const x4 = ax + (ey * bl - dy * cl) * d3;
  const y4 = ay + (dx * cl - ex * bl) * d3;
  return { x: x4, y: y4 };
}
function quicksort(ids, dists, left, right) {
  if (right - left <= 20) {
    for (let i6 = left + 1; i6 <= right; i6++) {
      const temp = ids[i6];
      const tempDist = dists[temp];
      let j3 = i6 - 1;
      while (j3 >= left && dists[ids[j3]] > tempDist) ids[j3 + 1] = ids[j3--];
      ids[j3 + 1] = temp;
    }
  } else {
    const median2 = left + right >> 1;
    let i6 = left + 1;
    let j3 = right;
    swap(ids, median2, i6);
    if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);
    if (dists[ids[i6]] > dists[ids[right]]) swap(ids, i6, right);
    if (dists[ids[left]] > dists[ids[i6]]) swap(ids, left, i6);
    const temp = ids[i6];
    const tempDist = dists[temp];
    while (true) {
      do
        i6++;
      while (dists[ids[i6]] < tempDist);
      do
        j3--;
      while (dists[ids[j3]] > tempDist);
      if (j3 < i6) break;
      swap(ids, i6, j3);
    }
    ids[left + 1] = ids[j3];
    ids[j3] = temp;
    if (right - i6 + 1 >= j3 - left) {
      quicksort(ids, dists, i6, right);
      quicksort(ids, dists, left, j3 - 1);
    } else {
      quicksort(ids, dists, left, j3 - 1);
      quicksort(ids, dists, i6, right);
    }
  }
}
function swap(arr, i6, j3) {
  const tmp = arr[i6];
  arr[i6] = arr[j3];
  arr[j3] = tmp;
}
function defaultGetX(p4) {
  return p4[0];
}
function defaultGetY(p4) {
  return p4[1];
}

// node_modules/d3-delaunay/src/path.js
var epsilon5 = 1e-6;
var Path2 = class {
  constructor() {
    this._x0 = this._y0 = // start of current subpath
    this._x1 = this._y1 = null;
    this._ = "";
  }
  moveTo(x4, y4) {
    this._ += `M${this._x0 = this._x1 = +x4},${this._y0 = this._y1 = +y4}`;
  }
  closePath() {
    if (this._x1 !== null) {
      this._x1 = this._x0, this._y1 = this._y0;
      this._ += "Z";
    }
  }
  lineTo(x4, y4) {
    this._ += `L${this._x1 = +x4},${this._y1 = +y4}`;
  }
  arc(x4, y4, r7) {
    x4 = +x4, y4 = +y4, r7 = +r7;
    const x0 = x4 + r7;
    const y0 = y4;
    if (r7 < 0) throw new Error("negative radius");
    if (this._x1 === null) this._ += `M${x0},${y0}`;
    else if (Math.abs(this._x1 - x0) > epsilon5 || Math.abs(this._y1 - y0) > epsilon5) this._ += "L" + x0 + "," + y0;
    if (!r7) return;
    this._ += `A${r7},${r7},0,1,1,${x4 - r7},${y4}A${r7},${r7},0,1,1,${this._x1 = x0},${this._y1 = y0}`;
  }
  rect(x4, y4, w5, h2) {
    this._ += `M${this._x0 = this._x1 = +x4},${this._y0 = this._y1 = +y4}h${+w5}v${+h2}h${-w5}Z`;
  }
  value() {
    return this._ || null;
  }
};

// node_modules/d3-delaunay/src/polygon.js
var Polygon = class {
  constructor() {
    this._ = [];
  }
  moveTo(x4, y4) {
    this._.push([x4, y4]);
  }
  closePath() {
    this._.push(this._[0].slice());
  }
  lineTo(x4, y4) {
    this._.push([x4, y4]);
  }
  value() {
    return this._.length ? this._ : null;
  }
};

// node_modules/d3-delaunay/src/voronoi.js
var Voronoi = class {
  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error("invalid bounds");
    this.delaunay = delaunay;
    this._circumcenters = new Float64Array(delaunay.points.length * 2);
    this.vectors = new Float64Array(delaunay.points.length * 2);
    this.xmax = xmax, this.xmin = xmin;
    this.ymax = ymax, this.ymin = ymin;
    this._init();
  }
  update() {
    this.delaunay.update();
    this._init();
    return this;
  }
  _init() {
    const { delaunay: { points, hull, triangles }, vectors } = this;
    let bx, by;
    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);
    for (let i6 = 0, j3 = 0, n7 = triangles.length, x4, y4; i6 < n7; i6 += 3, j3 += 2) {
      const t14 = triangles[i6] * 2;
      const t22 = triangles[i6 + 1] * 2;
      const t32 = triangles[i6 + 2] * 2;
      const x12 = points[t14];
      const y12 = points[t14 + 1];
      const x22 = points[t22];
      const y22 = points[t22 + 1];
      const x32 = points[t32];
      const y32 = points[t32 + 1];
      const dx = x22 - x12;
      const dy = y22 - y12;
      const ex = x32 - x12;
      const ey = y32 - y12;
      const ab4 = (dx * ey - dy * ex) * 2;
      if (Math.abs(ab4) < 1e-9) {
        if (bx === void 0) {
          bx = by = 0;
          for (const i7 of hull) bx += points[i7 * 2], by += points[i7 * 2 + 1];
          bx /= hull.length, by /= hull.length;
        }
        const a5 = 1e9 * Math.sign((bx - x12) * ey - (by - y12) * ex);
        x4 = (x12 + x32) / 2 - a5 * ey;
        y4 = (y12 + y32) / 2 + a5 * ex;
      } else {
        const d3 = 1 / ab4;
        const bl = dx * dx + dy * dy;
        const cl = ex * ex + ey * ey;
        x4 = x12 + (ey * bl - dy * cl) * d3;
        y4 = y12 + (dx * cl - ex * bl) * d3;
      }
      circumcenters[j3] = x4;
      circumcenters[j3 + 1] = y4;
    }
    let h2 = hull[hull.length - 1];
    let p0, p1 = h2 * 4;
    let x0, x1 = points[2 * h2];
    let y0, y1 = points[2 * h2 + 1];
    vectors.fill(0);
    for (let i6 = 0; i6 < hull.length; ++i6) {
      h2 = hull[i6];
      p0 = p1, x0 = x1, y0 = y1;
      p1 = h2 * 4, x1 = points[2 * h2], y1 = points[2 * h2 + 1];
      vectors[p0 + 2] = vectors[p1] = y0 - y1;
      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;
    }
  }
  render(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { delaunay: { halfedges, inedges, hull }, circumcenters, vectors } = this;
    if (hull.length <= 1) return null;
    for (let i6 = 0, n7 = halfedges.length; i6 < n7; ++i6) {
      const j3 = halfedges[i6];
      if (j3 < i6) continue;
      const ti = Math.floor(i6 / 3) * 2;
      const tj = Math.floor(j3 / 3) * 2;
      const xi = circumcenters[ti];
      const yi = circumcenters[ti + 1];
      const xj = circumcenters[tj];
      const yj = circumcenters[tj + 1];
      this._renderSegment(xi, yi, xj, yj, context);
    }
    let h0, h1 = hull[hull.length - 1];
    for (let i6 = 0; i6 < hull.length; ++i6) {
      h0 = h1, h1 = hull[i6];
      const t10 = Math.floor(inedges[h1] / 3) * 2;
      const x4 = circumcenters[t10];
      const y4 = circumcenters[t10 + 1];
      const v6 = h0 * 4;
      const p4 = this._project(x4, y4, vectors[v6 + 2], vectors[v6 + 3]);
      if (p4) this._renderSegment(x4, y4, p4[0], p4[1], context);
    }
    return buffer && buffer.value();
  }
  renderBounds(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);
    return buffer && buffer.value();
  }
  renderCell(i6, context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const points = this._clip(i6);
    if (points === null || !points.length) return;
    context.moveTo(points[0], points[1]);
    let n7 = points.length;
    while (points[0] === points[n7 - 2] && points[1] === points[n7 - 1] && n7 > 1) n7 -= 2;
    for (let i7 = 2; i7 < n7; i7 += 2) {
      if (points[i7] !== points[i7 - 2] || points[i7 + 1] !== points[i7 - 1])
        context.lineTo(points[i7], points[i7 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  *cellPolygons() {
    const { delaunay: { points } } = this;
    for (let i6 = 0, n7 = points.length / 2; i6 < n7; ++i6) {
      const cell = this.cellPolygon(i6);
      if (cell) cell.index = i6, yield cell;
    }
  }
  cellPolygon(i6) {
    const polygon = new Polygon();
    this.renderCell(i6, polygon);
    return polygon.value();
  }
  _renderSegment(x0, y0, x1, y1, context) {
    let S3;
    const c0 = this._regioncode(x0, y0);
    const c12 = this._regioncode(x1, y1);
    if (c0 === 0 && c12 === 0) {
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
    } else if (S3 = this._clipSegment(x0, y0, x1, y1, c0, c12)) {
      context.moveTo(S3[0], S3[1]);
      context.lineTo(S3[2], S3[3]);
    }
  }
  contains(i6, x4, y4) {
    if ((x4 = +x4, x4 !== x4) || (y4 = +y4, y4 !== y4)) return false;
    return this.delaunay._step(i6, x4, y4) === i6;
  }
  *neighbors(i6) {
    const ci = this._clip(i6);
    if (ci) for (const j3 of this.delaunay.neighbors(i6)) {
      const cj = this._clip(j3);
      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
          if (ci[ai] === cj[aj] && ci[ai + 1] === cj[aj + 1] && ci[(ai + 2) % li] === cj[(aj + lj - 2) % lj] && ci[(ai + 3) % li] === cj[(aj + lj - 1) % lj]) {
            yield j3;
            break loop;
          }
        }
      }
    }
  }
  _cell(i6) {
    const { circumcenters, delaunay: { inedges, halfedges, triangles } } = this;
    const e0 = inedges[i6];
    if (e0 === -1) return null;
    const points = [];
    let e11 = e0;
    do {
      const t10 = Math.floor(e11 / 3);
      points.push(circumcenters[t10 * 2], circumcenters[t10 * 2 + 1]);
      e11 = e11 % 3 === 2 ? e11 - 2 : e11 + 1;
      if (triangles[e11] !== i6) break;
      e11 = halfedges[e11];
    } while (e11 !== e0 && e11 !== -1);
    return points;
  }
  _clip(i6) {
    if (i6 === 0 && this.delaunay.hull.length === 1) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    const points = this._cell(i6);
    if (points === null) return null;
    const { vectors: V2 } = this;
    const v6 = i6 * 4;
    return this._simplify(V2[v6] || V2[v6 + 1] ? this._clipInfinite(i6, points, V2[v6], V2[v6 + 1], V2[v6 + 2], V2[v6 + 3]) : this._clipFinite(i6, points));
  }
  _clipFinite(i6, points) {
    const n7 = points.length;
    let P4 = null;
    let x0, y0, x1 = points[n7 - 2], y1 = points[n7 - 1];
    let c0, c12 = this._regioncode(x1, y1);
    let e0, e1 = 0;
    for (let j3 = 0; j3 < n7; j3 += 2) {
      x0 = x1, y0 = y1, x1 = points[j3], y1 = points[j3 + 1];
      c0 = c12, c12 = this._regioncode(x1, y1);
      if (c0 === 0 && c12 === 0) {
        e0 = e1, e1 = 0;
        if (P4) P4.push(x1, y1);
        else P4 = [x1, y1];
      } else {
        let S3, sx0, sy0, sx1, sy1;
        if (c0 === 0) {
          if ((S3 = this._clipSegment(x0, y0, x1, y1, c0, c12)) === null) continue;
          [sx0, sy0, sx1, sy1] = S3;
        } else {
          if ((S3 = this._clipSegment(x1, y1, x0, y0, c12, c0)) === null) continue;
          [sx1, sy1, sx0, sy0] = S3;
          e0 = e1, e1 = this._edgecode(sx0, sy0);
          if (e0 && e1) this._edge(i6, e0, e1, P4, P4.length);
          if (P4) P4.push(sx0, sy0);
          else P4 = [sx0, sy0];
        }
        e0 = e1, e1 = this._edgecode(sx1, sy1);
        if (e0 && e1) this._edge(i6, e0, e1, P4, P4.length);
        if (P4) P4.push(sx1, sy1);
        else P4 = [sx1, sy1];
      }
    }
    if (P4) {
      e0 = e1, e1 = this._edgecode(P4[0], P4[1]);
      if (e0 && e1) this._edge(i6, e0, e1, P4, P4.length);
    } else if (this.contains(i6, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];
    }
    return P4;
  }
  _clipSegment(x0, y0, x1, y1, c0, c12) {
    const flip = c0 < c12;
    if (flip) [x0, y0, x1, y1, c0, c12] = [x1, y1, x0, y0, c12, c0];
    while (true) {
      if (c0 === 0 && c12 === 0) return flip ? [x1, y1, x0, y0] : [x0, y0, x1, y1];
      if (c0 & c12) return null;
      let x4, y4, c9 = c0 || c12;
      if (c9 & 8) x4 = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y4 = this.ymax;
      else if (c9 & 4) x4 = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y4 = this.ymin;
      else if (c9 & 2) y4 = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x4 = this.xmax;
      else y4 = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x4 = this.xmin;
      if (c0) x0 = x4, y0 = y4, c0 = this._regioncode(x0, y0);
      else x1 = x4, y1 = y4, c12 = this._regioncode(x1, y1);
    }
  }
  _clipInfinite(i6, points, vx0, vy0, vxn, vyn) {
    let P4 = Array.from(points), p4;
    if (p4 = this._project(P4[0], P4[1], vx0, vy0)) P4.unshift(p4[0], p4[1]);
    if (p4 = this._project(P4[P4.length - 2], P4[P4.length - 1], vxn, vyn)) P4.push(p4[0], p4[1]);
    if (P4 = this._clipFinite(i6, P4)) {
      for (let j3 = 0, n7 = P4.length, c0, c12 = this._edgecode(P4[n7 - 2], P4[n7 - 1]); j3 < n7; j3 += 2) {
        c0 = c12, c12 = this._edgecode(P4[j3], P4[j3 + 1]);
        if (c0 && c12) j3 = this._edge(i6, c0, c12, P4, j3), n7 = P4.length;
      }
    } else if (this.contains(i6, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
      P4 = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];
    }
    return P4;
  }
  _edge(i6, e0, e1, P4, j3) {
    while (e0 !== e1) {
      let x4, y4;
      switch (e0) {
        case 5:
          e0 = 4;
          continue;
        case 4:
          e0 = 6, x4 = this.xmax, y4 = this.ymin;
          break;
        case 6:
          e0 = 2;
          continue;
        case 2:
          e0 = 10, x4 = this.xmax, y4 = this.ymax;
          break;
        case 10:
          e0 = 8;
          continue;
        case 8:
          e0 = 9, x4 = this.xmin, y4 = this.ymax;
          break;
        case 9:
          e0 = 1;
          continue;
        case 1:
          e0 = 5, x4 = this.xmin, y4 = this.ymin;
          break;
      }
      if ((P4[j3] !== x4 || P4[j3 + 1] !== y4) && this.contains(i6, x4, y4)) {
        P4.splice(j3, 0, x4, y4), j3 += 2;
      }
    }
    return j3;
  }
  _project(x0, y0, vx, vy) {
    let t10 = Infinity, c9, x4, y4;
    if (vy < 0) {
      if (y0 <= this.ymin) return null;
      if ((c9 = (this.ymin - y0) / vy) < t10) y4 = this.ymin, x4 = x0 + (t10 = c9) * vx;
    } else if (vy > 0) {
      if (y0 >= this.ymax) return null;
      if ((c9 = (this.ymax - y0) / vy) < t10) y4 = this.ymax, x4 = x0 + (t10 = c9) * vx;
    }
    if (vx > 0) {
      if (x0 >= this.xmax) return null;
      if ((c9 = (this.xmax - x0) / vx) < t10) x4 = this.xmax, y4 = y0 + (t10 = c9) * vy;
    } else if (vx < 0) {
      if (x0 <= this.xmin) return null;
      if ((c9 = (this.xmin - x0) / vx) < t10) x4 = this.xmin, y4 = y0 + (t10 = c9) * vy;
    }
    return [x4, y4];
  }
  _edgecode(x4, y4) {
    return (x4 === this.xmin ? 1 : x4 === this.xmax ? 2 : 0) | (y4 === this.ymin ? 4 : y4 === this.ymax ? 8 : 0);
  }
  _regioncode(x4, y4) {
    return (x4 < this.xmin ? 1 : x4 > this.xmax ? 2 : 0) | (y4 < this.ymin ? 4 : y4 > this.ymax ? 8 : 0);
  }
  _simplify(P4) {
    if (P4 && P4.length > 4) {
      for (let i6 = 0; i6 < P4.length; i6 += 2) {
        const j3 = (i6 + 2) % P4.length, k5 = (i6 + 4) % P4.length;
        if (P4[i6] === P4[j3] && P4[j3] === P4[k5] || P4[i6 + 1] === P4[j3 + 1] && P4[j3 + 1] === P4[k5 + 1]) {
          P4.splice(j3, 2), i6 -= 2;
        }
      }
      if (!P4.length) P4 = null;
    }
    return P4;
  }
};

// node_modules/d3-delaunay/src/delaunay.js
var tau3 = 2 * Math.PI;
var pow2 = Math.pow;
function pointX(p4) {
  return p4[0];
}
function pointY(p4) {
  return p4[1];
}
function collinear(d3) {
  const { triangles, coords } = d3;
  for (let i6 = 0; i6 < triangles.length; i6 += 3) {
    const a5 = 2 * triangles[i6], b5 = 2 * triangles[i6 + 1], c9 = 2 * triangles[i6 + 2], cross2 = (coords[c9] - coords[a5]) * (coords[b5 + 1] - coords[a5 + 1]) - (coords[b5] - coords[a5]) * (coords[c9 + 1] - coords[a5 + 1]);
    if (cross2 > 1e-10) return false;
  }
  return true;
}
function jitter(x4, y4, r7) {
  return [x4 + Math.sin(x4 + y4) * r7, y4 + Math.cos(x4 - y4) * r7];
}
var Delaunay = class _Delaunay {
  static from(points, fx = pointX, fy = pointY, that) {
    return new _Delaunay("length" in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that)));
  }
  constructor(points) {
    this._delaunator = new Delaunator(points);
    this.inedges = new Int32Array(points.length / 2);
    this._hullIndex = new Int32Array(points.length / 2);
    this.points = this._delaunator.coords;
    this._init();
  }
  update() {
    this._delaunator.update();
    this._init();
    return this;
  }
  _init() {
    const d3 = this._delaunator, points = this.points;
    if (d3.hull && d3.hull.length > 2 && collinear(d3)) {
      this.collinear = Int32Array.from({ length: points.length / 2 }, (_3, i6) => i6).sort((i6, j3) => points[2 * i6] - points[2 * j3] || points[2 * i6 + 1] - points[2 * j3 + 1]);
      const e11 = this.collinear[0], f3 = this.collinear[this.collinear.length - 1], bounds = [points[2 * e11], points[2 * e11 + 1], points[2 * f3], points[2 * f3 + 1]], r7 = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);
      for (let i6 = 0, n7 = points.length / 2; i6 < n7; ++i6) {
        const p4 = jitter(points[2 * i6], points[2 * i6 + 1], r7);
        points[2 * i6] = p4[0];
        points[2 * i6 + 1] = p4[1];
      }
      this._delaunator = new Delaunator(points);
    } else {
      delete this.collinear;
    }
    const halfedges = this.halfedges = this._delaunator.halfedges;
    const hull = this.hull = this._delaunator.hull;
    const triangles = this.triangles = this._delaunator.triangles;
    const inedges = this.inedges.fill(-1);
    const hullIndex = this._hullIndex.fill(-1);
    for (let e11 = 0, n7 = halfedges.length; e11 < n7; ++e11) {
      const p4 = triangles[e11 % 3 === 2 ? e11 - 2 : e11 + 1];
      if (halfedges[e11] === -1 || inedges[p4] === -1) inedges[p4] = e11;
    }
    for (let i6 = 0, n7 = hull.length; i6 < n7; ++i6) {
      hullIndex[hull[i6]] = i6;
    }
    if (hull.length <= 2 && hull.length > 0) {
      this.triangles = new Int32Array(3).fill(-1);
      this.halfedges = new Int32Array(3).fill(-1);
      this.triangles[0] = hull[0];
      inedges[hull[0]] = 1;
      if (hull.length === 2) {
        inedges[hull[1]] = 0;
        this.triangles[1] = hull[1];
        this.triangles[2] = hull[1];
      }
    }
  }
  voronoi(bounds) {
    return new Voronoi(this, bounds);
  }
  *neighbors(i6) {
    const { inedges, hull, _hullIndex, halfedges, triangles, collinear: collinear2 } = this;
    if (collinear2) {
      const l5 = collinear2.indexOf(i6);
      if (l5 > 0) yield collinear2[l5 - 1];
      if (l5 < collinear2.length - 1) yield collinear2[l5 + 1];
      return;
    }
    const e0 = inedges[i6];
    if (e0 === -1) return;
    let e11 = e0, p0 = -1;
    do {
      yield p0 = triangles[e11];
      e11 = e11 % 3 === 2 ? e11 - 2 : e11 + 1;
      if (triangles[e11] !== i6) return;
      e11 = halfedges[e11];
      if (e11 === -1) {
        const p4 = hull[(_hullIndex[i6] + 1) % hull.length];
        if (p4 !== p0) yield p4;
        return;
      }
    } while (e11 !== e0);
  }
  find(x4, y4, i6 = 0) {
    if ((x4 = +x4, x4 !== x4) || (y4 = +y4, y4 !== y4)) return -1;
    const i0 = i6;
    let c9;
    while ((c9 = this._step(i6, x4, y4)) >= 0 && c9 !== i6 && c9 !== i0) i6 = c9;
    return c9;
  }
  _step(i6, x4, y4) {
    const { inedges, hull, _hullIndex, halfedges, triangles, points } = this;
    if (inedges[i6] === -1 || !points.length) return (i6 + 1) % (points.length >> 1);
    let c9 = i6;
    let dc = pow2(x4 - points[i6 * 2], 2) + pow2(y4 - points[i6 * 2 + 1], 2);
    const e0 = inedges[i6];
    let e11 = e0;
    do {
      let t10 = triangles[e11];
      const dt2 = pow2(x4 - points[t10 * 2], 2) + pow2(y4 - points[t10 * 2 + 1], 2);
      if (dt2 < dc) dc = dt2, c9 = t10;
      e11 = e11 % 3 === 2 ? e11 - 2 : e11 + 1;
      if (triangles[e11] !== i6) break;
      e11 = halfedges[e11];
      if (e11 === -1) {
        e11 = hull[(_hullIndex[i6] + 1) % hull.length];
        if (e11 !== t10) {
          if (pow2(x4 - points[e11 * 2], 2) + pow2(y4 - points[e11 * 2 + 1], 2) < dc) return e11;
        }
        break;
      }
    } while (e11 !== e0);
    return c9;
  }
  render(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { points, halfedges, triangles } = this;
    for (let i6 = 0, n7 = halfedges.length; i6 < n7; ++i6) {
      const j3 = halfedges[i6];
      if (j3 < i6) continue;
      const ti = triangles[i6] * 2;
      const tj = triangles[j3] * 2;
      context.moveTo(points[ti], points[ti + 1]);
      context.lineTo(points[tj], points[tj + 1]);
    }
    this.renderHull(context);
    return buffer && buffer.value();
  }
  renderPoints(context, r7) {
    if (r7 === void 0 && (!context || typeof context.moveTo !== "function")) r7 = context, context = null;
    r7 = r7 == void 0 ? 2 : +r7;
    const buffer = context == null ? context = new Path2() : void 0;
    const { points } = this;
    for (let i6 = 0, n7 = points.length; i6 < n7; i6 += 2) {
      const x4 = points[i6], y4 = points[i6 + 1];
      context.moveTo(x4 + r7, y4);
      context.arc(x4, y4, r7, 0, tau3);
    }
    return buffer && buffer.value();
  }
  renderHull(context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { hull, points } = this;
    const h2 = hull[0] * 2, n7 = hull.length;
    context.moveTo(points[h2], points[h2 + 1]);
    for (let i6 = 1; i6 < n7; ++i6) {
      const h3 = 2 * hull[i6];
      context.lineTo(points[h3], points[h3 + 1]);
    }
    context.closePath();
    return buffer && buffer.value();
  }
  hullPolygon() {
    const polygon = new Polygon();
    this.renderHull(polygon);
    return polygon.value();
  }
  renderTriangle(i6, context) {
    const buffer = context == null ? context = new Path2() : void 0;
    const { points, triangles } = this;
    const t04 = triangles[i6 *= 3] * 2;
    const t14 = triangles[i6 + 1] * 2;
    const t22 = triangles[i6 + 2] * 2;
    context.moveTo(points[t04], points[t04 + 1]);
    context.lineTo(points[t14], points[t14 + 1]);
    context.lineTo(points[t22], points[t22 + 1]);
    context.closePath();
    return buffer && buffer.value();
  }
  *trianglePolygons() {
    const { triangles } = this;
    for (let i6 = 0, n7 = triangles.length / 3; i6 < n7; ++i6) {
      yield this.trianglePolygon(i6);
    }
  }
  trianglePolygon(i6) {
    const polygon = new Polygon();
    this.renderTriangle(i6, polygon);
    return polygon.value();
  }
};
function flatArray(points, fx, fy, that) {
  const n7 = points.length;
  const array2 = new Float64Array(n7 * 2);
  for (let i6 = 0; i6 < n7; ++i6) {
    const p4 = points[i6];
    array2[i6 * 2] = fx.call(that, p4, i6, points);
    array2[i6 * 2 + 1] = fy.call(that, p4, i6, points);
  }
  return array2;
}
function* flatIterable(points, fx, fy, that) {
  let i6 = 0;
  for (const p4 of points) {
    yield fx.call(that, p4, i6, points);
    yield fy.call(that, p4, i6, points);
    ++i6;
  }
}

// node_modules/@nivo/voronoi/dist/nivo-voronoi.es.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var C5 = function(n7) {
  return [n7.x, n7.y];
};
var L2 = _t;
var T3 = "cursor";
var P3 = "top";
var w4 = function(n7) {
  var o5 = n7.points, e11 = n7.getNodePosition, i6 = void 0 === e11 ? C5 : e11, t10 = n7.margin, r7 = void 0 === t10 ? L2 : t10;
  return o5.map(function(n8) {
    var o6 = i6(n8), e12 = o6[0], t11 = o6[1];
    return [e12 + r7.left, t11 + r7.top];
  });
};
var E3 = function(n7) {
  var o5 = n7.points, e11 = n7.width, i6 = n7.height, t10 = n7.margin, r7 = void 0 === t10 ? L2 : t10, l5 = n7.debug, u6 = Delaunay.from(o5), a5 = l5 ? u6.voronoi([0, 0, r7.left + e11 + r7.right, r7.top + i6 + r7.bottom]) : void 0;
  return { points: o5, delaunay: u6, voronoi: a5 };
};
var W4 = function(o5) {
  var e11 = o5.points, i6 = o5.getNodePosition, t10 = void 0 === i6 ? C5 : i6, r7 = o5.width, l5 = o5.height, u6 = o5.margin, a5 = void 0 === u6 ? L2 : u6, d3 = o5.debug;
  return (0, import_react9.useMemo)(function() {
    return E3({ points: w4({ points: e11, margin: a5, getNodePosition: t10 }), width: r7, height: l5, margin: a5, debug: d3 });
  }, [e11, r7, l5, a5, d3]);
};
var D3 = function(r7) {
  var l5 = r7.elementRef, u6 = r7.nodes, s5 = r7.getNodePosition, c9 = void 0 === s5 ? C5 : s5, h2 = r7.delaunay, v6 = r7.setCurrent, f3 = r7.margin, p4 = void 0 === f3 ? L2 : f3, m5 = r7.detectionRadius, M3 = void 0 === m5 ? 1 / 0 : m5, b5 = r7.isInteractive, k5 = void 0 === b5 || b5, y4 = r7.onMouseEnter, w5 = r7.onMouseMove, E4 = r7.onMouseLeave, W5 = r7.onClick, x4 = r7.onTouchStart, S3 = r7.onTouchMove, D4 = r7.onTouchEnd, R = r7.enableTouchCrosshair, A4 = void 0 !== R && R, N2 = r7.tooltip, O5 = r7.tooltipPosition, j3 = void 0 === O5 ? T3 : O5, I2 = r7.tooltipAnchor, z6 = void 0 === I2 ? P3 : I2, F2 = (0, import_react9.useState)(null), H4 = F2[0], B5 = F2[1], q2 = (0, import_react9.useRef)(null);
  (0, import_react9.useEffect)(function() {
    q2.current = H4;
  }, [q2, H4]);
  var G = (0, import_react9.useCallback)(function(n7) {
    if (!l5.current) return null;
    var o5 = Sn(l5.current, n7), e11 = o5[0], i6 = o5[1], t10 = h2.find(e11, i6), r8 = void 0 !== t10 ? u6[t10] : null;
    if (r8 && M3 !== 1 / 0) {
      var s6 = c9(r8), v7 = s6[0], f4 = s6[1];
      Mn(e11, i6, v7 + p4.left, f4 + p4.top) > M3 && (t10 = null, r8 = null);
    }
    return null === t10 || null === r8 ? null : [t10, r8];
  }, [l5, h2, u6, c9, p4, M3]), J2 = k(), K3 = J2.showTooltipAt, Q3 = J2.showTooltipFromEvent, U2 = J2.hideTooltip, V2 = (0, import_react9.useMemo)(function() {
    if (N2) return "cursor" === j3 ? function(n7, o5) {
      Q3(N2(n7), o5, z6);
    } : function(n7) {
      var o5 = c9(n7), e11 = o5[0], i6 = o5[1];
      K3(N2(n7), [e11 + p4.left, i6 + p4.top], z6);
    };
  }, [K3, Q3, N2, j3, z6, c9, p4]), X5 = (0, import_react9.useCallback)(function(n7) {
    var o5 = G(n7);
    if (B5(o5), null == v6 || v6(o5 ? o5[1] : null), o5) {
      var e11 = o5[1];
      null == V2 || V2(e11, n7), null == y4 || y4(o5[1], n7);
    }
  }, [G, B5, v6, V2, y4]), Y4 = (0, import_react9.useCallback)(function(n7) {
    var o5 = G(n7);
    if (B5(o5), o5) {
      var e11 = o5[0], i6 = o5[1];
      if (null == v6 || v6(i6), null == V2 || V2(i6, n7), q2.current) {
        var t10 = q2.current, r8 = t10[0], l6 = t10[1];
        e11 !== r8 ? null == E4 || E4(l6, n7) : null == w5 || w5(i6, n7);
      } else null == y4 || y4(i6, n7);
    } else null == v6 || v6(null), null == U2 || U2(), q2.current && (null == E4 || E4(q2.current[1], n7));
  }, [G, B5, q2, y4, w5, E4, V2, U2]), Z2 = (0, import_react9.useCallback)(function(n7) {
    B5(null), null == v6 || v6(null), U2(), E4 && q2.current && E4(q2.current[1], n7);
  }, [B5, v6, q2, U2, E4]), $3 = (0, import_react9.useCallback)(function(n7) {
    var o5 = G(n7);
    B5(o5), o5 && (null == W5 || W5(o5[1], n7));
  }, [G, B5, W5]), _3 = (0, import_react9.useCallback)(function(n7) {
    var o5 = G(n7);
    A4 && (B5(o5), null == v6 || v6(o5 ? o5[1] : null)), o5 && (null == x4 || x4(o5[1], n7));
  }, [G, B5, v6, A4, x4]), nn3 = (0, import_react9.useCallback)(function(n7) {
    var o5 = G(n7);
    A4 && (B5(o5), null == v6 || v6(o5 ? o5[1] : null)), o5 && (null == S3 || S3(o5[1], n7));
  }, [G, B5, v6, A4, S3]), on3 = (0, import_react9.useCallback)(function(n7) {
    A4 && (B5(null), null == v6 || v6(null)), D4 && q2.current && D4(q2.current[1], n7);
  }, [A4, B5, v6, D4, q2]);
  return { current: H4, handleMouseEnter: k5 ? X5 : void 0, handleMouseMove: k5 ? Y4 : void 0, handleMouseLeave: k5 ? Z2 : void 0, handleClick: k5 ? $3 : void 0, handleTouchStart: k5 ? _3 : void 0, handleTouchMove: k5 ? nn3 : void 0, handleTouchEnd: k5 ? on3 : void 0 };
};
var I = function(o5) {
  var i6 = o5.nodes, t10 = o5.width, r7 = o5.height, l5 = o5.margin, u6 = void 0 === l5 ? L2 : l5, a5 = o5.getNodePosition, d3 = o5.setCurrent, s5 = o5.onMouseEnter, c9 = o5.onMouseMove, h2 = o5.onMouseLeave, v6 = o5.onClick, f3 = o5.onTouchStart, p4 = o5.onTouchMove, g4 = o5.onTouchEnd, k5 = o5.enableTouchCrosshair, y4 = void 0 !== k5 && k5, C6 = o5.detectionRadius, w5 = void 0 === C6 ? 1 / 0 : C6, E4 = o5.tooltip, x4 = o5.tooltipPosition, S3 = void 0 === x4 ? T3 : x4, R = o5.tooltipAnchor, A4 = void 0 === R ? P3 : R, N2 = o5.debug, O5 = (0, import_react9.useRef)(null), j3 = W4({ points: i6, getNodePosition: a5, width: t10, height: r7, margin: u6, debug: N2 }), I2 = j3.delaunay, z6 = j3.voronoi, F2 = D3({ elementRef: O5, nodes: i6, delaunay: I2, margin: u6, detectionRadius: w5, setCurrent: d3, onMouseEnter: s5, onMouseMove: c9, onMouseLeave: h2, onClick: v6, onTouchStart: f3, onTouchMove: p4, onTouchEnd: g4, enableTouchCrosshair: y4, tooltip: E4, tooltipPosition: S3, tooltipAnchor: A4 }), H4 = F2.current, B5 = F2.handleMouseEnter, q2 = F2.handleMouseMove, G = F2.handleMouseLeave, J2 = F2.handleClick, K3 = F2.handleTouchStart, Q3 = F2.handleTouchMove, U2 = F2.handleTouchEnd, V2 = (0, import_react9.useMemo)(function() {
    if (N2 && z6) return z6.render();
  }, [N2, z6]);
  return (0, import_jsx_runtime5.jsxs)("g", { ref: O5, transform: "translate(" + -u6.left + "," + -u6.top + ")", children: [N2 && z6 && (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [(0, import_jsx_runtime5.jsx)("path", { d: V2, stroke: "red", strokeWidth: 1, opacity: 0.75 }), w5 < 1 / 0 && (0, import_jsx_runtime5.jsx)("path", { stroke: "red", strokeWidth: 0.35, fill: "none", d: I2.renderPoints(void 0, w5) }), H4 && (0, import_jsx_runtime5.jsx)("path", { fill: "pink", opacity: 0.35, d: z6.renderCell(H4[0]) })] }), (0, import_jsx_runtime5.jsx)("rect", { "data-ref": "mesh-interceptor", width: u6.left + t10 + u6.right, height: u6.top + r7 + u6.bottom, fill: "red", opacity: 0, style: { cursor: "auto" }, onMouseEnter: B5, onMouseMove: q2, onMouseLeave: G, onTouchStart: K3, onTouchMove: Q3, onTouchEnd: U2, onClick: J2 })] });
};
var z4 = function(n7, o5) {
  n7.save(), n7.globalAlpha = 0.75, n7.beginPath(), o5.render(n7), n7.strokeStyle = "red", n7.lineWidth = 1, n7.stroke(), n7.restore();
};
var H2 = function(n7, o5, e11) {
  n7.save(), n7.globalAlpha = 0.35, n7.beginPath(), o5.renderCell(e11, n7), n7.fillStyle = "pink", n7.fill(), n7.restore();
};

// node_modules/@nivo/line/dist/nivo-line.es.js
function Q2() {
  return Q2 = Object.assign ? Object.assign.bind() : function(e11) {
    for (var o5 = 1; o5 < arguments.length; o5++) {
      var i6 = arguments[o5];
      for (var t10 in i6) Object.prototype.hasOwnProperty.call(i6, t10) && (e11[t10] = i6[t10]);
    }
    return e11;
  }, Q2.apply(this, arguments);
}
var U = (0, import_react10.memo)(function(e11) {
  var o5 = e11.point;
  return (0, import_jsx_runtime6.jsx)(w, { id: (0, import_jsx_runtime6.jsxs)("span", { children: ["x: ", (0, import_jsx_runtime6.jsx)("strong", { children: o5.data.xFormatted }), ", y:", " ", (0, import_jsx_runtime6.jsx)("strong", { children: o5.data.yFormatted })] }), enableChip: true, color: o5.serieColor });
});
var Z = (0, import_react10.memo)(function(e11) {
  var o5 = e11.slice, i6 = e11.axis, t10 = zt(), n7 = "x" === i6 ? "y" : "x";
  return (0, import_jsx_runtime6.jsx)(C, { rows: o5.points.map(function(e12) {
    return [(0, import_jsx_runtime6.jsx)(g, { color: e12.serieColor, style: t10.tooltip.chip }, "chip"), e12.serieId, (0, import_jsx_runtime6.jsx)("span", { style: t10.tooltip.tableCellValue, children: e12.data[n7 + "Formatted"] }, "value")];
  }) });
});
var $2 = { curve: "linear", xScale: { type: "point" }, yScale: { type: "linear", min: 0, max: "auto" }, layers: ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"], axisBottom: {}, axisLeft: {}, enableGridX: true, enableGridY: true, enablePoints: true, pointSize: 6, pointColor: { from: "color" }, pointBorderWidth: 0, pointBorderColor: { theme: "background" }, enablePointLabel: false, pointLabel: "yFormatted", colors: { scheme: "nivo" }, enableArea: false, areaBaselineValue: 0, areaOpacity: 0.2, areaBlendMode: "normal", lineWidth: 2, legends: [], isInteractive: true, tooltip: U, enableSlices: false, debugSlices: false, sliceTooltip: Z, debugMesh: false, enableCrosshair: true, crosshairType: "bottom-left" };
var _2 = Q2({}, $2, { enablePointLabel: false, useMesh: false, enableTouchCrosshair: false, animate: true, motionConfig: "gentle", defs: [], fill: [], role: "img" });
var ee = Q2({}, $2, { pixelRatio: "undefined" != typeof window && window.devicePixelRatio || 1 });
var oe = function(e11) {
  var i6 = e11.curve;
  return (0, import_react10.useMemo)(function() {
    return line_default().defined(function(e12) {
      return null !== e12.x && null !== e12.y;
    }).x(function(e12) {
      return e12.x;
    }).y(function(e12) {
      return e12.y;
    }).curve(lt(i6));
  }, [i6]);
};
var ie = function(e11) {
  var i6 = e11.curve, t10 = e11.yScale, n7 = e11.areaBaselineValue;
  return (0, import_react10.useMemo)(function() {
    return area_default().defined(function(e12) {
      return null !== e12.x && null !== e12.y;
    }).x(function(e12) {
      return e12.x;
    }).y1(function(e12) {
      return e12.y;
    }).curve(lt(i6)).y0(t10(n7));
  }, [i6, t10, n7]);
};
var te = function(e11) {
  var i6 = e11.componentId, t10 = e11.enableSlices, n7 = e11.points, r7 = e11.width, a5 = e11.height;
  return (0, import_react10.useMemo)(function() {
    if (false === t10) return [];
    if ("x" === t10) {
      var e12 = /* @__PURE__ */ new Map();
      return n7.forEach(function(o6) {
        null !== o6.data.x && null !== o6.data.y && (e12.has(o6.x) ? e12.get(o6.x).push(o6) : e12.set(o6.x, [o6]));
      }), Array.from(e12.entries()).sort(function(e13, o6) {
        return e13[0] - o6[0];
      }).map(function(e13, o6, t11) {
        var n8, l5, s5 = e13[0], c9 = e13[1], u6 = t11[o6 - 1], d3 = t11[o6 + 1];
        return n8 = u6 ? s5 - (s5 - u6[0]) / 2 : s5, l5 = d3 ? s5 - n8 + (d3[0] - s5) / 2 : r7 - n8, { id: "slice:" + i6 + ":" + s5, x0: n8, x: s5, y0: 0, y: 0, width: l5, height: a5, points: c9.reverse() };
      });
    }
    if ("y" === t10) {
      var o5 = /* @__PURE__ */ new Map();
      return n7.forEach(function(e13) {
        null !== e13.data.x && null !== e13.data.y && (o5.has(e13.y) ? o5.get(e13.y).push(e13) : o5.set(e13.y, [e13]));
      }), Array.from(o5.entries()).sort(function(e13, o6) {
        return e13[0] - o6[0];
      }).map(function(e13, o6, i7) {
        var t11, n8, l5 = e13[0], s5 = e13[1], c9 = i7[o6 - 1], u6 = i7[o6 + 1];
        return t11 = c9 ? l5 - (l5 - c9[0]) / 2 : l5, n8 = u6 ? l5 - t11 + (u6[0] - l5) / 2 : a5 - t11, { id: l5, x0: 0, x: 0, y0: t11, y: l5, width: r7, height: n8, points: s5.reverse() };
      });
    }
  }, [i6, t10, a5, n7, r7]);
};
var ne = "line";
var re2 = function(e11) {
  var n7 = e11.data, r7 = e11.xScale, a5 = void 0 === r7 ? _2.xScale : r7, l5 = e11.xFormat, s5 = e11.yScale, u6 = void 0 === s5 ? _2.yScale : s5, h2 = e11.yFormat, f3 = e11.width, v6 = e11.height, p4 = e11.colors, m5 = void 0 === p4 ? _2.colors : p4, g4 = e11.curve, y4 = void 0 === g4 ? _2.curve : g4, x4 = e11.areaBaselineValue, b5 = void 0 === x4 ? _2.areaBaselineValue : x4, S3 = e11.pointColor, M3 = void 0 === S3 ? _2.pointColor : S3, C6 = e11.pointBorderColor, k5 = void 0 === C6 ? _2.pointBorderColor : C6, B5 = e11.enableSlices, W5 = void 0 === B5 ? _2.enableSlicesTooltip : B5, E4 = (0, import_react10.useState)((0, import_uniqueId.default)(ne))[0], L3 = Ot(l5), G = Ot(h2), P4 = pr(m5, "id"), F2 = zt(), O5 = Xe(M3, F2), V2 = Xe(k5, F2), Y4 = (0, import_react10.useState)([]), R = Y4[0], I2 = Y4[1], X5 = (0, import_react10.useMemo)(function() {
    return dn2(n7.filter(function(e12) {
      return -1 === R.indexOf(e12.id);
    }), a5, u6, f3, v6);
  }, [n7, R, a5, u6, f3, v6]), z6 = X5.xScale, j3 = X5.yScale, D4 = X5.series, q2 = (0, import_react10.useMemo)(function() {
    var e12 = n7.map(function(e13) {
      return { id: e13.id, label: e13.id, color: P4(e13) };
    }), o5 = e12.map(function(e13) {
      return Q2({}, D4.find(function(o6) {
        return o6.id === e13.id;
      }), { color: e13.color });
    }).filter(function(e13) {
      return Boolean(e13.id);
    });
    return { legendData: e12.map(function(e13) {
      return Q2({}, e13, { hidden: !o5.find(function(o6) {
        return o6.id === e13.id;
      }) });
    }).reverse(), series: o5 };
  }, [n7, D4, P4]), J2 = q2.legendData, K3 = q2.series, N2 = (0, import_react10.useCallback)(function(e12) {
    I2(function(o5) {
      return o5.indexOf(e12) > -1 ? o5.filter(function(o6) {
        return o6 !== e12;
      }) : [].concat(o5, [e12]);
    });
  }, []), U2 = function(e12) {
    var i6 = e12.series, t10 = e12.getPointColor, n8 = e12.getPointBorderColor, r8 = e12.formatX, a6 = e12.formatY;
    return (0, import_react10.useMemo)(function() {
      return i6.reduce(function(e13, o5) {
        return [].concat(e13, o5.data.filter(function(e14) {
          return null !== e14.position.x && null !== e14.position.y;
        }).map(function(i7, l6) {
          var s6 = { id: o5.id + "." + l6, index: e13.length + l6, serieId: o5.id, serieColor: o5.color, x: i7.position.x, y: i7.position.y };
          return s6.color = t10(o5), s6.borderColor = n8(s6), s6.data = Q2({}, i7.data, { xFormatted: r8(i7.data.x), yFormatted: a6(i7.data.y) }), s6;
        }));
      }, []);
    }, [i6, t10, n8, r8, a6]);
  }({ series: K3, getPointColor: O5, getPointBorderColor: V2, formatX: L3, formatY: G }), Z2 = te({ componentId: E4, enableSlices: W5, points: U2, width: f3, height: v6 });
  return { legendData: J2, toggleSerie: N2, lineGenerator: oe({ curve: y4 }), areaGenerator: ie({ curve: y4, yScale: j3, areaBaselineValue: b5 }), getColor: P4, series: K3, xScale: z6, yScale: j3, slices: Z2, points: U2 };
};
var ae = function(e11) {
  var o5 = e11.areaBlendMode, i6 = e11.areaOpacity, t10 = e11.color, n7 = e11.fill, r7 = e11.path, a5 = Ur(), l5 = a5.animate, s5 = a5.config, c9 = Fr(r7), u6 = useSpring({ color: t10, config: s5, immediate: !l5 });
  return (0, import_jsx_runtime6.jsx)(animated.path, { d: c9, fill: n7 || u6.color, fillOpacity: i6, strokeWidth: 0, style: { mixBlendMode: o5 } });
};
var le = (0, import_react10.memo)(function(e11) {
  var o5 = e11.areaGenerator, i6 = e11.areaOpacity, t10 = e11.areaBlendMode, n7 = e11.lines.slice(0).reverse();
  return (0, import_jsx_runtime6.jsx)("g", { children: n7.map(function(e12) {
    return (0, import_jsx_runtime6.jsx)(ae, Q2({ path: o5(e12.data.map(function(e13) {
      return e13.position;
    })) }, Q2({ areaOpacity: i6, areaBlendMode: t10 }, e12)), e12.id);
  }) });
});
var se = (0, import_react10.memo)(function(e11) {
  var i6 = e11.lineGenerator, t10 = e11.points, n7 = e11.color, r7 = e11.thickness, a5 = (0, import_react10.useMemo)(function() {
    return i6(t10);
  }, [i6, t10]), l5 = Fr(a5);
  return (0, import_jsx_runtime6.jsx)(animated.path, { d: l5, fill: "none", strokeWidth: r7, stroke: n7 });
});
var ce2 = (0, import_react10.memo)(function(e11) {
  var o5 = e11.lines, i6 = e11.lineGenerator, t10 = e11.lineWidth;
  return o5.slice(0).reverse().map(function(e12) {
    var o6 = e12.id, n7 = e12.data, r7 = e12.color;
    return (0, import_jsx_runtime6.jsx)(se, { id: o6, points: n7.map(function(e13) {
      return e13.position;
    }), lineGenerator: i6, color: r7, thickness: t10 }, o6);
  });
});
var ue = (0, import_react10.memo)(function(e11) {
  var o5 = e11.slice, i6 = e11.slices, r7 = e11.axis, a5 = e11.debug, l5 = e11.tooltip, s5 = e11.isCurrent, c9 = e11.setCurrent, u6 = e11.onMouseEnter, d3 = e11.onMouseMove, h2 = e11.onMouseLeave, f3 = e11.onClick, v6 = e11.onTouchStart, p4 = e11.onTouchMove, m5 = e11.onTouchEnd, g4 = k(), y4 = g4.showTooltipFromEvent, x4 = g4.hideTooltip, b5 = (0, import_react10.useCallback)(function(e12) {
    y4((0, import_react10.createElement)(l5, { slice: o5, axis: r7 }), e12, "right"), c9(o5), u6 && u6(o5, e12);
  }, [y4, l5, o5, r7, c9, u6]), S3 = (0, import_react10.useCallback)(function(e12) {
    y4((0, import_react10.createElement)(l5, { slice: o5, axis: r7 }), e12, "right"), d3 && d3(o5, e12);
  }, [y4, l5, o5, r7, d3]), M3 = (0, import_react10.useCallback)(function(e12) {
    x4(), c9(null), h2 && h2(o5, e12);
  }, [x4, c9, h2, o5]), C6 = (0, import_react10.useCallback)(function(e12) {
    f3 && f3(o5, e12);
  }, [o5, f3]), w5 = (0, import_react10.useCallback)(function(e12) {
    y4((0, import_react10.createElement)(l5, { slice: o5, axis: r7 }), e12, "right"), c9(o5), v6 && v6(o5, e12);
  }, [r7, v6, c9, y4, o5, l5]), T4 = (0, import_react10.useCallback)(function(e12) {
    var t10 = e12.touches[0], a6 = document.elementFromPoint(t10.clientX, t10.clientY), s6 = null == a6 ? void 0 : a6.getAttribute("data-ref");
    if (s6) {
      var u7 = i6.find(function(e13) {
        return e13.id === s6;
      });
      u7 && (y4((0, import_react10.createElement)(l5, { slice: u7, axis: r7 }), e12, "right"), c9(u7));
    }
    p4 && p4(o5, e12);
  }, [r7, p4, c9, y4, o5, i6, l5]), k5 = (0, import_react10.useCallback)(function(e12) {
    x4(), c9(null), m5 && m5(o5, e12);
  }, [x4, c9, m5, o5]);
  return (0, import_jsx_runtime6.jsx)("rect", { x: o5.x0, y: o5.y0, width: o5.width, height: o5.height, stroke: "red", strokeWidth: a5 ? 1 : 0, strokeOpacity: 0.75, fill: "red", fillOpacity: s5 && a5 ? 0.35 : 0, onMouseEnter: b5, onMouseMove: S3, onMouseLeave: M3, onClick: C6, onTouchStart: w5, onTouchMove: T4, onTouchEnd: k5, "data-ref": o5.id });
});
var de2 = (0, import_react10.memo)(function(e11) {
  var o5 = e11.slices, i6 = e11.axis, t10 = e11.debug, n7 = e11.height, r7 = e11.tooltip, a5 = e11.current, l5 = e11.setCurrent, s5 = e11.onMouseEnter, c9 = e11.onMouseMove, u6 = e11.onMouseLeave, d3 = e11.onClick, h2 = e11.onTouchStart, f3 = e11.onTouchMove, v6 = e11.onTouchEnd;
  return o5.map(function(e12) {
    return (0, import_jsx_runtime6.jsx)(ue, { slice: e12, slices: o5, axis: i6, debug: t10, height: n7, tooltip: r7, setCurrent: l5, isCurrent: null !== a5 && a5.id === e12.id, onMouseEnter: s5, onMouseMove: c9, onMouseLeave: u6, onClick: d3, onTouchStart: h2, onTouchMove: f3, onTouchEnd: v6 }, e12.id);
  });
});
var he = (0, import_react10.memo)(function(e11) {
  var o5 = e11.points, i6 = e11.symbol, t10 = e11.size, n7 = e11.borderWidth, r7 = e11.enableLabel, a5 = e11.label, l5 = e11.labelYOffset, s5 = zt(), u6 = qn(a5), d3 = o5.slice(0).reverse().map(function(e12) {
    return { id: e12.id, x: e12.x, y: e12.y, datum: e12.data, fill: e12.color, stroke: e12.borderColor, label: r7 ? u6(e12) : null };
  });
  return (0, import_jsx_runtime6.jsx)("g", { children: d3.map(function(e12) {
    return (0, import_jsx_runtime6.jsx)(vn, { x: e12.x, y: e12.y, datum: e12.datum, symbol: i6, size: t10, color: e12.fill, borderWidth: n7, borderColor: e12.stroke, label: e12.label, labelYOffset: l5, theme: s5 }, e12.id);
  }) });
});
var fe = (0, import_react10.memo)(function(e11) {
  var o5 = e11.points, i6 = e11.width, r7 = e11.height, a5 = e11.margin, l5 = e11.setCurrent, s5 = e11.onMouseEnter, c9 = e11.onMouseMove, u6 = e11.onMouseLeave, d3 = e11.onClick, h2 = e11.onTouchStart, f3 = e11.onTouchMove, v6 = e11.onTouchEnd, p4 = e11.tooltip, m5 = e11.debug, g4 = e11.enableTouchCrosshair, y4 = k(), x4 = y4.showTooltipAt, b5 = y4.hideTooltip, S3 = (0, import_react10.useCallback)(function(e12, o6) {
    x4((0, import_react10.createElement)(p4, { point: e12 }), [e12.x + a5.left, e12.y + a5.top], "top"), s5 && s5(e12, o6);
  }, [x4, p4, s5, a5]), M3 = (0, import_react10.useCallback)(function(e12, o6) {
    x4((0, import_react10.createElement)(p4, { point: e12 }), [e12.x + a5.left, e12.y + a5.top], "top"), c9 && c9(e12, o6);
  }, [x4, p4, a5.left, a5.top, c9]), C6 = (0, import_react10.useCallback)(function(e12, o6) {
    b5(), u6 && u6(e12, o6);
  }, [b5, u6]), w5 = (0, import_react10.useCallback)(function(e12, o6) {
    d3 && d3(e12, o6);
  }, [d3]), T4 = (0, import_react10.useCallback)(function(e12, o6) {
    x4((0, import_react10.createElement)(p4, { point: e12 }), [e12.x + a5.left, e12.y + a5.top], "top"), h2 && h2(e12, o6);
  }, [a5.left, a5.top, h2, x4, p4]), k5 = (0, import_react10.useCallback)(function(e12, o6) {
    x4((0, import_react10.createElement)(p4, { point: e12 }), [e12.x + a5.left, e12.y + a5.top], "top"), f3 && f3(e12, o6);
  }, [a5.left, a5.top, f3, x4, p4]), B5 = (0, import_react10.useCallback)(function(e12, o6) {
    b5(), v6 && v6(e12, o6);
  }, [v6, b5]);
  return (0, import_jsx_runtime6.jsx)(I, { nodes: o5, width: i6, height: r7, setCurrent: l5, onMouseEnter: S3, onMouseMove: M3, onMouseLeave: C6, onClick: w5, onTouchStart: T4, onTouchMove: k5, onTouchEnd: B5, enableTouchCrosshair: g4, debug: m5 });
});
var ve = On(function(e11) {
  var o5 = e11.data, t10 = e11.xScale, n7 = void 0 === t10 ? { type: "point" } : t10, a5 = e11.xFormat, l5 = e11.yScale, s5 = void 0 === l5 ? { type: "linear", min: 0, max: "auto" } : l5, u6 = e11.yFormat, d3 = e11.layers, h2 = void 0 === d3 ? ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"] : d3, f3 = e11.curve, v6 = void 0 === f3 ? "linear" : f3, p4 = e11.areaBaselineValue, m5 = void 0 === p4 ? 0 : p4, S3 = e11.colors, M3 = void 0 === S3 ? { scheme: "nivo" } : S3, C6 = e11.margin, w5 = e11.width, W5 = e11.height, E4 = e11.axisTop, G = e11.axisRight, P4 = e11.axisBottom, F2 = void 0 === P4 ? {} : P4, O5 = e11.axisLeft, V2 = void 0 === O5 ? {} : O5, R = e11.enableGridX, I2 = void 0 === R || R, A4 = e11.enableGridY, H4 = void 0 === A4 || A4, z6 = e11.gridXValues, j3 = e11.gridYValues, D4 = e11.lineWidth, q2 = void 0 === D4 ? 2 : D4, J2 = e11.enableArea, K3 = void 0 !== J2 && J2, N2 = e11.areaOpacity, $3 = void 0 === N2 ? 0.2 : N2, _3 = e11.areaBlendMode, ee2 = void 0 === _3 ? "normal" : _3, oe2 = e11.enablePoints, ie2 = void 0 === oe2 || oe2, te2 = e11.pointSymbol, ne2 = e11.pointSize, ae2 = void 0 === ne2 ? 6 : ne2, se2 = e11.pointColor, ue2 = void 0 === se2 ? { from: "color" } : se2, ve2 = e11.pointBorderWidth, pe2 = void 0 === ve2 ? 0 : ve2, me2 = e11.pointBorderColor, ge2 = void 0 === me2 ? { theme: "background" } : me2, ye2 = e11.enablePointLabel, xe = void 0 !== ye2 && ye2, be = e11.pointLabel, Se = void 0 === be ? "data.yFormatted" : be, Me2 = e11.pointLabelYOffset, Ce2 = e11.defs, we2 = void 0 === Ce2 ? [] : Ce2, Te2 = e11.fill, ke2 = void 0 === Te2 ? [] : Te2, Be2 = e11.markers, We2 = e11.legends, Ee = void 0 === We2 ? [] : We2, Le2 = e11.isInteractive, Ge2 = void 0 === Le2 || Le2, Pe2 = e11.useMesh, Fe2 = void 0 !== Pe2 && Pe2, Oe2 = e11.debugMesh, Ve2 = void 0 !== Oe2 && Oe2, Ye2 = e11.onMouseEnter, Re2 = e11.onMouseMove, Ie = e11.onMouseLeave, Ae = e11.onClick, He2 = e11.onTouchStart, Xe2 = e11.onTouchMove, ze = e11.onTouchEnd, je2 = e11.tooltip, De2 = void 0 === je2 ? U : je2, qe2 = e11.enableSlices, Je2 = void 0 !== qe2 && qe2, Ke2 = e11.debugSlices, Ne2 = void 0 !== Ke2 && Ke2, Qe3 = e11.sliceTooltip, Ue2 = void 0 === Qe3 ? Z : Qe3, Ze2 = e11.enableCrosshair, $e2 = void 0 === Ze2 || Ze2, _e = e11.crosshairType, eo = void 0 === _e ? "bottom-left" : _e, oo = e11.enableTouchCrosshair, io = void 0 !== oo && oo, to3 = e11.role, no = void 0 === to3 ? "img" : to3, ro = wt(w5, W5, C6), ao = ro.margin, lo = ro.innerWidth, so = ro.innerHeight, co = ro.outerWidth, uo = ro.outerHeight, ho = re2({ data: o5, xScale: n7, xFormat: a5, yScale: s5, yFormat: u6, width: lo, height: so, colors: M3, curve: v6, areaBaselineValue: m5, pointColor: ue2, pointBorderColor: ge2, enableSlices: Je2 }), fo = ho.legendData, vo = ho.toggleSerie, po = ho.lineGenerator, mo = ho.areaGenerator, go = ho.series, yo = ho.xScale, xo = ho.yScale, bo = ho.slices, So = ho.points, Mo = zt(), Co = Xe(ue2, Mo), wo = Xe(ge2, Mo), To = (0, import_react10.useState)(null), ko = To[0], Bo = To[1], Wo = (0, import_react10.useState)(null), Eo = Wo[0], Lo = Wo[1], Go = { grid: (0, import_jsx_runtime6.jsx)(C4, { theme: Mo, width: lo, height: so, xScale: I2 ? yo : null, yScale: H4 ? xo : null, xValues: z6, yValues: j3 }, "grid"), markers: (0, import_jsx_runtime6.jsx)(Rn, { markers: Be2, width: lo, height: so, xScale: yo, yScale: xo, theme: Mo }, "markers"), axes: (0, import_jsx_runtime6.jsx)(B2, { xScale: yo, yScale: xo, width: lo, height: so, theme: Mo, top: E4, right: G, bottom: F2, left: V2 }, "axes"), areas: null, lines: (0, import_jsx_runtime6.jsx)(ce2, { lines: go, lineGenerator: po, lineWidth: q2 }, "lines"), slices: null, points: null, crosshair: null, mesh: null, legends: Ee.map(function(e12, o6) {
    return (0, import_jsx_runtime6.jsx)(O4, Q2({}, e12, { containerWidth: lo, containerHeight: so, data: e12.data || fo, theme: Mo, toggleSerie: e12.toggleSerie ? vo : void 0 }), "legend." + o6);
  }) }, Po = In(we2, go, ke2);
  return K3 && (Go.areas = (0, import_jsx_runtime6.jsx)(le, { areaGenerator: mo, areaOpacity: $3, areaBlendMode: ee2, lines: go }, "areas")), Ge2 && false !== Je2 && (Go.slices = (0, import_jsx_runtime6.jsx)(de2, { slices: bo, axis: Je2, debug: Ne2, height: so, tooltip: Ue2, current: Eo, setCurrent: Lo, onMouseEnter: Ye2, onMouseMove: Re2, onMouseLeave: Ie, onClick: Ae, onTouchStart: He2, onTouchMove: Xe2, onTouchEnd: ze }, "slices")), ie2 && (Go.points = (0, import_jsx_runtime6.jsx)(he, { points: So, symbol: te2, size: ae2, color: Co, borderWidth: pe2, borderColor: wo, enableLabel: xe, label: Se, labelYOffset: Me2 }, "points")), Ge2 && $e2 && (null !== ko && (Go.crosshair = (0, import_jsx_runtime6.jsx)(P, { width: lo, height: so, x: ko.x, y: ko.y, type: eo }, "crosshair")), null !== Eo && (Go.crosshair = (0, import_jsx_runtime6.jsx)(P, { width: lo, height: so, x: Eo.x, y: Eo.y, type: Je2 }, "crosshair"))), Ge2 && Fe2 && false === Je2 && (Go.mesh = (0, import_jsx_runtime6.jsx)(fe, { points: So, width: lo, height: so, margin: ao, current: ko, setCurrent: Bo, onMouseEnter: Ye2, onMouseMove: Re2, onMouseLeave: Ie, onClick: Ae, onTouchStart: He2, onTouchMove: Xe2, onTouchEnd: ze, tooltip: De2, enableTouchCrosshair: io, debug: Ve2 }, "mesh")), (0, import_jsx_runtime6.jsx)(gn, { defs: Po, width: co, height: uo, margin: ao, role: no, children: h2.map(function(o6, i6) {
    return "function" == typeof o6 ? (0, import_jsx_runtime6.jsx)(import_react10.Fragment, { children: o6(Q2({}, e11, { innerWidth: lo, innerHeight: so, series: go, slices: bo, points: So, xScale: yo, yScale: xo, lineGenerator: po, areaGenerator: mo, currentPoint: ko, setCurrentPoint: Bo, currentSlice: Eo, setCurrentSlice: Lo })) }, i6) : Go[o6];
  }) });
});
var pe = function(e11) {
  return (0, import_jsx_runtime6.jsx)(It, { children: function(o5) {
    var i6 = o5.width, t10 = o5.height;
    return (0, import_jsx_runtime6.jsx)(ve, Q2({ width: i6, height: t10 }, e11));
  } });
};
var me = On(function(e11) {
  var o5 = (0, import_react10.useRef)(null), r7 = e11.width, a5 = e11.height, u6 = e11.margin, d3 = e11.pixelRatio, h2 = void 0 === d3 ? "undefined" != typeof window && window.devicePixelRatio || 1 : d3, f3 = e11.data, v6 = e11.xScale, p4 = void 0 === v6 ? { type: "point" } : v6, m5 = e11.xFormat, y4 = e11.yScale, x4 = void 0 === y4 ? { type: "linear", min: 0, max: "auto" } : y4, b5 = e11.yFormat, S3 = e11.curve, w5 = void 0 === S3 ? "linear" : S3, T4 = e11.layers, k5 = void 0 === T4 ? ["grid", "markers", "axes", "areas", "crosshair", "lines", "points", "slices", "mesh", "legends"] : T4, B5 = e11.colors, L3 = void 0 === B5 ? { scheme: "nivo" } : B5, P4 = e11.lineWidth, F2 = void 0 === P4 ? 2 : P4, O5 = e11.enableArea, Y4 = void 0 !== O5 && O5, R = e11.areaBaselineValue, I2 = void 0 === R ? 0 : R, A4 = e11.areaOpacity, H4 = void 0 === A4 ? 0.2 : A4, z6 = e11.enablePoints, j3 = void 0 === z6 || z6, D4 = e11.pointSize, q2 = void 0 === D4 ? 6 : D4, Z2 = e11.pointColor, $3 = void 0 === Z2 ? { from: "color" } : Z2, _3 = e11.pointBorderWidth, ee2 = void 0 === _3 ? 0 : _3, oe2 = e11.pointBorderColor, ie2 = void 0 === oe2 ? { theme: "background" } : oe2, te2 = e11.enableGridX, ne2 = void 0 === te2 || te2, ae2 = e11.gridXValues, le2 = e11.enableGridY, se2 = void 0 === le2 || le2, ce3 = e11.gridYValues, ue2 = e11.axisTop, de3 = e11.axisRight, he2 = e11.axisBottom, fe2 = void 0 === he2 ? {} : he2, ve2 = e11.axisLeft, pe2 = void 0 === ve2 ? {} : ve2, me2 = e11.legends, ge2 = void 0 === me2 ? [] : me2, ye2 = e11.isInteractive, xe = void 0 === ye2 || ye2, be = e11.debugMesh, Se = void 0 !== be && be, Me2 = e11.onMouseLeave, Ce2 = e11.onClick, we2 = e11.tooltip, Te2 = void 0 === we2 ? U : we2, ke2 = e11.canvasRef, Be2 = wt(r7, a5, u6), We2 = Be2.margin, Ee = Be2.innerWidth, Le2 = Be2.innerHeight, Ge2 = Be2.outerWidth, Pe2 = Be2.outerHeight, Fe2 = zt(), Oe2 = (0, import_react10.useState)(null), Ve2 = Oe2[0], Ye2 = Oe2[1], Re2 = re2({ data: f3, xScale: p4, xFormat: m5, yScale: x4, yFormat: b5, width: Ee, height: Le2, colors: L3, curve: w5, areaBaselineValue: I2, pointColor: $3, pointBorderColor: ie2 }), Ie = Re2.lineGenerator, Ae = Re2.areaGenerator, He2 = Re2.series, Xe2 = Re2.xScale, ze = Re2.yScale, je2 = Re2.points, De2 = W4({ points: je2, width: Ee, height: Le2, debug: Se }), qe2 = De2.delaunay, Je2 = De2.voronoi;
  (0, import_react10.useEffect)(function() {
    ke2 && (ke2.current = o5.current), o5.current.width = Ge2 * h2, o5.current.height = Pe2 * h2;
    var e12 = o5.current.getContext("2d");
    e12.scale(h2, h2), e12.fillStyle = Fe2.background, e12.fillRect(0, 0, Ge2, Pe2), e12.translate(We2.left, We2.top), k5.forEach(function(o6) {
      if ("function" == typeof o6 && o6({ ctx: e12, innerWidth: Ee, innerHeight: Le2, series: He2, points: je2, xScale: Xe2, yScale: ze, lineWidth: F2, lineGenerator: Ie, areaGenerator: Ae, currentPoint: Ve2, setCurrentPoint: Ye2 }), "grid" === o6 && Fe2.grid.line.strokeWidth > 0 && (e12.lineWidth = Fe2.grid.line.strokeWidth, e12.strokeStyle = Fe2.grid.line.stroke, ne2 && z3(e12, { width: Ee, height: Le2, scale: Xe2, axis: "x", values: ae2 }), se2 && z3(e12, { width: Ee, height: Le2, scale: ze, axis: "y", values: ce3 })), "axes" === o6 && j2(e12, { xScale: Xe2, yScale: ze, width: Ee, height: Le2, top: ue2, right: de3, bottom: fe2, left: pe2, theme: Fe2 }), "areas" === o6 && true === Y4) {
        e12.save(), e12.globalAlpha = H4, Ae.context(e12);
        for (var i6 = He2.length - 1; i6 >= 0; i6--) e12.fillStyle = He2[i6].color, e12.beginPath(), Ae(He2[i6].data.map(function(e13) {
          return e13.position;
        })), e12.fill();
        e12.restore();
      }
      if ("lines" === o6 && (Ie.context(e12), He2.forEach(function(o7) {
        e12.strokeStyle = o7.color, e12.lineWidth = F2, e12.beginPath(), Ie(o7.data.map(function(e13) {
          return e13.position;
        })), e12.stroke();
      })), "points" === o6 && true === j3 && q2 > 0 && je2.forEach(function(o7) {
        e12.fillStyle = o7.color, e12.beginPath(), e12.arc(o7.x, o7.y, q2 / 2, 0, 2 * Math.PI), e12.fill(), ee2 > 0 && (e12.strokeStyle = o7.borderColor, e12.lineWidth = ee2, e12.stroke());
      }), "mesh" === o6 && true === Se && (z4(e12, Je2), Ve2 && H2(e12, Je2, Ve2.index)), "legends" === o6) {
        var t10 = He2.map(function(e13) {
          return { id: e13.id, label: e13.id, color: e13.color };
        }).reverse();
        ge2.forEach(function(o7) {
          H(e12, Q2({}, o7, { data: o7.data || t10, containerWidth: Ee, containerHeight: Le2, theme: Fe2 }));
        });
      }
    });
  }, [o5, Ge2, Pe2, k5, Fe2, Ie, He2, Xe2, ze, ne2, ae2, se2, ce3, ue2, de3, fe2, pe2, ge2, je2, j3, q2, Ve2]);
  var Ke2 = (0, import_react10.useCallback)(function(e12) {
    var i6 = Sn(o5.current, e12), t10 = i6[0], n7 = i6[1];
    if (!jn(We2.left, We2.top, Ee, Le2, t10, n7)) return null;
    var r8 = qe2.find(t10 - We2.left, n7 - We2.top);
    return je2[r8];
  }, [o5, We2, Ee, Le2, qe2]), Ne2 = k(), Qe3 = Ne2.showTooltipFromEvent, Ue2 = Ne2.hideTooltip, Ze2 = (0, import_react10.useCallback)(function(e12) {
    var o6 = Ke2(e12);
    Ye2(o6), o6 ? Qe3((0, import_react10.createElement)(Te2, { point: o6 }), e12) : Ue2();
  }, [Ke2, Ye2, Qe3, Ue2, Te2]), $e2 = (0, import_react10.useCallback)(function(e12) {
    Ue2(), Ye2(null), Ve2 && Me2 && Me2(Ve2, e12);
  }, [Ue2, Ye2, Me2]), _e = (0, import_react10.useCallback)(function(e12) {
    if (Ce2) {
      var o6 = Ke2(e12);
      o6 && Ce2(o6, e12);
    }
  }, [Ke2, Ce2]);
  return (0, import_jsx_runtime6.jsx)("canvas", { ref: o5, width: Ge2 * h2, height: Pe2 * h2, style: { width: Ge2, height: Pe2, cursor: xe ? "auto" : "normal" }, onMouseEnter: xe ? Ze2 : void 0, onMouseMove: xe ? Ze2 : void 0, onMouseLeave: xe ? $e2 : void 0, onClick: xe ? _e : void 0 });
});
var ge = (0, import_react10.forwardRef)(function(e11, o5) {
  return (0, import_jsx_runtime6.jsx)(me, Q2({}, e11, { canvasRef: o5 }));
});
var ye = (0, import_react10.forwardRef)(function(e11, o5) {
  return (0, import_jsx_runtime6.jsx)(It, { children: function(i6) {
    var t10 = i6.width, n7 = i6.height;
    return (0, import_jsx_runtime6.jsx)(ge, Q2({ width: t10, height: n7 }, e11, { ref: o5 }));
  } });
});
export {
  ne as LINE_UNIQUE_ID_PREFIX,
  ve as Line,
  ge as LineCanvas,
  ee as LineCanvasDefaultProps,
  _2 as LineDefaultProps,
  pe as ResponsiveLine,
  ye as ResponsiveLineCanvas,
  ie as useAreaGenerator,
  re2 as useLine,
  oe as useLineGenerator,
  te as useSlices
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)
*/
//# sourceMappingURL=@nivo_line.js.map
